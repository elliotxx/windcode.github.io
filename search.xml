<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>hexo-theme-freemind.386 主题设置图片居中</title>
      <link href="/2018/05/14/hexo-theme-freemind-386-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/"/>
      <url>/2018/05/14/hexo-theme-freemind-386-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一款轻量级的博客框架，可以很轻松的生成静态网站，常用于搭配 gitpage 搭建博客。</p><p>而 hexo-theme-freemind.386 是 Hexo 的一款主题，github 主页见：<a href="https://github.com/blackshow/hexo-theme-freemind.386" target="_blank" rel="noopener">blackshow/hexo-theme-freemind.386</a>。</p><p>本博客便采用了 Hexo 的 hexo-theme-freemind.386 主题搭建。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>hexo-theme-freemind.386 主题默认不支持图片居中，所有图片都是左对齐显示的，不太美观。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>其实图片没有居中也不怪 hexo-theme-freemind.386 主题，因为 hexo 中的文章都是用 markdown 编写的，还要渲染成 html 才能拿给主题用，所以主题拿到的 html 已经是固定的图片不居中的格式。</p><p>我们看一下 markdown 渲染之后的图片部分的 html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;a href=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; class=&quot;fancybox&quot; rel=&quot;gallery0&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>这里我的解决办法是在外层的 p 标签上加一个 align=”center” 属性，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;center&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; class=&quot;fancybox&quot; rel=&quot;gallery0&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>做到这一步需要在页面尾部添加一段 javascript 代码。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改 hexo-theme-freemind.386\layout_partial\after_footer.ejs 文件，在文件最后添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  // img align center</span><br><span class="line">  var imgs = document.getElementsByTagName(&quot;img&quot;);</span><br><span class="line">  for(var i=0;i &lt; imgs.length;i++)&#123;</span><br><span class="line">    // current img element</span><br><span class="line">    var img = imgs[i];</span><br><span class="line">    // current img parent node</span><br><span class="line">    var imgp = img.parentNode;</span><br><span class="line">    // current img parent parent node</span><br><span class="line">    var imgpp = img.parentNode.parentNode;</span><br><span class="line">    // set p element center</span><br><span class="line">    if(imgp.nodeName==&apos;A&apos; &amp;&amp; imgpp.nodeName==&apos;P&apos;)&#123;</span><br><span class="line">      imgpp.setAttribute(&quot;align&quot;,&quot;center&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/11/hello-world/"/>
      <url>/2018/05/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>ElasticSearch + Kibana 安装配置(CentOS)</title>
      <link href="/2018/04/26/ElasticSearch%20+%20Kibana%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(CentOS)/"/>
      <url>/2018/04/26/ElasticSearch%20+%20Kibana%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(CentOS)/</url>
      <content type="html"><![CDATA[<h2 id="CentOS-搭建内网可访问的-ElasticSearch-Kibana-环境"><a href="#CentOS-搭建内网可访问的-ElasticSearch-Kibana-环境" class="headerlink" title="CentOS 搭建内网可访问的 ElasticSearch + Kibana 环境"></a>CentOS 搭建内网可访问的 ElasticSearch + Kibana 环境</h2><p>部署环境：CentOS 7 64bit</p><p>使用组件：ElasticSearch 5.4、Kibana 5.4</p><p>实例描述：在一台服务器上搭建 ElasticSearch + Kibana，并使内网可访问，假设服务器地址为 172.16.4.44 。搭建好之后，同一内网中的机器都可以访问这个地址进入 Kibana 查看 ElasticSearch 中的数据。</p><p>组件下载：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">ElasticSearch 5.4</a> 、<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">Kibana 5.4</a> 均采用原生版本</p><p><strong>注意</strong>：ElasticSearch 需要 java8 以上环境，这里假设你已经安装好。<br><a id="more"></a></p><p>部署过程：</p><p>编辑</p><h3 id="1-创建新用户"><a href="#1-创建新用户" class="headerlink" title="1. 创建新用户"></a>1. 创建新用户</h3><p>由于 ElasticSearch 不能用 root 账号启动，所以需要创建一个新用户，假设这里创建一个新用户 ling 。</p><p>以下命令需在root用户下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# adduser ling</span><br><span class="line">[root@localhost ~]# passwd ling</span><br><span class="line">Changing password for user ling.</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@localhost ~]# su ling</span><br><span class="line">[ling@localhost root]$ cd ~</span><br></pre></td></tr></table></figure><p>接下来给新用户ling配置sudo权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost root]$ su root</span><br><span class="line">Password:</span><br><span class="line">[root@localhost ~]# visudo</span><br></pre></td></tr></table></figure></p><p>在sudo配置文件中找到配置root权限的位置，在后面添加一行新用户ling的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">ling    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure></p><h3 id="2-更换java版本为1-8"><a href="#2-更换java版本为1-8" class="headerlink" title="2. 更换java版本为1.8"></a>2. 更换java版本为1.8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo alternatives --config java</span><br><span class="line">[sudo] password for ling:</span><br><span class="line"></span><br><span class="line">There are 3 programs which provide &apos;java&apos;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">   1           /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.31-2.b13.el7.x86_64/jre/bin/java</span><br><span class="line">*+ 2           /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.2.el7_0.x86_64/jre/bin/java</span><br><span class="line">   3           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number: 1</span><br><span class="line">[ling@localhost ~]$</span><br></pre></td></tr></table></figure><p>选择 1.8 版本即可，没有报错即切换成功。</p><p>如果你的机器上没有java8的选项，请手动安装一个。</p><h3 id="3-准备安装文件"><a href="#3-准备安装文件" class="headerlink" title="3. 准备安装文件"></a>3. 准备安装文件</h3><p>下载地址：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">ElasticSearch 5.4</a> 、<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">Kibana 5.4</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ ls</span><br><span class="line">elasticsearch-5.4.0.tar.gz  kibana-5.4.0-linux-x86_64.tar.gz  perl5</span><br><span class="line">[ling@localhost ~]$ tar -xzvf elasticsearch-5.4.0.tar.gz</span><br><span class="line">......</span><br><span class="line">[ling@localhost ~]$ tar -xzvf kibana-5.4.0-linux-x86_64.tar.gz</span><br><span class="line">......</span><br><span class="line">[ling@localhost ~]$ ls</span><br><span class="line">elasticsearch-5.4.0  elasticsearch-5.4.0.tar.gz  kibana-5.4.0-linux-x86_64  kibana-5.4.0-linux-x86_64.tar.gz  perl5</span><br></pre></td></tr></table></figure></p><h3 id="4-启动-ElasticSearch"><a href="#4-启动-ElasticSearch" class="headerlink" title="4. 启动 ElasticSearch"></a>4. 启动 ElasticSearch</h3><p>首先编辑 ElasticSearch 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ vi elasticsearch-5.4.0/config/elasticsearch.yml</span><br></pre></td></tr></table></figure></p><p>假设当前服务器ip地址为 172.16.4.44，修改 55 行 network.host 值为这个ip地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="line">#</span><br><span class="line">network.host: 172.16.4.44</span><br></pre></td></tr></table></figure></p><p>保存退出。</p><p>启动 ElasticSearch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ elasticsearch-5.4.0/bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>这里可能会报很多错误：</p><p><strong>错误1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: bootstrap checks failed</span><br><span class="line">max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><p>切换到root用户，编辑limits.conf 添加类似如下内容</p><p>vi /etc/security/limits.conf</p><p>在文件最后添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure></p><p>重新登录 ling 用户，输入命令查看是否修改成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ su ling</span><br><span class="line">Password:</span><br><span class="line">[ling@localhost ~]$ ulimit -Hn</span><br><span class="line">131072</span><br></pre></td></tr></table></figure></p><p><strong>错误2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><p>切换到root用户修改配置sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure></p><p>添加下面配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure></p><p>并执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo sysctl -p</span><br><span class="line">vm.max_map_count = 655360</span><br></pre></td></tr></table></figure></p><p>然后，重新启动elasticsearch，即可启动成功。</p><p>启动之后，在内网的另一台机器上打开浏览器访问 <strong>172.16.4.44:9200</strong> ，如果连接失败，则回到服务器，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited</span><br></pre></td></tr></table></figure></p><p>删除iptables中阻挡访问的规则。</p><p>重新访问，如果输出如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Z0hRS2f&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;QzsZplKmSLOsTaDezjc1hA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.4.0&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;780f8c4&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-04-28T17:43:27.229Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.5.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明 ElasticSearch 启动成功。</p><h3 id="5-启动-Kibana"><a href="#5-启动-Kibana" class="headerlink" title="5. 启动 Kibana"></a>5. 启动 Kibana</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ vi kibana-5.4.0-linux-x86_64/config/kibana.yml</span><br></pre></td></tr></table></figure></p><p>修改配置文件第 7 行 和第 21 行的 server.host 和 elasticsearch.url 的值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.host: &quot;172.16.4.44&quot;</span><br><span class="line">elasticsearch.url: &quot;http://172.16.4.44:9200&quot;</span><br></pre></td></tr></table></figure></p><p>启动 kibana<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ kibana-5.4.0-linux-x86_64/bin/kibana</span><br></pre></td></tr></table></figure></p><p>如果没有报错，在内网中访问 <strong>172.16.4.44:5601</strong>，即可进入kibana。</p><h3 id="6-后台运行-ElasticSearch-和-Kibana"><a href="#6-后台运行-ElasticSearch-和-Kibana" class="headerlink" title="6. 后台运行 ElasticSearch 和 Kibana"></a>6. 后台运行 ElasticSearch 和 Kibana</h3><p>使用 nohup 后台运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ nohup /home/ling/elasticsearch-5.4.0/bin/elasticsearch &gt; /home/ling/elasticsearch-5.4.0/bin/elasticsearch.log 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 12821</span><br><span class="line">[ling@localhost ~]$ nohup /home/ling/kibana-5.4.0-linux-x86_64/bin/kibana &gt; /home/ling/kibana-5.4.0-linux-x86_64/bin/kibana.log 2&gt;&amp;1 &amp;</span><br><span class="line">[2] 12937</span><br></pre></td></tr></table></figure></p><p>查看 ElasticSearch 和 Kibana 的进程PID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ ps -aux | grep elasticsearch</span><br><span class="line">ling     12821 22.5 14.3 7929072 2336236 pts/0 Sl   18:28   0:21 /bin/java -Xms2g -Xmx2g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -server -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -Djdk.io.permissionsUseCanonicalPath=true -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Dlog4j.skipJansi=true -XX:+HeapDumpOnOutOfMemoryError -Des.path.home=/home/ling/elasticsearch-5.4.0 -cp /home/ling/elasticsearch-5.4.0/lib/* org.elasticsearch.bootstrap.Elasticsearch</span><br><span class="line">ling     12983  0.0  0.0 112640   960 pts/0    S+   18:29   0:00 grep --color=auto elasticsearch</span><br><span class="line">[ling@localhost ~]$ ps -aux | grep kibana</span><br><span class="line">ling     12937  5.9  0.6 1136076 109520 pts/0  Sl   18:28   0:04 /home/ling/kibana-5.4.0-linux-x86_64/bin/../node/bin/node --no-warnings /home/ling/kibana-5.4.0-linux-x86_64/bin/../src/cli</span><br><span class="line">ling     13013  0.0  0.0 112640   960 pts/0    S+   18:30   0:00 grep --color=auto kibana</span><br></pre></td></tr></table></figure></p><h2 id="CentOS-搭建-Bigdesk-节点监控插件"><a href="#CentOS-搭建-Bigdesk-节点监控插件" class="headerlink" title="CentOS 搭建 Bigdesk 节点监控插件"></a>CentOS 搭建 Bigdesk 节点监控插件</h2><p>Bigdesk是一款针对 ElasticSearch 性能的开源实时监控方案。github地址是：<a href="https://github.com/hlstudio/bigdesk" target="_blank" rel="noopener">https://github.com/hlstudio/bigdesk</a></p><p>它的部署十分简单，前提是你已经搭建好一个 ElasticSearch 集群，并可以在内网中访问。</p><p>部署步骤：</p><h3 id="1-修改-ElasticSearch-配置文件"><a href="#1-修改-ElasticSearch-配置文件" class="headerlink" title="1. 修改 ElasticSearch 配置文件"></a>1. 修改 ElasticSearch 配置文件</h3><p>要让 Bigdesk 支持 ES5.x 版本，需要修改 ElasticSearch 的配置文件，添加以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></p><h3 id="2-克隆-Bigdesk-到本地"><a href="#2-克隆-Bigdesk-到本地" class="headerlink" title="2. 克隆 Bigdesk 到本地"></a>2. 克隆 Bigdesk 到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ git clone https://github.com/hlstudio/bigdesk.git</span><br></pre></td></tr></table></figure><h3 id="3-移动到-site-目录"><a href="#3-移动到-site-目录" class="headerlink" title="3. 移动到 _site 目录"></a>3. 移动到 _site 目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ cd bigdesk/</span><br><span class="line">[ling@localhost bigdesk]$ cd _site/</span><br></pre></td></tr></table></figure><h3 id="4-启动-SimpleHTTPServer-服务器"><a href="#4-启动-SimpleHTTPServer-服务器" class="headerlink" title="4. 启动 SimpleHTTPServer 服务器"></a>4. 启动 SimpleHTTPServer 服务器</h3><p>使用 python 的 SimpleHTTPServer ，可以以当前文件夹为根目录部署一个简单的服务器，以便在内网中访问 Bigdesk：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost _site]$ python -m SimpleHTTPServer 9000</span><br></pre></td></tr></table></figure></p><p>这时，在内网中访问 <strong>172.16.5.55:9000</strong> （这里假设我们在该ip地址上部署bigdesk），并在显示的页面中输入一个集群中节点的访问地址，便可以用 bigdesk 监控 ElasticSearch 性能了：</p><h3 id="5-后台运行-Bigdesk"><a href="#5-后台运行-Bigdesk" class="headerlink" title="5. 后台运行 Bigdesk"></a>5. 后台运行 Bigdesk</h3><p>执行以下命令可以在后台运行 Bigdesk（假设你的安装位置和我一样）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost _site]$ nohup python -m SimpleHTTPServer &gt; /home/ling/bigdesk/_site/bigdesk.log 9000 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>查看 Bigdesk 进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost _site]$ ps -aux | grep SimpleHTTPServer</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.Elasticsearch5.0 安装问题集锦<br><a href="http://www.cnblogs.com/sloveling/p/elasticsearch.html" target="_blank" rel="noopener">http://www.cnblogs.com/sloveling/p/elasticsearch.html</a></p><p>2.记录Linux下安装elasticSearch时遇到的一些错误<br><a href="http://blog.csdn.net/gebitan505/article/details/54709515" target="_blank" rel="noopener">http://blog.csdn.net/gebitan505/article/details/54709515</a></p><p>3.linux 使用alternatives 切换Java版本<br><a href="http://blog.csdn.net/sdcxyz/article/details/45078717" target="_blank" rel="noopener">http://blog.csdn.net/sdcxyz/article/details/45078717</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/409" target="_blank" rel="noopener">ElasticSearch + Kibana 安装配置(CentOS)</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>解决VPS经SS访问Google Schoolar受限（补充）</title>
      <link href="/2018/04/02/%E8%A7%A3%E5%86%B3VPS%E7%BB%8FSS%E8%AE%BF%E9%97%AEGoogle%20Schoolar%E5%8F%97%E9%99%90%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89/"/>
      <url>/2018/04/02/%E8%A7%A3%E5%86%B3VPS%E7%BB%8FSS%E8%AE%BF%E9%97%AEGoogle%20Schoolar%E5%8F%97%E9%99%90%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要解决通过 ss 访问 谷歌学术，报如下错误的问题：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d9893fc3-ee7b-4247-bb2d-1908ebd629d9.png" alt=""></p><p>提示信息为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">We<span class="string">'re sorry... but your computer or network may be sending automated queries. </span></span><br><span class="line"><span class="string">To protect our users, we can'</span>t process your request right now.</span><br></pre></td></tr></table></figure><p>网上找到一篇文章可以基本解决这个问题：<a href="https://blog.csdn.net/lm409/article/details/73658105" target="_blank" rel="noopener">解决VPS经SS访问Google Schoolar受限</a>，但是我在尝试的过程中发现有些坑还是花费了不少时间，下面针对这些坑对上文进行补充性的建议。<br><a id="more"></a></p><h2 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h2><ol><li><p>该文的 vps 基于 vultr，其他 vps 开启 ipv6 的方法另做参考</p></li><li><p>配置文件修改过后，记得重启服务器（比如修改 hosts、sysctl.conf 等之后）</p></li><li><p>打算尝试第二种方法“如果是IPv4网段被封”的时候，记得将第一种方法“如果是IPv6网段被封”中对 sysctl.conf 做的修改恢复</p></li><li><p>在尝试第二种方法“如果是IPv4网段被封”的时候，需要通过修改 hosts 文件来对谷歌学术的域名强制 ipv6 访问，照文修改之后，发现不能访问某篇论文的 bib 引用</p></li></ol><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/94e56dde-54f3-45f0-8ac1-ff93278a3f4e.png" alt=""></p><p>这个时候，在上文对 /etc/hosts 的修改之后，再添加上以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:<span class="number">801</span>::<span class="number">2001</span> scholar.googleusercontent.com</span><br></pre></td></tr></table></figure><p>修改保存之后别忘了重启服务器</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>结合文章 <a href="https://blog.csdn.net/lm409/article/details/73658105" target="_blank" rel="noopener">解决VPS经SS访问Google Schoolar受限</a> 和 本文，基本可以解决通过 vultr vps 搭建的 ss 访问谷歌学术受限的问题。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/408" target="_blank" rel="noopener">解决VPS经SS访问Google Schoolar受限（补充）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 Frp 进行内网穿透（在外网用 ssh 登录校园网中的服务器）</title>
      <link href="/2018/04/02/%E4%BD%BF%E7%94%A8%20Frp%20%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%9C%A8%E5%A4%96%E7%BD%91%E7%94%A8%20ssh%20%E7%99%BB%E5%BD%95%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/"/>
      <url>/2018/04/02/%E4%BD%BF%E7%94%A8%20Frp%20%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%9C%A8%E5%A4%96%E7%BD%91%E7%94%A8%20ssh%20%E7%99%BB%E5%BD%95%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想在外网用 ssh 登录内网（校园网）的服务器，以便在外网也能跑跑实验什么的，于是研究了一下常用的内网穿透工具，下面分享下我的心得。</p><p>首先介绍一下 <strong>内网穿透解决的痛点</strong>，比如导师在你们实验室买了一台高配服务器，装配有高端显卡，可以用来跑深度学习模型，你在实验室玩的很开心。但是到了暑假你不得不离开实验室，回到家里的外网没法访问处于实验室内网的服务器，vpn也没法用！这怎么办呢，这个时候可以用内网穿透工具来解决这个问题啦！</p><p><strong>部署的思路</strong> 是把内网穿透工具的客户端部署在内网服务器中，然后在有独立域名的 VPS 中部署内网穿透工具的服务端，然后你在外网的随便一台机器上用 ssh 登录你的 VPS 的 IP 和配置好的端口，便可以登录内网的服务器啦！</p><p>其实 <strong>原理</strong> 就是把 VPS 当做一个“桥”，和内网的操作全部通过互联网和这个“桥”连通，这样便打穿了内网和外网的界限。<br><a id="more"></a></p><h2 id="三款内网穿透工具"><a href="#三款内网穿透工具" class="headerlink" title="三款内网穿透工具"></a>三款内网穿透工具</h2><p>下面介绍一下我了解的三种内网穿透工具，花生壳、Ngrok 和 Frp。</p><p>最常见也是最知名的内网穿透工具大概就是花生壳了，优点是功能强大，配置完善，缺点是要花钱，这个方案果断放弃。</p><p>然后我尝试了 Ngrok，相比花生壳它的优点是开源、免费，缺点是部署偏麻烦，编译到一半的时候发现 Frp 可以直接使用二进制包，果断弃坑。</p><p>Frp 也是一款开源、免费的内网穿透工具，诞生时间晚，但是十分具有活力，简单实用。按照教程部署了 Frp 的服务端和客户端，5分钟便实现了内网穿透，在外网通过 ssh 访问了内网的服务器。赞一个。</p><h2 id="部署-Frp"><a href="#部署-Frp" class="headerlink" title="部署 Frp"></a>部署 Frp</h2><p>部署的方法我就不啰嗦了，参考 <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">github 的 Frp 主页</a> 或者 看教程都行。教程可见：<a href="https://blog.csdn.net/qq_25351621/article/details/78947477" target="_blank" rel="noopener">frp内网穿透搭建，超级简单实用</a>，亲测可用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>一分钟实现内网穿透（ngrok服务器搭建）<br><a href="https://blog.csdn.net/zhangguo5/article/details/77848658" target="_blank" rel="noopener">https://blog.csdn.net/zhangguo5/article/details/77848658</a></p></li><li><p>搭建 ngrok 实现内网穿透<br><a href="https://blog.csdn.net/per_son/article/details/53738330" target="_blank" rel="noopener">https://blog.csdn.net/per_son/article/details/53738330</a></p></li><li><p>如何远程登录家里的Ubuntu电脑(命令行模式)？ - 知乎<br><a href="https://www.zhihu.com/question/27771692" target="_blank" rel="noopener">https://www.zhihu.com/question/27771692</a></p></li><li><p>frp内网穿透搭建，超级简单实用<br><a href="https://blog.csdn.net/qq_25351621/article/details/78947477" target="_blank" rel="noopener">https://blog.csdn.net/qq_25351621/article/details/78947477</a></p></li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/407" target="_blank" rel="noopener">使用 Ngrok 进行内网穿透（在外网用 ssh 登录校园网中的服务器）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018 年 4 月份阅读记录</title>
      <link href="/2018/03/18/2018%20%E5%B9%B4%204%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/03/18/2018%20%E5%B9%B4%204%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="《沙丘-1》"><a href="#《沙丘-1》" class="headerlink" title="《沙丘 1》"></a>《沙丘 1》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/98e572c4-4efc-4cae-b131-9bb9dbe3892a.png" alt=""></p><p>标签：科幻经典、星云奖</p><p>每个“一生必读”的书单上都有《沙丘》——曾不止一次在对沙丘的评价中看到这句话，在科幻小说史上，《沙丘》也的确有特殊的地位，可以说是科幻小说界的经典之作，久负盛名。</p><p>最早知道《沙丘》之名，是小时候在网上搜红色警戒游戏安装包的时候，总能在相关推荐中看到《沙丘2000》的名字，这是以沙丘为背景的策略游戏，那时的我不可避免的也对这个名字和它背后的故事产生了好奇。</p><p>前段时间看到熊猫君对《沙丘》的推荐，以及当当上打折的消息，于是便顺势买下了1-3部。</p><p>迫不及待打开《沙丘》开始阅读，相比《地海巫师》，《沙丘》更加没让我失望，你能感觉到作者在用心去讲述一个故事。而小说故事的背景设定也十分宏大，沙漠之星，香料和沙虫，宇航公会，银河帝国等等，听作者将这些娓娓道来，仿佛真的存在这么一个真实的世界，从这一点上便能看出名作和庸作的差别。</p><p>不过个人感觉，《沙丘》毕竟是多年前的科幻小说，现在读起来难免感觉没那么“新”，少有那种看大刘小说时那种耳目一新、惊为天人的新奇脑洞。虽然有些陈旧感，但它作为经受过时间考验，流传至今的科幻名著，是值得科幻爱好者一读的。</p><p>推荐指数：★★★</p><h2 id="《沙丘-2：沙丘救世主》"><a href="#《沙丘-2：沙丘救世主》" class="headerlink" title="《沙丘 2：沙丘救世主》"></a>《沙丘 2：沙丘救世主》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png" alt=""></p><p>标签：科幻经典、星云奖</p><p>保罗统一了银河，却在日益庞大的政治机器前逐渐感到力不从心，国家脱离了他的控制，甚至出现了密谋反叛的小团体，保罗本人也受到预言幻境的折磨。保罗厌恶战争，他引起的“圣战”却屠戮了600亿人，他向往自由，却被教徒们推向神坛。</p><p>和第一部英雄波澜壮阔的复仇和征服壮举相比，《沙丘》的第二部更偏向于权谋之下人性的描写，它暴露了帝王和救世主保罗的阴暗面和脆弱面。最终保罗将自己流放到沙漠之中，虽生死由天，但却摆脱了世俗的纠缠，看穿命运之人终于“自由”。</p><p>相比第一部的新奇，在熟悉了作者的文风之后，《沙丘2》在我面前变得有些泛善可陈，这一部没有激起我多大的阅读兴趣。</p><p>推荐指数：★★☆</p><p>##《沙丘 3：沙丘之子》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/0c575468-5c6d-49a2-a947-96e2ecdf1f54.png" alt=""></p><p>标签：科幻经典、星云奖</p><p>《沙丘 3》讲述的是保罗的儿子雷托的故事，在保罗“去世”之后，保罗的妹妹继承了皇位，成为执政女皇，然而她却被体内的意志诱惑，成为“邪物”。保罗的双胞胎儿女和他们的姑姑一样，从出生便具有无数祖先的意识，他们同样受到无数意识的诱惑。同时，各方势力对他们这对帝国的合法继承人虎视眈眈，保罗一手缔造的帝国岌岌可危。他们必须快速成长，并找出一条万全之策，应对来自各方和内心的压力。</p><p>和上一部相比，小说描写还是较为晦涩，有种“故弄玄虚”的感觉，很多片段支离破碎，不知道是作者故意这样，还是国内翻译的问题。这一部最后的结局还较有新意，雷托在压力下迈出决绝的一步，和沙虫结合为一体，击败邪魔入体的姑姑，垄断香料产出，成为统治帝国千年的“沙丘神帝”，这是下一步的故事了。</p><p>推荐指数：★★☆</p><h2 id="《我们仨》"><a href="#《我们仨》" class="headerlink" title="《我们仨》"></a>《我们仨》</h2><p>标签：杨绛</p><p>推荐指数：★★★☆</p><h2 id="《女生徒》"><a href="#《女生徒》" class="headerlink" title="《女生徒》"></a>《女生徒》</h2><p>标签：太宰治</p><p>推荐指数：★★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/406" target="_blank" rel="noopener">2018 年 3 月份阅读记录<br><a id="more"></a></a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018 年 2 月份阅读记录</title>
      <link href="/2018/03/18/2018%20%E5%B9%B4%202%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/03/18/2018%20%E5%B9%B4%202%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="《地海传奇1：地海巫师》"><a href="#《地海传奇1：地海巫师》" class="headerlink" title="《地海传奇1：地海巫师》"></a>《地海传奇1：地海巫师》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/&lt;!---more---&gt;7/2a2a20a1-9edf-4052-bf57-5bbfc01fa467.png" alt=""></p><p>标签：奇幻、名著</p><p>作为《地海传奇》系列的第一部，《地海巫师》讲述的是主角格得年少时候在巫师学院的求学经历以及和黑影搏斗的故事。厄休拉大师的文笔细腻，行文优美，《地海巫师》既是一部奇幻小说，也是一部少年心灵成长史，可以说是老少咸宜。</p><p>看这个系列的原由是看了熊猫君（读客出版社的微信公众号）的推荐，其实我一直在寻找正统的奇幻小说，看过推荐之后，感觉《地海传奇》像是我的菜，于是买来一读，看完第一部，应该说感觉还不错，至少没让我失望。获得过星云奖与雨果奖的大师出品，质量果然有保证。</p><p>另外墙裂推荐熊猫君的公众号，优质推荐图书，推荐的图书很合我的口味，是我目前看到的最好的荐书公众号。微信搜索公众号“每晚推一本好书的熊猫君”可以添加。个人推荐，不是打广告哈 = =。</p><p>推荐指数：★★★</p><h2 id="《地海传奇2：地海古墓》"><a href="#《地海传奇2：地海古墓》" class="headerlink" title="《地海传奇2：地海古墓》"></a>《地海传奇2：地海古墓》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/63cd2c99-3375-4a31-93d7-ee7aa430ff6f.png" alt=""></p><p>标签：奇幻、名著</p><p>《地海传奇》的第二部《地海古墓》讲述的是青年格得为了找寻失落的和平之环，独身来到峨团古墓探索，同时帮助古墓女祭司恬娜走出阴暗陵墓与封闭自我，寻得自由的故事。</p><p>这一部的看点在于格得和古墓祭祀恬娜接触，并引导她逐渐解放自我的过程，这中间格得的稳重和责任感，恬娜不甘自我封闭的倔强性格，都在剧情发展的过程中展现的十分充分。</p><p>推荐指数：★★★</p><h2 id="《地海传奇3：地海彼岸》"><a href="#《地海传奇3：地海彼岸》" class="headerlink" title="《地海传奇3：地海彼岸》"></a>《地海传奇3：地海彼岸》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/ee81fce8-e3d8-4a1c-a3f1-1634fcc9ad51.png" alt=""></p><p>标签：奇幻、名著</p><p>《地海传奇》的第三部《地海彼岸》讲述的是中年格得已经成为大法师，带领英拉德王子追寻并击败黑暗法师，并辅佐他成为地海之王的故事。</p><p>读到第三部，发现厄休拉大师的文笔比较慢热，《地海传奇》中没有那么多热血剧情，文字沉静如水，作者以缓慢优雅的笔触传达给读者一份宁静的智慧，这颇有一分“道”的精神。</p><p>（厄休拉曾花30年翻译《道德经》，深谙道家文化）</p><p>推荐指数：★★★</p><h2 id="《地海传奇4：地海孤儿》"><a href="#《地海传奇4：地海孤儿》" class="headerlink" title="《地海传奇4：地海孤儿》"></a>《地海传奇4：地海孤儿》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d3c473dc-b517-4092-9d58-ba6ee9046bcc.png" alt=""></p><p>标签：奇幻、名著</p><p>《地海传奇》的第四部《地海孤儿》紧跟第三部的剧情，在大法师格得击败黑暗法师，恢复自然界平衡之后，丧失了全部法力，回到家乡弓忒岛归隐，并重新找回和恬娜的感情。地海孤儿是指恬娜收养的一个小孩，童年时惨遭虐待，幸而最终找到爱她的父母。</p><p>这一部换了译者，读起来十分不通顺，另外心理描写过多，剧情拖沓，前期差点读不下去。格得在这一部中失去法力，却甘于成为一名普通人，这大概是他人格中伟大的地方。而也只有他失去法力之时，才能回到恬娜身边。正所谓能力越大，责任越大，法力充盈之时，心系天下，解救苍生，失去法力，也甘于平静，这便是格得的“道”。</p><p>到第四部为止，大法师格得的故事便讲完了，余下两部讲述的是地海其它地方发生的故事，我会继续读下去的。</p><p>推荐指数：★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/405" target="_blank" rel="noopener">2018 年 2 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2018 年 1 月份阅读记录</title>
      <link href="/2017/12/27/2018%20%E5%B9%B4%201%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/12/27/2018%20%E5%B9%B4%201%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="《编码宝典-1》"><a href="#《编码宝典-1》" class="headerlink" title="《编码宝典 1》"></a>《编码宝典 1》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/a9&lt;!---more---&gt;42b948-2b1f-48f0-a225-dc9d984542ba.png" alt=""></p><p>标签：赛博朋克、Geek 经典</p><p>初看到这部小说的书名，你可能会以为是三流的编程教材，实际上它是近20年前的一部科幻小说。作者是美国科幻大师、赛博朋克代表人物尼尔 · 斯蒂芬森，这部小说长达一千页，将近100万字，可以说是浩繁卷轶。小说以二战期间的密码破译战争为中心线索，书写了一部跨越时空的信息流动发展史，被誉为 IT 界的「Geek 圣经」。</p><p>几年前就开始关注这部小说，被其充斥的极客气息所吸引，于是上网找了一番，但发现只有英文版本。今年无意中发现它已经出了中文版，一套三册，刚刚发行，于是没有犹豫就买了回来。</p><p>小说围绕着“编码”来讲述故事，编码和计算机密切相关，在本书中的含义是对信息的加密和解密。本书描写了两拨假想的密码破译高手，第一拨活跃于二战期间，包括大名鼎鼎的阿兰·图灵；第二拨活跃于20世纪90年代，他们建立了地下数据港，最终目的是帮助那些可能成为种族灭绝目标的群体自卫求生存。</p><p>我感兴趣的是书中的故事包括了一些真实的历史人物以及历史事件，比如二战时期图灵破解恩格玛机，小说巧妙的把虚拟的故事和真实历史结合在了一起。另外围绕着加密解密的故事剧情也让人感到极客感爆棚，作者在数学、密码学等领域都有涉猎，所以书中有的时候还会放一两个图表公式，让人一脸懵逼。</p><p>其实这套书我看起来十分费劲，有很长一段时间我完全不知道作者在讲什么，剧情零碎，语言晦涩，阅读体验其实有点糟糕。能啃下这套书来，还是需要一定的耐心。</p><p>推荐指数：★★☆</p><h2 id="《克苏鲁神话-Ⅱ》"><a href="#《克苏鲁神话-Ⅱ》" class="headerlink" title="《克苏鲁神话 Ⅱ》"></a>《克苏鲁神话 Ⅱ》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/6a795206-02c6-42f2-b0ea-3501b1ef7837.png" alt=""></p><p>标签：克苏鲁神话</p><p>姚向辉老师出的这个《克苏鲁神话》系列我自从看过第一本之后便十分有好感，精致的装帧，考究的封面、内页和排版，看得出编辑团队在这上面花了心思，没想到时隔一年，第二部也让人惊喜的出版了。</p><p>第二部沿袭了上一部的装帧和排版风格，同样让人爱不释手，对于一名纸质书爱好者来说，阅读这样的一本书是一种很棒的体验。</p><p>算算去年差不多也是这个时候在看第一部，那个时候还写过一篇稍长的读后感（这里=&gt;<a href="http://www.yangyingming.com/article/356/" target="_blank" rel="noopener">谈谈《克苏鲁神话》</a>），小小总结了一下克苏鲁神话。</p><p>吹完了这本书的包装，下面谈谈《克苏鲁神话 Ⅱ》的内容。</p><p>《克苏鲁神话》1/2收录的都是克苏鲁神话的创造者 <strong>洛夫克拉夫特</strong>（英文名 Lovecraft，江湖人称爱手艺大神）的作品，可谓是血统纯正的克苏鲁神话文集。其中《Ⅱ》收录有《疯狂山脉》、《墙中之鼠》、《印斯茅斯小镇的阴霾》、《超越时间之影》，虽然相比第一部收录的文章少了一半，但都是爱手艺大神中短篇小说中的名篇。这些小说继承了经典的洛式恐怖小说风格。</p><p>《疯狂山脉》是爱手艺大神的巅峰之作，篇幅占全书的将近一半，讲述的一支科考小队在南极一条神秘山脉中惊险奇诡的遭遇。小说前期叙事十分细致，稍显繁琐，到后期逐渐进入佳境，神秘事件的出现开始吸引读者阅读，到最后的描写略显晦涩，需要脑补才能体会到文中想表达的诡异画面。总的来说，如果想体验克苏鲁风格的小说，这部中篇应该是必读之选。</p><p>《墙中之鼠》是一个短篇，短小精悍，文末有小反转，值得一读。</p><p>《印斯茅斯小镇的阴霾》，这篇中短文也是爱手艺大神的经典之作，在读这篇小说的时候，透过文字都能体会到印斯茅斯小镇阴暗、潮湿、粘腻、非人的可憎气息，仿佛和主角一样身临其境，作为外来人体会着一场惊险紧张的探索之旅。小说带入感很强，个人较为喜欢，推荐一读。另外这部小说的翻拍电影《达贡》也不错，可以体会一把印斯茅斯小镇的真实阴霾。</p><p>《超越时间之影》，这部中短文颇有科幻小说的感觉，主角的身体被占据，思想却被替换到入侵者的家乡，在那里感受到伟大种族的神秘世界的一切，这是一场身心异位的奇特之旅。文中对伟大种族以及它们世界的描写让人着迷，很佩服爱手艺大神深刻的刻画和奇特的思想，这是在现在的一些科幻小说里面看不到的别样想象力。本文中的科幻色彩个人十分喜欢，推荐一读。</p><p>推荐指数：★★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/404" target="_blank" rel="noopener">2017 年 1 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 12 月份阅读记录</title>
      <link href="/2017/12/12/2017%20%E5%B9%B4%2012%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/12/12/2017%20%E5%B9%B4%2012%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>##《美丽新世界》<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/e5b877&lt;!---more---&gt;1d-d358-435b-ad58-4af37d5d4a8c.png" alt=""></p><p><strong>标签</strong>：反乌托邦、名著</p><p>这部小说是世界反乌托邦三部曲其中之一，7月份刚刚刷完另外一部大名鼎鼎的《1984》。文风上来说，个人感觉《美丽新世界》比起《1984》更加易读，《1984》读起来总有种晦涩的感觉。其次，我的一位朋友说过，《美丽新世界》中描述的“新世界”，比起《1984》中的更有可能实现，我在读完此书后，深有同感。《美丽新世界》中描述的控制民众的科技并不难以实现：人为的控制生育，严格限制胚胎的生长，在某一阶段注入毒药，使孩子们的智商和身体从开始就产生分化；婴儿时期每天播放等级观念和道德意识，扎根潜意识，使其长大后能安于自己的阶级；社会上主流的道德意识是“人人为我，我为人人”，每个人都是螺丝钉，每个人都不能缺少，实际上每个人都没有自我；生理上有“苏摩”可以带来快乐，烦恼了来一片，任何忧愁都不在，且没有副作用；“新世界”中每天都是狂欢，每个人都在消耗自己多余的精力，每个人都很“幸福”，到处都充斥着“娱乐至死”的气息。</p><p>以上描述看起来很美好，但这是一本“反乌托邦”类的小说，是一部“警示录”。很显然，这样的未来是我们要抵抗的。但真正身处这样世界的人们，却有什么要反抗的？为什么要反抗？我想这才是“美丽新世界”最让人毛骨悚然的预言……</p><p>以上是我的个人感受，对这部小说权威的剖析应该看作者自己写的《重返美丽新世界》，这是在《美丽新世界》出版二十多年后，作者亲自写成的社会学论述。有人说，阿道司·赫胥黎对人类社会的认知领先现代50年，我不知是否真是这样，但读过他的《重返美丽新世界》，其中的见解的确精辟独到，感悟颇多，值得仔细拜读。</p><p>总的来说，《美丽新世界》十分建议一读，如果可以，在读完《一九八四》再来读这部小说，效果会更好。</p><p><strong>推荐指数</strong>：★★★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/403" target="_blank" rel="noopener">2017 年 12 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django 自定义装饰器进行登录访问限制</title>
      <link href="/2017/12/02/Django%20%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/"/>
      <url>/2017/12/02/Django%20%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在设计网站用户系统的时候，往往需要进行登录访问限制，比如说用户还没有登录的时候，有些网页是不能访问的。</p><p>最简单粗暴的办法是，在每个页面的函数最开始加一个 <strong>登录验证函数</strong>，检查当前用户登录状态：如果已经登陆过，那么继续往下执行；如果用户还没登录，对不起，出门左转到登录页。</p><p>在 python 中有个优雅的解决办法——使用 <strong>装饰器</strong>。Django 中有提供使用装饰器进行登录访问限制的方法，详情可见 <a href="http://blog.51cto.com/alsww/1732435" target="_blank" rel="noopener">django实现用户登陆访问限制@login_required</a>，如果对自己实现这套机制感兴趣的童靴，可以继续往下看。<br><a id="more"></a></p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>首先简单介绍一下装饰器，装饰器相当于在一个函数外面又套了一层函数，将原函数集成到一段新的代码中，执行的时候直接运行外面这层函数，这样做的优点是可以动态扩展函数的功能。</p><p>装饰器在 python 中的用法十分简单，外层函数放在原函数前，加@表示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@work</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p><h2 id="将装饰器用于登录验证"><a href="#将装饰器用于登录验证" class="headerlink" title="将装饰器用于登录验证"></a>将装饰器用于登录验证</h2><p>上节中可以看出，装饰器的使用十分简单和优雅。在用户系统中，我们可以把 <strong>登录验证函数</strong> 作为装饰器放在每一个页面的函数前面。</p><p>首先 <strong>定义装饰器</strong>，装饰器其实也是一个函数，只不过 <strong>它把一个函数作为参数传进来，返回了另一个替换函数</strong>。在这里装饰器的作用是检查登录状态，如果已经登录，运行原函数，如果未登录，跳转到登录页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_login_required</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">'''自定义 登录验证 装饰器'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_login_status</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="string">'''检查登录状态'''</span></span><br><span class="line">        <span class="keyword">if</span> request.session.has_key(<span class="string">'user_id'</span>):</span><br><span class="line">            <span class="comment"># 当前有用户登录，正常跳转</span></span><br><span class="line">            <span class="keyword">return</span> func(request)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前没有用户登录，跳转到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/login'</span>)</span><br><span class="line">    <span class="keyword">return</span> check_login_status</span><br></pre></td></tr></table></figure><p>使用装饰器就简单了，把装饰器函数加到需要访问限制的页面函数之前即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@my_login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''主页'''</span></span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br></pre></td></tr></table></figure><p>如此，在渲染主页之前，需要先进入装饰器 <code>my_login_required</code> 中验证登录状态，如果已经登录，才可以访问主页，否则，跳转到登录页面。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>简单 12 步理解 Python 装饰器<br><a href="http://python.jobbole.com/85056/" target="_blank" rel="noopener">http://python.jobbole.com/85056/</a></p></li><li><p>django实现用户登陆访问限制@login_required<br><a href="http://blog.51cto.com/alsww/1732435" target="_blank" rel="noopener">http://blog.51cto.com/alsww/1732435</a></p></li><li><p>COOKIE和SESSION有什么区别？<br><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="noopener">https://www.zhihu.com/question/19786827</a></p></li><li><p>04.Django实现完整登录系统的两种方法（cookie and session）<br><a href="http://blog.csdn.net/gamer_gyt/article/details/50335637" target="_blank" rel="noopener">http://blog.csdn.net/gamer_gyt/article/details/50335637</a></p></li><li><p>浅谈django中的认证与登录<br><a href="http://www.jb51.net/article/96110.htm" target="_blank" rel="noopener">http://www.jb51.net/article/96110.htm</a></p></li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/402" target="_blank" rel="noopener">Django 自定义装饰器进行登录访问限制</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 11 月份阅读记录</title>
      <link href="/2017/11/05/2017%20%E5%B9%B4%2011%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/11/05/2017%20%E5%B9%B4%2011%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="《洛丽塔》"><a href="#《洛丽塔》" class="headerlink" title="《洛丽塔》"></a>《洛丽塔》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/3a05148&lt;!---more---&gt;f-2d30-46c8-9c57-776d38d452cf.png" alt=""></p><p><strong>标签</strong>：名著</p><p>作为一个萝莉控（滑稽），这本书一直在我的阅读清单里。</p><p>可能是翻译的原因，《洛丽塔》没有传言的辞藻那么优美，或许读原版可能好一些。书中片段繁多琐碎，以主角为第一视角的心理描写很多。关于洛丽塔本身，笔墨却很少，仿佛亨伯特爱上的只是恋童这种感觉本身。</p><p>这部小说是一部悲剧，是一部讲述欲望所催生的愚蠢所导致的悲剧。欲望一旦点燃，便会将人烧的稀里糊涂，从而变得胆大妄为。书中主角亨伯特便是在这样的心理诱导下，一步一步走入自我毁灭的深渊。而洛丽塔，则是他欲望燃烧下的陪葬品，他毁了自己，同时也毁了洛丽塔一家。</p><p>亨伯特的恋童癖，源于童年时他真正的初恋，那个天真无邪、拥有纯真理想的女孩，他们的爱恋像闪电般来临，接踵而至的是烈火般的热恋和急转直下的离别和死亡。洛丽塔和他的初恋除了一样拥有青春诱人的外表，其他则截然相反。洛丽塔现实、任性，清纯的外表下是一颗粗俗的心。但她勾起了中年亨伯特的邪念，从此便开始了《洛丽塔》真正的故事，旅行、诱骗、放纵、怀疑、逃离，一场引入地狱的堕落之路，一场逐渐抛却灵魂的欲望之旅，引亨伯特神智昏迷，却离内心的救赎越来越近。当年旅行末尾洛丽塔逃离的三年后，一封来信招他流离的身躯重新来到她身边，曾经天使般的“洛丽塔”却已为人妇，她的丈夫则粗鄙不堪。邀她离开却得到毫不犹豫的拒绝，他发现洛丽塔对过去的时光没有半分留念。内心绝望的亨伯特寻到当年引诱洛丽塔离开的男人，开枪射杀，这是他对那场不伦之恋最后的交代。小说最后，亨伯特死于狱中，同年，洛丽塔死于难产。悲剧落幕。</p><p>《洛》的悲剧之处，正如小说以亨伯特为第一视角的描写方式，书中大多是亨伯特的自说自话，关于洛丽塔的心理，片言未提。最后通过洛丽塔的回答，亨伯特才无法继续自我欺骗，因为洛丽塔根本没有爱过他，一丁点也没有。</p><p>这是一个恋童癖自我追寻、抛弃和救赎的故事。</p><p>（是不是每个女孩都曾是红楼梦中的闺中女子，是不是每个洛丽塔都会宿命般的变得世俗？）</p><p><strong>推荐指数</strong>：★★★★</p><h2 id="《三岔口》"><a href="#《三岔口》" class="headerlink" title="《三岔口》"></a>《三岔口》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d246396e-4c90-46f3-b772-91260de535c6.png" alt=""></p><p><strong>标签</strong>：周德东、恐怖小说</p><p>最近读了不少周德东的小说，算是给平淡的生活加点料。</p><p>周德东，被誉为“中国的斯蒂芬金”，是国内知名恐怖小说作家。每当看到周德东的名字，总让我和“恐怖”联系在一起。是的，遥远的记忆里，曾经看过他的《保姆》，那种土生土长的中国式恐惧让人不寒而栗。他的恐怖故事和我们平时的生活息息相关，写的十分接地气，我想只有这样的恐怖才能深入人心。</p><p>《三岔口》是周德东不失水准的一部小说，套中套，诡中诡，既写出了灵异，也写到了人性的黑暗和贪婪。网上有不少关于情节的解读，看看也是很有意思，不过也没必要深究。</p><p>想看中国式的恐怖小说，周德东的作品值得一读。</p><p>另外，艾宝良播音的周德东有声小说，气氛迷人，曾经风靡午夜电台，至今仍是经典，耳朵无聊的童靴可以听听看。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《周德东中短篇小说自选集》"><a href="#《周德东中短篇小说自选集》" class="headerlink" title="《周德东中短篇小说自选集》"></a>《周德东中短篇小说自选集》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/50a6ae5c-9552-45f7-93a4-8919dc4d1a45.png" alt=""></p><p><strong>标签</strong>：周德东、恐怖小说</p><p>这是一部周德东的小说集，收集了许多周德东中短篇小说，对他感兴趣的小伙伴可以看个过瘾。推荐的篇目有《保姆》、《第N种复仇的方法》、《J号楼保安》。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/401" target="_blank" rel="noopener">2017 年 11 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>一个 mui 底部选择卡切换的简化实现方案</title>
      <link href="/2017/10/20/%E4%B8%80%E4%B8%AA%20mui%20%E5%BA%95%E9%83%A8%E9%80%89%E6%8B%A9%E5%8D%A1%E5%88%87%E6%8D%A2%E7%9A%84%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2017/10/20/%E4%B8%80%E4%B8%AA%20mui%20%E5%BA%95%E9%83%A8%E9%80%89%E6%8B%A9%E5%8D%A1%E5%88%87%E6%8D%A2%E7%9A%84%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上有不少底部选择卡切换的解决方案，看了官方的和网上的资料之后做了一些简化。</p><p>顶部 和 底部选择卡：</p><p><img src="ht&lt;!---more---&gt;tp://yangyingming.com/uploads/markdownx/2017/7/559b15fe-8241-4c21-b445-7b07c4742a33.png" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这部分是 index.html 的主要代码，我将 index.html 作为主页面，然后创建他的三个子页面。主页面只包含网页基本骨架，比如顶部和底部选择卡。代表三个选择卡的子页面显示具体内容。</p><p><strong>具体原理</strong> ：在打开 app 时，会首先加载 index.html 页面，运行到 js 代码时，同时创建好三个选择卡的页面，但是刚开始只显示首页的选择卡，隐藏另外两个选择卡。同时绑定选择卡的点击事件，如果触发了切换操作，那么隐藏当前页面，显示触发后的页面。</p><p>首先是 <strong>HTML 代码部分</strong>，创建了 <strong>头部</strong> 和 <strong>底部选择栏</strong>，底部选择栏包含三个选择卡：首页（home.html）、交流（chat.html）、设置（setting.html）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-nav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"mui-title"</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--底部选择栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-tab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item mui-active"</span> <span class="attr">href</span>=<span class="string">"home.html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">href</span>=<span class="string">"chat.html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-email"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>交流<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">href</span>=<span class="string">"setting.html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-gear"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接下来是 <strong>JavaScript 代码部分</strong>，完成的主要功能是创建子页面，绑定点击事件进行切换。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  //mui插件初始化</span></span><br><span class="line"><span class="undefined">    mui.init(&#123;</span></span><br><span class="line"><span class="undefined">    swipeBack: true//启动右滑关闭功能</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    //所有选择卡</span></span><br><span class="line"><span class="undefined">    var subpages = ['home.html','chat.html', 'setting.html'];</span></span><br><span class="line"><span class="undefined">    var subpage_style = &#123;</span></span><br><span class="line"><span class="undefined">    top: '45px',  </span></span><br><span class="line"><span class="undefined">    bottom: '51px'  </span></span><br><span class="line"><span class="undefined">&#125;; </span></span><br><span class="line"><span class="undefined">//当前显示选择卡</span></span><br><span class="line"><span class="undefined">var activeTab = subpages[0];</span></span><br><span class="line"><span class="undefined">    //创建子页面，显示首页选择卡，隐藏其余页面</span></span><br><span class="line"><span class="undefined">    mui.plusReady(function()&#123;</span></span><br><span class="line"><span class="undefined">    var self = plus.webview.currentWebview();</span></span><br><span class="line"><span class="undefined">    for (var i = 0; i &lt; subpages.length; i++)&#123;</span></span><br><span class="line"><span class="undefined">    var sub = plus.webview.create(subpages[i],subpages[i],subpage_style);</span></span><br><span class="line"><span class="undefined">    if (i &gt;0)&#123;//隐藏其他页面</span></span><br><span class="line"><span class="undefined">    sub.hide(); </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    self.append(sub); //加入子页面</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    //选择卡点击事件</span></span><br><span class="line"><span class="undefined">    mui('.mui-bar-tab').on('tap','a',function(e)&#123;</span></span><br><span class="line"><span class="undefined">    var targetTab = this.getAttribute('href');</span></span><br><span class="line"><span class="undefined">    if (targetTab == activeTab)</span></span><br><span class="line"><span class="undefined">    return ;</span></span><br><span class="line"><span class="undefined">    //更换标题</span></span><br><span class="line"><span class="undefined">var title = document.getElementById('title');</span></span><br><span class="line"><span class="undefined">    title.innerHTML = this.querySelector('.mui-tab-label').innerHTML;</span></span><br><span class="line"><span class="undefined">    //显示目标选择卡</span></span><br><span class="line"><span class="undefined">    plus.webview.show(targetTab);</span></span><br><span class="line"><span class="undefined">    //隐藏原选择卡</span></span><br><span class="line"><span class="undefined">    plus.webview.hide(activeTab);</span></span><br><span class="line"><span class="undefined">    //更改当前活跃选择卡</span></span><br><span class="line"><span class="undefined">    activeTab = targetTab;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Hbuilder–mui–webview切换子页面问题<br><a href="http://blog.csdn.net/zhuyu19911016520/article/details/70270731" target="_blank" rel="noopener">http://blog.csdn.net/zhuyu19911016520/article/details/70270731</a></li><li>HBuilder mui入门教程——（2）含tab选项卡的首页<br><a href="http://blog.csdn.net/anjingshen/article/details/74138717" target="_blank" rel="noopener">http://blog.csdn.net/anjingshen/article/details/74138717</a></li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/400" target="_blank" rel="noopener">一个 mui 底部选择卡切换问题的简单解决方案</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Prolog 练习和笔记</title>
      <link href="/2017/10/20/Prolog%20%E7%BB%83%E4%B9%A0%E5%92%8C%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/10/20/Prolog%20%E7%BB%83%E4%B9%A0%E5%92%8C%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Prolog 是一种主要用于人工智能领域的编程语言，编程体验和自然语言较为接近。</p><p>前段时间接触了一下，下面记录一下学习的笔记，主要是一个 prolog 和 C++ 混合编程的例子。</p><p>我把示例代码放到了 GitHub 上，链接在这里：<a href="https://github.com/windcode/prolog-demo" target="_blank" rel="noopener">windcode/prolog-demo</a></p><p>另外还有官方文档的链接：<a href="http://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/pldoc.html%27" target="_blank" rel="noopener">官方文档</a>)<br><a id="more"></a></p><h2 id="Prolog-使用笔记"><a href="#Prolog-使用笔记" class="headerlink" title="Prolog 使用笔记"></a>Prolog 使用笔记</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载 Windows版本 prolog</p><p>下载页面：<a href="http://www.swi-prolog.org/download/stable" target="_blank" rel="noopener">http://www.swi-prolog.org/download/stable</a></p><p>我选择了 <strong><a href="http://www.swi-prolog.org/download/stable/bin/swipl-w64-760-rc2.exe" target="_blank" rel="noopener">SWI-Prolog 7.6.0-rc2 for Microsoft Windows (64 bit)</a></strong> 下载安装</p><p>安装后，启动 <strong>C:\Program Files\swipl\bin\swipl-win.exe</strong>，可以打开 prolog 控制台。</p><h3 id="打开现成的-Prolog-程序"><a href="#打开现成的-Prolog-程序" class="headerlink" title="打开现成的 Prolog 程序"></a>打开现成的 Prolog 程序</h3><p>比如，<a href="https://github.com/SWI-Prolog/packages-cpp" target="_blank" rel="noopener">Prolog 的 C++ 开发包</a> 里有一个示例程序 <strong>likes.pl</strong></p><p>克隆该项目到本地<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SWI-Prolog/packages-cpp.git</span><br></pre></td></tr></table></figure></p><p>在目录中可以找到 likes.pl 文件，双击打开</p><p>在弹出的控制台中输入 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">likes(X,Y).</span><br></pre></td></tr></table></figure><p>然后会输出，所有 X 喜欢 Y 的关系</p><h3 id="编写-prolog-程序"><a href="#编写-prolog-程序" class="headerlink" title="编写 prolog 程序"></a>编写 prolog 程序</h3><p>首先在桌面创建一个 Prolog 文件 <strong>ex.pl</strong></p><p>然后在 prolog 控制台中点击 <strong>File –&gt; Edit</strong>，选择刚刚创建的 <strong>ex.pl</strong></p><p>然后我们便可以编辑 <strong>ex.pl</strong> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">love(a,b).</span><br><span class="line">love(b,c).</span><br><span class="line">love(c,a).</span><br><span class="line"></span><br><span class="line">sanjiaolian(X,Y,Z) :-</span><br><span class="line">    love(X,Y),</span><br><span class="line">    love(Y,Z),</span><br><span class="line">    love(Z,X).</span><br></pre></td></tr></table></figure></p><p>按住 <strong>ctrl+s</strong> 保存</p><p>双击刚刚编辑过的 ex.pl 文件</p><p>在弹出的控制台中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sanjiaolian(a,b,c)</span><br></pre></td></tr></table></figure></p><p>正确输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure></p><p>我们<strong>成功判断了 a，b，c 三个人是否为三角恋关系</strong></p><h3 id="packages-cpp-likes-demo-安装测试"><a href="#packages-cpp-likes-demo-安装测试" class="headerlink" title="packages-cpp likes demo 安装测试"></a><a href="https://github.com/SWI-Prolog/packages-cpp" target="_blank" rel="noopener">packages-cpp</a> likes demo 安装测试</h3><p><strong>注意</strong>：安装需在 linux 环境、默认已经安装 g++ 编译器</p><p><strong>1.安装 swipl</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.swi-prolog.org/download/stable/src/swipl<span class="number">-7.6</span><span class="number">.0</span>.tar.gz</span><br><span class="line">tar zvxf swipl<span class="number">-7.6</span><span class="number">.0</span>.tar.gz</span><br><span class="line">cd swipl<span class="number">-7.6</span><span class="number">.0</span>/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p><strong>2.克隆仓库 packages-cpp，编译 likes.cpp 和 likes.pl</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SWI-Prolog/packages-cpp.git</span><br><span class="line">cd packages-cpp/</span><br><span class="line">swipl-ld -o likes -ld g++ -goal true likes.cpp likes.pl</span><br></pre></td></tr></table></figure></p><p>swipl-ld 参数说明：<br><a href="http://www.swi-prolog.org/pldoc/man?section=plld" target="_blank" rel="noopener">11.5 Linking embedded applications using swipl-ld</a></p><p><strong>3.运行测试</strong><br>输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./likes</span><br></pre></td></tr></table></figure></p><p>输出（提示信息）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: likes x [y] <span class="keyword">or</span> likes -happy</span><br></pre></td></tr></table></figure></p><p>输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./likes -happy</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Happy people:</span><br><span class="line">        mary</span><br><span class="line">        mary</span><br><span class="line">        john</span><br><span class="line">        sue</span><br><span class="line">        paul</span><br><span class="line">        jane</span><br></pre></td></tr></table></figure></p><p>输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./likes mary</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mary likes:</span><br><span class="line">        john</span><br><span class="line">        potplants</span><br><span class="line">        jane</span><br><span class="line">        paul</span><br><span class="line">        Heartbreak High</span><br><span class="line">        sunbathing</span><br></pre></td></tr></table></figure></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/399" target="_blank" rel="noopener">Prolog 练习和笔记</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 10 月份阅读记录</title>
      <link href="/2017/10/13/2017%20%E5%B9%B4%2010%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/10/13/2017%20%E5%B9%B4%2010%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="《红拂夜奔》"><a href="#《红拂夜奔》" class="headerlink" title="《红拂夜奔》"></a>《红拂夜奔》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d37181&lt;!---more---&gt;51-5cb0-4684-9564-fdf7e0dadb49.png" alt=""></p><p><strong>标签</strong>：王小波</p><p>王小波的这部小说重新定义了什么是“有趣”。</p><p>在不同的书店里路过这本书好多次——这也是现在读起这部小说的原因——但实际上当初看到这本书书名的时候，心中还真没提起多少兴趣，其实这是一部十分有趣的小说。</p><p>看这部小说的过程，让我重新想起了最开始读书的目的——只是为了有趣。是的，因为拿起的书写的有趣，当时才有继续读下去的欲望。而不知道从什么时候开始，读书的目的变得复杂。我们读书带上了一些功利性，这种选择也是难免的，它往往标志着我们的读书之路走向成熟。虽然如此，但拿起一本有趣的书时，内心仍然欢喜。</p><p>言归正传，关于这部小说，用一句话来概括，就是王小波用“一本正经的胡说八道”的心态借“风尘三侠”的故事写的一部反讽小说。书中的故事不可谓不荒谬，甚至一些描写十分俗气，但是却不由得让人捧腹，甚至让生活在物质、思想日新月异的现代的我们读起来都有开脑洞的感觉。</p><p>读《红拂夜奔》的过程，总让我想起小时候看过的童话故事，他们都有一个共同的特征，就是故事中的“因为所以”的逻辑读起来总是很荒谬。但王小波说“在我看来，这个故事一点也不怪诞，我不过是写了我的生活”。</p><p>想要有趣却被世间无趣灭杀的李靖，无趣、无智、无性的红拂，麻木刻板、固步自封的虬髯公，王小波书中的“风尘三侠”投射了现实生活中的三种人，或许你我身上便有这三人的影子，或许每个人都是虬髯公，想成为李靖，渴望拥有红拂。</p><p>有机会会再读这个故事。</p><p><strong>推荐指数</strong>：★★★☆</p><h2 id="《火星崛起3：晨色之星》"><a href="#《火星崛起3：晨色之星》" class="headerlink" title="《火星崛起3：晨色之星》"></a>《火星崛起3：晨色之星》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/112bcc19-fbc1-46db-9503-b5c7bde77abb.png" alt=""></p><p><strong>标签</strong>：反乌托邦、科幻、热血</p><p>《火星崛起》系列的终章，之所以没有在8月份一口气读完，是因为最终作的中文版在两个月之后也就是10月份才出版。我没在当当上预约，直接在 readfree.me 上下载了电子书就开始看。</p><p>比起前两作，最终作的质量依旧没有下滑，对于一个系列丛书来说，这是难能可贵的，对于一名处女作家来说，这更加难得。</p><p>情节上，本作承接上一作的悬念，主角迎来了“复活”，然后终于带领组织打响了全民反抗金种统治的浪潮，可想而知，这一部作品描绘的场景更加宏大，战争的紧迫感和澎湃的感情相碰撞，共同奏响这场反抗起义的最后一曲。</p><p>总的来说，这个系列的三部小说发挥都很稳，没有质量明显下滑的现象，故事也十分热血有趣，但说不上多么史诗，和那些名作还是有差别的，闲暇时可以一读。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/398" target="_blank" rel="noopener">2017 年 10 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>购买搬瓦工 VPS 在 ubuntu 16.04 x64 中配置 ss 服务器科学上网</title>
      <link href="/2017/09/15/%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5%20VPS%20%E5%9C%A8%20ubuntu%2016.04%20x64%20%E4%B8%AD%E9%85%8D%E7%BD%AE%20ss%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/2017/09/15/%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5%20VPS%20%E5%9C%A8%20ubuntu%2016.04%20x64%20%E4%B8%AD%E9%85%8D%E7%BD%AE%20ss%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<h2 id="购"><a href="#购" class="headerlink" title="购"></a>购</h2><a id="more"></a><p>买搬瓦工 VPS<br>之所以选择 <a href="https://bwh1.net/" target="_blank" rel="noopener">搬瓦工</a>，只一个原因：便宜。</p><p>阿里云的硅谷机房一个月要 200+ 人民币，搬瓦工上一个月只要 19 人民币（2.99美元），而且官网上不定期的有优惠活动。</p><p>有了国外的云主机，我们就可以在主机上搭建VPN，作为梯子翻墙了。</p><p>搬瓦工中国官网：<a href="http://banwagong.cn/" target="_blank" rel="noopener">http://banwagong.cn/</a></p><p>具体的购买流程可以参考：<a href="http://banwagong.cn/gonglue.html" target="_blank" rel="noopener">新手用户搬瓦工VPS购买图文指导教程</a></p><p>我买了 2.99美元（一个月） 洛杉矶 KVMV3-10G-512M-1T-CA-QNET 型号的主机。</p><p>购买之后可以参考如下博文 <strong>配置搬瓦工 VPS：安装 ubuntu 系统，修改 root 密码</strong>：</p><p><a href="http://blog.csdn.net/win_turn/article/details/51559867" target="_blank" rel="noopener">使用搬瓦工bandwagonhost VPS安装Shadowsocks Server</a></p><h2 id="在-ubuntu-16-04-上配置-ShadowSocks"><a href="#在-ubuntu-16-04-上配置-ShadowSocks" class="headerlink" title="在 ubuntu 16.04 上配置 ShadowSocks"></a>在 ubuntu 16.04 上配置 ShadowSocks</h2><p>运行如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install python-gevent python-pip  </span><br><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure></p><p>创建 ss 配置文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/ss.json</span><br></pre></td></tr></table></figure></p><p>填入如下内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,  </span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8388</span>,  </span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,  </span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"Your Password"</span>,  </span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,  </span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动 ss 服务（<strong>注意：ss 需要用 root 用户启动</strong>）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c ~/ss.json -d start</span><br></pre></td></tr></table></figure></p><p>或者直接创建 <strong>start-ss.sh</strong> 启动脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">nohup ssserver -c ss.json &gt; /etc/null <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></p><p>关于配置可以参考如下资料：</p><p>ss 服务端：<a href="http://blog.csdn.net/roland_sun/article/details/51279522" target="_blank" rel="noopener">如何在Ubuntu 14.04下安装和配置ShadowSocks服务器</a></p><p>ss 客户端：<a href="http://www.cnblogs.com/Dumblidor/p/5450248.html" target="_blank" rel="noopener">Ubuntu下ss的安装与使用</a></p><h2 id="下载-ss-客户端"><a href="#下载-ss-客户端" class="headerlink" title="下载 ss 客户端"></a>下载 ss 客户端</h2><p>下载安装客户端之后配置好你的 ss 服务器信息就可以用了。</p><p>windows 客户端：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>安卓客户端：<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></p><p>ios 客户端：<a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-iOS/releases</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/397" target="_blank" rel="noopener">购买搬瓦工 VPS 在 ubuntu 16.04 x64 中配置 ShadowSocks 服务器科学上网（翻墙）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 9 月份阅读记录</title>
      <link href="/2017/09/14/2017%20%E5%B9%B4%209%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/09/14/2017%20%E5%B9%B4%209%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>##《白鹿原》<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/5eb33110&lt;!---more---&gt;-a9a0-4e91-9e18-be4f637b2925.png" alt=""></p><p><strong>标签</strong>：名著、陈忠实</p><p>自从大学时读完《平凡的世界》之后，就想找本类似的书来看，这个时候《白鹿原》就很自然的跳入我的视线。</p><p>《白鹿原》是由陈忠实先生所作，描绘了陕西的风土民情，和《平凡的世界》对人物心理细腻的刻画比起来，《白鹿原》更像一副广阔的画卷，一副洋洋洒洒描绘了三代人情感纠葛以及世事变迁的长卷，它刻画的粒度更大，所包含的东西也更繁杂，可谓包罗万象、内涵丰富，能从其中品出几分味道，又能品出什么滋味，全看读者的经历和理解。</p><p>我在读完这部小说之后，久久没有动笔写这篇读后感，因为《白鹿原》所传递的信息太多，想告诉我的我却理解不了的东西，也太多。读这部小说的过程，就像在远远看一场上个世纪的皮影戏，看其中人物一个接一个出场，走过属于他们的人生和故事，然后在世界的一个角落，或热闹、或萧瑟的戛然而止，留下读者独自品味和咀嚼他们的一生，留下自己的感悟。</p><blockquote><p>白鹿原上是光明的，也是黑暗的；是真实的，也是魔幻的；是传奇的，也是平凡的。</p></blockquote><p>另外，说说我看到的《白鹿原》的不足之处（个人体会）：</p><p>和《平凡的世界》比起来，《白鹿原》读起来没有足够的代入感。我记得读《平凡》的时候，看到高潮处，可以捧着书，一连读好几个小时，吃饭睡觉的时候也想着拿起来读一段，因为情节实在很吸引人。而《白鹿原》太像一个群像剧，繁多的人物出场，或许使作者的笔力没有足够聚焦在几个人物身上，也没有太多篇幅描写人物的心理变化。这就导致让人总感觉和书中的人物隔着一段距离，无法真切的感受和体会到他们的喜怒哀乐和成长变化。</p><p>不管怎么说，《白鹿原》都是一部不可多得的佳作，好书如佳酿，陈年现酒香。</p><p><strong>推荐指数</strong>：★★★☆</p><h2 id="《图灵传》"><a href="#《图灵传》" class="headerlink" title="《图灵传》"></a>《图灵传》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f8a77897-c0d3-4cd3-b72e-f442911b0cb7.png" alt=""></p><p><strong>标签</strong>：人物传记</p><p>这是一本我早就想读、想入手的个人传记，但无奈书出版太早，现在早已绝版，手上这本《图灵传》还是学校图书馆唯一库存的一本。好在最近这部传记终于再版，内容变动不大，新版分为了上下两册，封面很喜欢。在读完初版书之后一个月，我终于入手了一套自己的《图灵传》。（至于我为什么对这部书这么感兴趣，那还用问吗，祖师爷的权威传记，当然要好好拜读……）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/950d2256-e050-4f9a-beba-44e0a0f2352f.jpg" alt=""></p><p>8月份看了美剧《天才·爱因斯坦》，讲述的是爱因斯坦一生的成长经历。现在在看《图灵传》的过程中，让我强烈的感受到两人之间的相似——他们都对世界有自己的看法，并对一切抱有天然的好奇。我们成长过程中总会接触一些“理所应当”的事情，而我们往往会想都不想的接受，理由是“大家都是这样认为的”，而图灵、爱因斯坦这类科学家总会对“理所当然”产生质疑，也许会被旁人看做可笑，但正是这种“质疑一切”的精神让他们对人类认知的进步作出极大贡献。</p><p>图灵一生的经历：</p><ul><li>图灵在剑桥大学发表《可计算数》的论文，提出图灵机的概念</li><li>二战期间，图灵参与战争的解密工作，大大提高了英国在战争中的主动权</li><li>战争结束，图灵提出“计算机”的概念</li><li>冯诺依曼参与的项目制造出了世界上第一台通用计算机ENIAC，他意识到1936年图灵提出的《可计算数》的重要性</li><li>同一时期，图灵也在思考“制作一个电子大脑”的事情，后来参与了ACE计算机的制造，ACE的性能比ENIAC更高</li><li>图灵提出“编程”的概念，并投身计算机指令表的编写</li><li>图灵进一步思考“机器智能”的问题，他认为机器在经过不断的“训练”之后，能和人类一样产生智能。</li></ul><p>看到书的尾声的时候，突然发现图灵提出的让机器进行“训练”的思路和现在的“机器学习”思想十分相似。看到这里的时候，我真正意识到图灵的思想到底有多超前，他早年提出的很多设想从那时到今天都在逐渐变成现实。（图灵是不是未来穿越过去的【笑哭】）</p><p>（突然发现图灵、香农和冯·诺依曼是一个时代的人，膜拜那个璀璨的时代）</p><p>个人十分喜欢《图灵传》，所以打了四星。</p><p><strong>推荐指数</strong>：★★★★</p><h2 id="《异乡人》"><a href="#《异乡人》" class="headerlink" title="《异乡人》"></a>《异乡人》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/38adc2fb-5d36-43bc-a0bd-47d0f7438add.png" alt=""></p><p><strong>标签</strong>：加缪、法律文学</p><p>看完《异乡人》，才明白小说封面上那句话——“我知道这世界我无处容身，只是，你凭什么审判我的灵魂？”。</p><p>主角默尔索是一个绝对真实而冷静的人，即使在自己母亲的婚礼上也没有露出丝毫的悲伤，甚至第二天便照常谈情说爱，他的道德观与常人及其不同。以致于不小心杀了人之后，在法庭上被检察官指控人性冷漠、怀有精神杀人的嫌疑。</p><p>主角的冷漠的确让有普世道德观的普通人感到奇特甚至厌恶，检查官在试图使主角信仰上帝失败后，便怀着极大厌恶的主观情绪对主角下达了不公正的判决。主角犯下的案件在后来已经不是法庭上讨论的重点，而变成了对主角人格的议论和指控。主角在法庭上很多次看着法官、律师、检察官评价他怎样怎样，却不能插嘴，他感到很荒谬。主角的罪行其实罪不至死，但最终却被检察官虚无缥缈的说辞而判处死刑，检察官的主观意识影响了法律的公正判决，这正是本书中最想表达的观点。</p><p>其实读这部小说的过程很无聊，起码提不起我的兴趣，以至于明明很薄的一部小说，我却断断续续读了很久。主角的性格让他在法庭上遭受了不公平的判决，小说想表达的现象确实让人深思，我想学法律的童靴读起来会更有共鸣。</p><p><strong>推荐指数</strong>：★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/396" target="_blank" rel="noopener">2017 年 9 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 8 月份阅读记录</title>
      <link href="/2017/08/22/2017%20%E5%B9%B4%208%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/08/22/2017%20%E5%B9%B4%208%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="《在轮下》"><a href="#《在轮下》" class="headerlink" title="《在轮下》"></a>《在轮下》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/e4c11dd&lt;!---more---&gt;c-06cc-4933-93e5-09c00d2e46b1.png" alt=""></p><p><strong>标签</strong>：教育、黑塞、青春</p><p>黑塞的《在轮下》反映了一名求学青年的悲惨人生，书中展现的高压教育对孩子的摧残，放在当今社会也同样值得让人反思。</p><p>主角汉斯是小镇上最聪明的孩子，成绩优秀且勤奋刻苦，被父亲、校长和神父等一众小镇的长辈寄予厚望，经过艰苦的州试之后，他如愿以偿进入神学院学习。但在神学院却因为用功过度，身心受创，最后因为外界和自身的双重压力，退出神学院，回到家乡后郁郁寡欢，最后悄然了却一生。</p><p>汉斯的故事反映了德国当时落后的教育制度，过度关注教育的成果，而忽视了学生的身心健康，主角便是在这样的茫茫学海中丢失了自己灵魂的一个孩子，他不堪同龄人和长辈们的冷漠和讥讽，最终滚落人生的无情车轮之下，消失于微末。</p><p>作者黑塞是诺贝尔文学奖获得者，书中讲述的故事很大程度上是作者本身的真实写照。他也曾就读于神学院，然后患上抑郁症和神经衰弱，并一度想过自杀。正是这样的经历让他开始思考这种封闭、僵化的教育体制对青少年的影响。</p><p>如果你对体制教育对人的影响感兴趣，可以读一下《在轮下》。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《火星崛起》"><a href="#《火星崛起》" class="headerlink" title="《火星崛起》"></a>《火星崛起》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/2c048245-7363-4d46-9475-e178feeeef90.png" alt=""></p><p><strong>标签</strong>：反乌托邦、科幻、热血</p><p>反乌托邦科幻小说，和《饥饿游戏》、《移动迷宫》比较类似，讲述的是一个火星“斯巴达”反抗高等人种统治的故事。</p><p>这部小说是作者的第一部作品，照目前的势头来看，又成为了最新的畅销书。我也是被“全球共燃”的名头吸引才来读此书。再就是，这本书的封面很酷。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/41f6f415-9115-480d-8e13-5070e2e0f9bc.png" alt=""></p><p>看过这部小说之后，总的来说，还算没有失望，科幻中掺杂着热血剧情，叙事较为流畅，只不过在小说里，他是主角，并成功掀翻了金种人的统治，带领底层人民翻身当家做主，这中间的故事让人看起来热血沸腾。</p><p>总的来说，这部小说更像一部外国版的网文，热血、简单粗暴，期待拍成电影。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《火星崛起2：黄金之子》"><a href="#《火星崛起2：黄金之子》" class="headerlink" title="《火星崛起2：黄金之子》"></a>《火星崛起2：黄金之子》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/1cc642c7-8095-4176-986f-25239e826e99.png" alt=""></p><p><strong>标签</strong>：反乌托邦、科幻、热血</p><p>《火星崛起》的第二部，比起第一部来说，质量没有下滑，而背景更加宏大，情节也更加跌宕起伏，结尾一个小的反转，让人十分期待最终作。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/395" target="_blank" rel="noopener">2017 年 8 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>如何配置 Sublime Text 3 的 Python 编程环境</title>
      <link href="/2017/08/09/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%20Sublime%20Text%203%20%E7%9A%84%20Python%20%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/"/>
      <url>/2017/08/09/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%20Sublime%20Text%203%20%E7%9A%84%20Python%20%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/335b2f4d-65bd-4454-a016-a6ef8d571907.jpg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用 IDLE 写 python 习惯了，还是发现它有些简陋，于是准备转向 Sublime 的怀抱。（我比较喜欢轻量级的 IDE）</p><p>为了方便用 Sublime 写 python 代码，我搜集了网上的一些资料，选出了常用 Python 编程的3个插件，整理出一篇轻量级的配置教程。<br><a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="1-生成包管理（Package-Control）界面："><a href="#1-生成包管理（Package-Control）界面：" class="headerlink" title="1. 生成包管理（Package Control）界面："></a>1. 生成包管理（Package Control）界面：</h4><p>View &gt; Show Console 或者按住快捷键： <figure class="highlight plain"><figcaption><span>+ ` ``` 调出 sublime 的命令行，然后在最下方的输入条中粘贴以下代码，回车，等待 Package Control 安装结束，随后重启Sublime。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure></p><p>如果在 <strong>Perferences -&gt; package settings</strong> 中看到 <strong>package control</strong> 这一项，代表包管理器（Package Control）安装成功。</p><h4 id="2-插件安装方法："><a href="#2-插件安装方法：" class="headerlink" title="2. 插件安装方法："></a>2. 插件安装方法：</h4><p>打开 <strong>Perferences -&gt; package control</strong>，输入 <strong>install Package</strong>，回车。</p><p>或者，按住快捷键 <strong>ctrl+shift+p</strong>，在弹出的搜索框中输入 <strong>Package Control: install Package</strong>，回车。</p><p>以上两个方法都可以打开插件搜索框，输入要安装的插件，直接回车，Sublime 会自动将插件安装好。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cnblogs.com/RunForLove/p/5133824.html" target="_blank" rel="noopener">Sublime搭建Python开发环境</a></p><h4 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3. 安装插件"></a>3. 安装插件</h4><p>要安装的插件有三个：<strong>SublimeREPL、SublimeCodeIntel、SideBarEnhancements</strong>。</p><p><strong>SublimeREPL</strong> 可以在 Sublime 中直接运行 python 代码。</p><p><strong>SublimeCodeIntel</strong> 会自动补全 python 代码。</p><p><strong>SideBarEnhancements</strong> 是侧边栏，显示工作空间。</p><p>参考第二步的方法安装以上三个插件。</p><p>下面分别介绍三个插件的单独设置：</p><h2 id="SublimeREPL-python-运行调试插件"><a href="#SublimeREPL-python-运行调试插件" class="headerlink" title="SublimeREPL - python 运行调试插件"></a>SublimeREPL - python 运行调试插件</h2><p>绑定快捷键：</p><p><strong>Preferences–&gt;Key Bindings User</strong> 添加以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="string">"keys"</span>: [<span class="string">"f5"</span>],//这是自己设的快捷键　</span><br><span class="line">            <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, </span><br><span class="line">            <span class="string">"args"</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"repl_python_run"</span>,</span><br><span class="line">                <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果提示没找到，重启下 Sublime。</p><h4 id="参考资料：-1"><a href="#参考资料：-1" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://blog.csdn.net/example440982/article/details/52080585" target="_blank" rel="noopener">Sublime Text3设置SublimeREPL快捷键的方法（Python）</a></p><h2 id="SublimeCodeIntel-代码补全插件"><a href="#SublimeCodeIntel-代码补全插件" class="headerlink" title="SublimeCodeIntel - 代码补全插件"></a>SublimeCodeIntel - 代码补全插件</h2><p><strong>Preferences –&gt; Package Settings –&gt; SublimeCodeIntel —&gt; Settings - Default</strong>    弟119行，添加以下代码（假设安装的是 python2.7，且为默认安装位置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"python"</span>:&#123;  </span><br><span class="line">    <span class="string">"python"</span>:<span class="string">"C:/Python27/python.exe"</span>,  </span><br><span class="line">    <span class="string">"pythonExtraPaths"</span>:[  </span><br><span class="line">         <span class="string">"C:/Python27/DLLs"</span>,  </span><br><span class="line">         <span class="string">"C:/Python27/Lib"</span>,  </span><br><span class="line">         <span class="string">"C:/Python27/Lib/lib-tk"</span>,  </span><br><span class="line">         <span class="string">"C:/Python27/Lib/site-packages"</span>,  </span><br><span class="line">  </span><br><span class="line">    ]  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="参考资料：-2"><a href="#参考资料：-2" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://blog.csdn.net/u013887008/article/details/49815567" target="_blank" rel="noopener">Sublime Text3中SublimeCodeIntel插件配置python环境</a></p><h2 id="SideBarEnhancements-侧边栏增强工具"><a href="#SideBarEnhancements-侧边栏增强工具" class="headerlink" title="SideBarEnhancements - 侧边栏增强工具"></a>SideBarEnhancements - 侧边栏增强工具</h2><p>如果 <strong>Preferences –&gt; Package Settings –&gt; Side Bar</strong> 存在，表明安装成功</p><p><strong>View —&gt; Side Bar</strong> 打开侧边栏</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/394" target="_blank" rel="noopener">如何配置 Sublime Text 3 的 Python 编程环境</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 7 月份阅读记录</title>
      <link href="/2017/08/06/2017%20%E5%B9%B4%207%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/08/06/2017%20%E5%B9%B4%207%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个月比较忙，没有正儿八经坐下来读几本书，倒是赶巧追完了几本网文。 _(:зゝ∠)_<br><a id="more"></a></p><p>发现一个月也就能读四本书，这个月读的书有：</p><ul><li>《雪中悍刀行》</li><li>《禁区之门》</li><li>《雪鹰领主》</li><li>《一九八四》</li></ul><p>##《雪中悍刀行》<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/045e7cbe-1315-4ff6-ba6c-7fcc627491df.jpg" alt=""></p><p><strong>标签</strong>：网文、武侠、玄幻、架空历史</p><p>用了半年时间才断断续续看完这部卷帙浩繁的网络小说，最初读这本书的原因是书荒菌（一个公众号）的推荐，鲜衣怒马、悍刀残雪，似乎是我的菜，再加上久仰这本书的大名，于是便下载了一本到手机上，开始读了起来，没想到这一读便过去了半年。</p><p>很久没有看完一本完整的网文，上次还是追更完番茄的《莽荒纪》。《雪中悍刀行》我也是当作追更小说来看，每天闲暇时拿出手机来看几章，融入一个奇幻的世界，已经成为一种习惯。</p><p>《雪中悍刀行》文笔在网文中算中上，读起来行云流水，人物刻画丰满，部分情节读起来热血沸腾。读这本书的过程，并不无聊，内容也不像很多网文一样YY的过分，破坏阅读体验。很多细节描写，都说的有理有据、头头是道，给人的感觉仿佛在看一部历史剧。可以说作者十分擅长营造气氛，这部分的文笔简直不像一个网文作者。书中有许多让人读起来豪情万丈、韵味无穷的片段，比如：  </p><blockquote><p>“世人不知何所求，那袭青衫放声笑：天不生我李淳罡，剑道万古如长夜！”，<br>“先生可否卖我几斤仁义道德”，<br>“不握剑了，握着她的手，这样的江湖，比什么都好”，<br>“北凉参差百万户，其中多少铁衣裹枯骨？”，<br>“功名付与酒一壶，试问帝王将相几抔土？”，<br>“来来来，试听谁在敲美人鼓。来来来，试看谁是阳间人屠？”，<br>      ……</p></blockquote><p>以及小说开头和结尾那一句“小二，上酒”，道不尽中间几千章故事多少曲折。</p><p>以上部分摘自网友所作《惶惶北凉镇灵歌》，全文贴在本节最后。</p><p>在这里顺便贴上知友“<strong>nanan</strong>”为《雪中悍刀行》作的另一首诗，穿插小说的主要事件：</p><blockquote><p>徐家有子名凤年，年少醉酒纵北凉。<br>劣马黄沙六千里，武帝城上剑九黄。<br>绣冬终临武当山，仙人指路斩大江。<br>武当当兴，舍一身黄庭，心有红尘尘皆禅。<br>下山回首一姑娘，人无薄情，抹半斤红妆。<br>煌煌一曲镇灵歌，剑道万古李淳罡。<br>木剑十文名温华，无人知他真儿郎。<br>先后故人，两座江湖。<br>我曾乱世宴歌舞，我曾溪边杀指玄。<br>我曾云空观世音，我曾陆地到沧海。<br>这江湖老去，这故人归去，再回首，不舍往事如风。<br>路尽头，且看一路高歌剑气长，真武见我我为王。<br>说北凉，道北凉，我名凤年字天狼。</p></blockquote><h4 id="我与网文"><a href="#我与网文" class="headerlink" title="我与网文"></a>我与网文</h4><p>每天最享受的时光大概就是吃饭时拿出手机短暂沉浸在幻想的世界的片刻，什么也不想，什么也不担心，只需看主角在另一个世界嬉笑怒骂、叱咤风云，仿佛书中的人物便是自己，在完成着自己曾经幻想过的事情，立一番传奇事业，庄周梦蝶，大抵如此。</p><p>记得曾经在学校看网文成瘾，备受煎熬，但当我离开高中，这“瘾”便自然而然戒掉。这种体验很奇怪，我想那个时候看网文只是为了给自己一个逃避的借口。如今看网文早已不至于沉迷，因为面前总有更重要、更有挑战性的事情等待去做。人生是 hard 模式，想要 easy 一些只有靠不断的练级，而看网文，对我来说已经成为刷副本之外的一种排解压力、放松神经的方式。</p><p>纪念曾经看网文的岁月，以及那时候共欢笑的书友。</p><p>另外期待这部小说拍成电视剧。</p><p><strong>推荐指数</strong>：★★★☆</p><blockquote><p>《惶惶北凉镇灵歌》<br>北凉参差百万户， 其中多少铁衣裹枯骨？<br>功名付与酒一壶，试问帝王将相几抔土？<br>山上走兔，林间睡狐， 气吞万里如虎。<br>珍珠十斛，红泥火炉， 素手蛮腰成孤。<br>十万弓弩，射杀无数。<br>百万头颅，滚落在路。<br>好男儿，莫要说那天下英雄入了吾谷。<br>小娘子，莫要将那爱慕思量深藏在腹。<br>来来来，试听谁在敲美人鼓？<br>吴家有女穿缟素。<br>来来来，试看谁是阳间人屠？<br>徐字王旗在逐鹿。<br>来来来，试问谁与我共江湖？<br>绿袍青衫去酆都。<br>来来来，试笑谁画玉京尊符？<br>人间久不见真武。<br>太安城中，九五尊前，大凉龙雀美人曾舞。<br>清凉山下，听潮阁上，守镇西北人屠横目。<br>天下悍勇只一石，八斗北凉收于库。<br>言我蛮狄畏我虎，敢讥敢笑不敢触。<br>世人问我骄兵与悍卒？<br>世人言我穷兵且黩武？<br>独御北莽十三州，曾扶离阳成共主。<br>春秋九国，一国功成八国奴。<br>十大门阀，不重社稷重宗族。<br>挥干戚，伐神木，马蹄直踏北汉都，兵锋斜指刑丘处，大魏南唐尽虚无。<br>斩剑皇，毁命途，孤军一开铁索落，九龙壁碎亡西蜀，六国国祚皆朽木。<br>西垒壁前动鱼鼓，襄樊城中万鬼哭。<br>风雨如晦景河役，大凰宫内绝大楚。<br>春秋曾巍巍，春秋已颓颓。<br>王侯将相大柱国，不过虚名与利禄。<br>离阳北凉与北莽，狗屠驴贩贼盗奴。<br>万世千秋，不过人屠骂名。<br>生前身后，无惧罄竹难书。<br>兴，百姓苦。<br>亡，百姓苦。<br>孤，独。<br>千秋，万古。<br>吴家女，辽东卒。<br>铁马金戈，霸业雄途。<br>君臣死国门，剑客老江湖。<br>冢间铁衣枯骨，人世巍巍浮屠。<br>逃不过美人迟暮，避不开英雄末路。<br>菩萨低眉金刚怒目，天人敕令剑仙横顾。<br>凄凄青史，毁誉凭谁书，煌煌镇灵，北凉永不负。<br>玄武当兴，慧剑但问情愫，大秦千年，悍刀不论沉浮。<br>呜呼？！愧何如之？<br>两辽袍泽六百墓，血流成河春秋路。<br>辗转征伐三万里，死战不退北凉卒！<br>凉刀斩落几豪阀，凉马踏破一江湖。<br>凉人埋骨三十州，凉王屠尽百万户。<br>呜呼？！怒何如之？<br>太安城内论太安，龙虎山前按龙虎。<br>紫禁山庄化丘墟，上阴学宫成迟暮。<br>野豺自此成家犬，书生往后拥铁骨。<br>谁哭殿前十四骑，谁见百战殆老卒。<br>嘘唏？！思何如之？<br>此生不曾悔当初，卿离剑冢我离孤。<br>青灯黄线缝布鞋，红颜绿蚁赠玉镯。<br>虎熊凤年龙象子，王妃剑仙洛神赋。<br>一去沽酒不见归，生离死别阴阳路。<br>曾梦年少把臂游，又见白衣亲擂鼓。<br>黄泉碧落无觅处，意冷心灰徒悲呼。<br>此剑扫平天下不平事，遇不平，自太平。<br>此剑无愧世间有愧人，杀有愧，方无愧。<br>谁道凉州尽匹夫，兴亡墓，睥睨庙堂几酸儒。<br>谁言边塞无风骨，慷慨处，天下雄文不足书。<br>游标弩，铁浮屠，大雪龙骑锋镝呜。<br>龙象力，虎熊怒，凤鸣声绝留青书。<br>掩古卷，心意已成枯。<br>忆旧人，豪烈凭谁赋？<br>徐骁生当作人杰， 徐骁死亦为鬼雄。<br>笑去酆都招旧部， 旌旗百万斩阎罗。<br>北凉。不悲凉。</p></blockquote><h2 id="《禁区之门》"><a href="#《禁区之门》" class="headerlink" title="《禁区之门》"></a>《禁区之门》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/9135dc87-594d-4b8d-a488-8585c6caf2c9.jpg" alt=""></p><p><strong>标签</strong>：黑客小说、网文</p><p>这本小说其实是第二次读，第一次是在初中还是高中。</p><p>这是一部讲述黑客的小说，和其它黑客类网文不同之处，首先在于他不过分YY，不像有些黑客网文，后期都开始开机甲了……其次，这部小说的主角在现实中是有原型的，他就是曾经入侵了北美空中防护指挥系统，被誉为“世界头号电脑黑客”的凯文·米特尼克，也就是说这部小说是网友根据真实人物生平，加上自己的YY，创作的小说。</p><p>凯文·米特尼克，在我眼里一直是传说中的人物，上个世界电脑刚刚兴起的时代，那个时候微软还没出现，乔布斯还是个孩子，凯文·米特尼克就开始研究电子设备，计算机的出现，对于他更具有无穷的吸引力，他把所有精力都投入到计算机的世界中，随着网络普及，他逐渐成长为一名叱咤于虚拟世界的黑客。可以说，他就是计算机世界中的天才。</p><p>这样的天才诞生于那个“网络安全”这个概念还没出现的年代，对于网络世界的冲击是极大的，他就像一个掌握了达摩克利斯之剑的剑客，指尖轻轻一翘，便震惊整个美国。15岁时，尼克入侵了“北美空中防护指挥系统”的计算机主机，同时和另外一些朋友翻遍了美国指向前苏联及其盟国的核弹头的数据资料，然后又悄然无息的溜了出来。这成为了黑客历史上一次经典之作。随后，他被FBI通缉，在和日本安全专家下村勉斗智斗勇逃亡了6年后（这又是另一番故事），他被捕入狱。</p><p>被当时网络爱好者誉为“黑客之王”的凯文·米特尼克入狱后，尼克的追随者们联名要求美国政府释放米特尼克。否则，他们将启动已经通过网络植入环球许多电脑中的病毒。</p><p>等等……</p><p>这就是凯文·米特尼克的故事，啰嗦了这么多，我只是想给大家普及一下曾经“黑客之王”的生平，以及顺便表达一下我对凯文·米特尼克大神的崇拜，他是指引我走上计算机这条道路的一座灯塔。</p><p>时间过去了很久，现在的凯文·米特尼克，是一名网络安全咨询专家。最近还看到一个消息，下个月（8月份）凯文·米特尼克将在北京举行的中国互联网安全峰会中首次露面。对我来说，无异于传奇走进现实，可惜无法去北京亲眼一见。</p><p>回到小说，这本网文的文笔略显幼稚，用带点传奇色彩的文笔，讲述了一个以凯文·米特尼克为原型的男孩痴迷计算机、慢慢成长为一个传奇的故事。YY场景比较多，但是是为数不多看着十分顺眼的黑客小说。总之我是把它当成三流传记小说来读的，看的还是蛮爽的。</p><p>推荐另一部小说，《灰塔笔记》，网友写的以艾伦·图灵为原型的传记小说（如果你能接受男同情节的话，2333）。</p><p><strong>推荐指数</strong>：★★★</p><h2 id="《雪鹰领主》"><a href="#《雪鹰领主》" class="headerlink" title="《雪鹰领主》"></a>《雪鹰领主》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/46df77cf-ad93-46e9-85e5-b43f9a9264ca.png" alt=""></p><p><strong>标签</strong>：玄幻、网文</p><p>泡菜类的网文，看着打发时光的，不谈文笔，只是看个热闹，不是十分推荐。</p><p>番茄的书风格稳定，不烂尾，和其它网文作者比起来，自然有他的特点，但依然摆脱不了网文的一贯的“套路”，他所有的书都像一个模子刻出来的，不过其中也有像《盘龙》这样让人印象深刻的作品。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《一九八四》"><a href="#《一九八四》" class="headerlink" title="《一九八四》"></a>《一九八四》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/48847c0f-a63e-45a8-a6be-0e45d6847d27.png" alt=""></p><p><strong>标签</strong>：反乌托邦</p><p>《一九八四》是世界反乌托邦文学的三部代表作之一，所谓反乌托邦，不是反对乌托邦的意思，而是乌托邦的反面。在小说虚构的国度大洋国中，由老大哥为核心的政权掌握着国家的运行，他们把极权专制做到了极致。他们用思想警察和电传屏幕监控人的思想，根据需要改写历史，愚弄民众的心智，抹杀异端人士，整个社会充斥着谎言、欺骗和虚伪。“老大哥”控制着大洋国的现在和过去，他们相信也能控制未来。然而，小说中“老大哥”是否真的存在，都是一个谜。</p><p>“老大哥在看着你”，一句经典的翻译。1984年，乔布斯在超级碗比赛中致敬《一九八四》，放映了他们极具特色的苹果广告，广告中主角拿出锤子打碎了象征IBM的“老大哥”形象，在当时取得了巨大成功，我也是在那时知道《一九八四》这部反乌托邦系列的代表作。</p><p>读过之后才知道这是一部政治隐喻小说，你甚至能在书中学习到一些政治、社会学的规律。</p><p>小书中大洋国为什么要建立这样的国家制度？为什么要重新炮制历史？为什么不断地开启战争？这些都有原因，按书中的说法，人类社会中始终分三种人：上等人、中等人、下等人。下等人物资匮乏，民智未开；中等人解决了自身的温饱问题，渴望成为上等人；上等人把持权利，期望永远稳坐宝座。而随着科技进步，社会物资会越来越丰富，下等人逐渐摆脱温饱问题，有越来越多的精力去思考，他们会希望倾覆这样的等级制度。科技进步是无法阻止的，所以大洋国中的上等人，也就是“老大哥”为代表的内党成员，不断制造战争（甚至不是攻打别国，而是向自己的民众发动的），消耗过剩的劳动产品，使底层人民永远奔波在生计中，无心思考。这正应了书中那句话——“长远来看，等级社会只有建立在贫穷和无知的基础上，才有可能存在”，大洋国中的战争，不是为了攻占领土，而是保持社会结构不变。</p><p>关于炮制历史：你可以想象一个没有历史的国家，所有代表过去的文献全部由国家反复修订，炮制，直到找不到一片反映真实历史的片段。你知道历史是伪造的，但是永远拿不出证据来证明你的论点。这样的世界，何其可怕？这样的社会，甚至无法从历史中找到根据去推翻它。</p><p>书中还有很多精彩的见解，在这里不一一列出，感兴趣的可以读一读小说。</p><h4 id="关于译本"><a href="#关于译本" class="headerlink" title="关于译本"></a>关于译本</h4><p>《一九八四》有三个主流译本，按翻译年代排列：董乐山、刘绍铭、孙仲旭。个人感觉，董乐山的译本翻译贴近原著，但是有些生硬；刘绍铭的译本接读起来比较流畅；孙仲旭的译本没读过。网上有因为译本撕逼的，甚至还有“我行我上”自己翻译的，666，关于译本，见仁见智，读的开心就行，反正我喜欢刘绍铭版本~</p><p><strong>推荐指数</strong>：★★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/393" target="_blank" rel="noopener">2017 年 7 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>如何写一个简单的分布式知乎爬虫？</title>
      <link href="/2017/07/29/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%9F%A5%E4%B9%8E%E7%88%AC%E8%99%AB%EF%BC%9F/"/>
      <url>/2017/07/29/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%9F%A5%E4%B9%8E%E7%88%AC%E8%99%AB%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/9c92390b-a18e-45ca-9452-4d43607c3d83.jpg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早就有采集知乎用户数据的想法，要实现这个想法，需要写一个网络爬虫（Web Spider）。因为在学习 python，正好 python 写爬虫也是极好的选择，于是就写了一个基于 python 的网络爬虫。</p><p>几个月前写了爬虫的初版，后来因为一些原因，暂时搁置了下来，最近重新拾起这个想法。首先优化了代码的结构，然后在学弟的提醒下，从多线程改成了多进程，一台机器上运行一个爬虫程序，会启动几百个子进程加速抓取。</p><p>但是一台机器的性能是有极限的，所以后来我使用 MongoDB 和 Redis 搭建了一个主从结构的分布式爬取系统，来进一步加快抓取的速度。</p><p>然后我就去好几个服务器厂商申请免费的试用，比如百度云、腾讯云、Ucloud…… 加上自己的笔记本，断断续续抓取了一个多周，才采集到300万知乎用户数据。中间还跑坏了运行网站的云主机，还好 <a href="http://yangyingming.com/article/359/" target="_blank" rel="noopener">自动备份</a> 起作用，数据没有丢失，但那又是另外一个故事了……</p><p>完整版的爬虫链接在这儿：<a href="https://github.com/windcode/zhihu-crawler-people" target="_blank" rel="noopener">windcode/zhihu-crawler-people</a>，走过路过别忘了点个 star ~</p><p>废话不多说，下面我介绍一下如何写一个简单的分布式知乎爬虫。<br><a id="more"></a></p><h2 id="抓取知乎用户的个人信息"><a href="#抓取知乎用户的个人信息" class="headerlink" title="抓取知乎用户的个人信息"></a>抓取知乎用户的个人信息</h2><p>我们要抓取知乎用户数据，首先要知道在哪个页面可以抓取到用户的数据。知乎用户的个人信息在哪里呢，当然是在用户的主页啦，我们以轮子哥为例 ~</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/662dde31-6aff-431c-853c-5fa7cfab620a.png" alt=""></p><p>红框里的便我们要抓取的用户关键信息（的一部分）。</p><p>最上面是我们的目标URL：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">观察一下这个URL的组成：</span><br><span class="line"></span><br><span class="line">http://www.zhihu.com + /people + **/excited-vczh** + /answer</span><br><span class="line"></span><br><span class="line">可以发现只有 **excited-vczh** 这部分是会变化的，它代表着知乎用户的唯一ID，在知乎的数据格式中，它的键名叫做 **urlToken**。</span><br><span class="line"></span><br><span class="line">所以我们可以用拼接字符串的形式，得到我们待抓取页面的URL：</span><br><span class="line">```python</span><br><span class="line">url = &apos;%s/people/%s/answers&apos;%(host,urlToken)</span><br></pre></td></tr></table></figure></p><p>页面URL有了，而且从上图我们可以发现 <strong>不登录</strong> 也可以访问用户主页，这说明我们可以不用考虑模拟登陆的问题，可以自由的获取用户主页面源码。</p><p>那么我们如何从用户主页的源码中获取用户的数据呢？一开始我以为需要挨个匹配页面中对应的部分，但我查看源码的时候发现知乎把用户数据集集中放到了源码的一个地方，那就是 id=”data” 的 div 的 <strong>data-state</strong> 属性的值中，看下图：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f3dd2c9c-3bed-4a85-9410-03ec7c0e195d.png" alt=""></p><p>从上图我们可以发现，<strong>date-state</strong> 的属性值中藏有用户的信息，比如我们可以依次找到用户的教育经历（educations）、简介（headline）、参与的 Live 数量（participatedLiveCount）、关注的收藏夹数量（followingFavlistsCount）、被收藏的次数（favoritedCount）、关注他的用户数（followerCount）、关注的话题数量（followingTopicCount）、用户描述（description）等信息。通过观察我们也可以发现，数据应该是以 JSON 格式存储。</p><p>知道了用户数据都藏在 <strong>date-state</strong> 中，我们 <strong>用 BeautifulSoup 把该属性的值取出来，然后作为 JSON 格式读取，再把数据集中存储用户数据的部分提取出来即可</strong>，看代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析html</span></span><br><span class="line">s = BS(html,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># 获得该用户藏在主页面中的json格式数据集</span></span><br><span class="line">data = s.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'id'</span>:<span class="string">'data'</span>&#125;)[<span class="string">'data-state'</span>]</span><br><span class="line">data = json.loads(data)</span><br><span class="line">data = data[<span class="string">'entities'</span>][<span class="string">'users'</span>][urlToken]</span><br></pre></td></tr></table></figure></p><p>如此，我们便得到了某一个用户的个人信息。</p><h2 id="抓取知乎用户的关注者列表"><a href="#抓取知乎用户的关注者列表" class="headerlink" title="抓取知乎用户的关注者列表"></a>抓取知乎用户的关注者列表</h2><p>刚刚我们讨论到可以通过抓取用户主页面源码来获取个人信息，而用户主页面可以通过拼接字符串的形式得到 URL，其中拼接的关键是 <strong>如何获取用户唯一ID —— urlToken</strong>？</p><p>我采用的方法是 <strong>抓取用户的关注者列表</strong>。</p><p>每个用户都会有关注者列表，比如轮子哥的：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/124e8122-d70b-4f8d-b1c0-264d7c8d508e.png" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f035788a-8d0b-4704-8ee6-970e6fb44996.png" alt=""></p><p>和获取个人信息同样的方法，我们可以在该页面源码的 <strong>date-state</strong> 属性值中找到关注他的用户（一部分）：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/dae73fe7-a0e4-4500-87a8-fcd5cae55d3b.png" alt=""></p><p>名为 <strong>ids</strong> 的键值中存储有当前列表页的所有用户的 <strong>urlToken</strong>，默认列表的每一页显示20个用户，所以我们写一个循环便可以获取<strong>当前页</strong>该用户的所有关注者的 <strong>urlToken</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析当前页的 html   </span></span><br><span class="line">url = <span class="string">'%s/people/%s/followers?page=%d'</span>%(host,urlToken,page)</span><br><span class="line">html = c.get_html(url)</span><br><span class="line">s = BS(html,<span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前页的所有关注用户</span></span><br><span class="line">data = s.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'id'</span>:<span class="string">'data'</span>&#125;)[<span class="string">'data-state'</span>]</span><br><span class="line">data = json.loads(data)</span><br><span class="line">items = data[<span class="string">'people'</span>][<span class="string">'followersByUser'</span>][urlToken][<span class="string">'ids'</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line"><span class="keyword">if</span> item!=<span class="keyword">None</span> <span class="keyword">and</span> item!=<span class="keyword">False</span> <span class="keyword">and</span> item!=<span class="keyword">True</span> <span class="keyword">and</span> item!=<span class="string">'知乎用户'</span>.decode(<span class="string">'utf8'</span>):</span><br><span class="line">node = item.encode(<span class="string">'utf8'</span>)</span><br><span class="line">follower_list.append(node)</span><br></pre></td></tr></table></figure></p><p>再写一个循环遍历关注者列表的所有页，便可以获取用户的所有关注者的 urlToken。</p><p>有了每个用户在知乎的唯一ID，我们便可以通过拼接这个ID得到每个用户的主页面URL，进一步获取到每个用户的个人信息。</p><p>我选择抓取的是用户的<strong>关注者列表</strong>，即关注这个用户的所有用户（follower）的列表，其实你也可以选择抓取用户的<strong>关注列表</strong>（following）。我希望抓取更多知乎非典型用户（潜水用户），于是选择了抓取关注者列表。当时抓取的时候有这样的担心，万一这样抓不到主流用户怎么办？毕竟很多知乎大V虽然关注者很多，但是主动关注的人相对都很少，而且关注的很可能也是大V。但事实证明，主流用户基本都抓取到了，看来基数提上来后，总有缝隙出现。</p><h2 id="反爬虫机制"><a href="#反爬虫机制" class="headerlink" title="反爬虫机制"></a>反爬虫机制</h2><p>频繁抓取会被知乎封IP，也就是常说的反爬虫手段之一，不过俗话说“道高一尺，魔高一丈”，既然有反爬虫手段，那么就一定有反反爬虫手段，咳，我自己起的名……</p><p>言归正传，如果知乎封了你的IP，那么怎么办呢？很简单，换一个IP。这样的思想催生了 <strong>代理IP池</strong> 的诞生。所谓代理IP池，是一个代理IP的集合，使用代理IP可以伪装你的访问请求，让服务器以为你来自不同的机器。</p><p>于是我的 <strong>应对知乎反爬虫机制的策略</strong> 就很简单了：全力抓取知乎页面 –&gt; 被知乎封IP –&gt; 换代理IP –&gt; 继续抓 –&gt; 知乎继续封 –&gt; 继续换 IP….. （手动斜眼）</p><p>使用 代理IP池，你可以选择用付费的服务，也可以选择自己写一个，或者选择用现成的轮子。我选择用七夜写的 <a href="https://github.com/qiyeboy/IPProxyPool" target="_blank" rel="noopener">qiyeboy/IPProxyPool</a> 搭建代理池服务，部署好之后，修改了一下代码让它只保存https协议的代理IP，因为 <strong>使用http协议的IP访问知乎会被拒绝</strong>。</p><p>搭建好代理池服务后，我们便可以随时在代码中获取以及使用代理 IP 来伪装我们的访问请求啦！</p><p>（其实反爬手段有很多，代理池只是其中一种）</p><h2 id="简单的分布式架构"><a href="#简单的分布式架构" class="headerlink" title="简单的分布式架构"></a>简单的分布式架构</h2><p>多线程/多进程只是最大限度的利用了单台机器的性能，如果要利用多台机器的性能，便需要分布式的支持。</p><p>如何搭建一个简单的分布式爬虫？</p><p>我采用了 <strong>主从结构</strong>，即一台主机负责调度、管理待抓取节点，多台从机负责具体的抓取工作。</p><p>具体到这个知乎爬虫来说，<strong>主机上搭建了两个数据库</strong>：<strong>MongoDB 和 Redis</strong>。MongoDB 负责存储抓取到的知乎用户数据，Redis 负责维护待抓取节点集合。<strong>从机上可以运行两个不同的爬虫程序</strong>，一个是抓取用户关注者列表的爬虫（list_crawler），一个是抓取用户个人资料的爬虫（info_crawler），他们可以配合使用，但是互不影响。</p><p>我们重点讲讲主机上维护的集合，主机的 Redis 数据库中一共维护了5个集合：</p><ul><li>waiting：待抓取节点集合</li><li>info_success：个人信息抓取成功节点集合</li><li>info_failed：个人信息抓取失败节点集合</li><li>list_success：关注列表抓取成功节点集合</li><li>list_failed：关注列表抓取失败节点集合</li></ul><p>这里插一句，<strong>之所以采用集合（set），而不采用队列（queue）</strong>，是因为集合天然的带有唯一性，也就是说可以加入集合的节点一定是集合中没有出现过的节点，这里在5个集合中流通的节点其实是 <strong>urlToken</strong>。</p><p>（其实集合可以缩减为3个，省去失败集合，失败则重新投入原来的集合，但我为了测速所以保留了5个集合的结构）</p><p>他们的关系是：<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/c4595153-977e-4ee0-b5a7-217c31157ce2.png" alt=""></p><p><strong>举个具体的栗子</strong>：从一个 urlToken 在 waiting 集合中出现开始，经过一段时间，它被 info_crawler 爬虫程序从 waiting 集合中随机获取到，然后在 info_crawler 爬虫程序中抓取个人信息，如果抓取成功将个人信息存储到主机的 MongoDB 中，将该 urlToken 放到 info_success 集合中；如果抓取失败则将该 urlToken 放置到 info_failed 集合中。下一个阶段，经过一段时间后，list_crawler 爬虫程序将从 info_success 集合中随机获取到该 urlToken，然后尝试抓取该 urlToken 代表用户的关注者列表，如果关注者列表抓取成功，则将抓取到的所有关注者放入到 waiting 集合中，将该 urlToken 放到 list_success 集合中；如果抓取失败，将该 urlToken 放置到 list_failed 集合中。</p><p>如此，主机维护的数据库，配合从机的 info_crawler 和 list_crawler 爬虫程序，便可以循环起来：<strong>info_crawler 不断从 waiting 集合中获取节点，抓取个人信息，存入数据库；list_crawler 不断的补充 waiting 集合</strong>。</p><p>主机和从机的关系如下图：<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/b08b1bc1-36a0-46a9-a844-3def95e249f1.png" alt=""></p><p>主机是一台外网/局域网可以访问的“服务器”，从机可以是PC/笔记本/Mac/服务器，这个架构可以部署在外网也可以部署在内网。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文分享的是如何写一个简单的分布式知乎爬虫，但愿能带给你启发。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/392" target="_blank" rel="noopener">如何写一个简单的分布式知乎爬虫？</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>第一届 Bilibili World 参加体验！</title>
      <link href="/2017/07/21/%E7%AC%AC%E4%B8%80%E5%B1%8A%20Bilibili%20World%20%E5%8F%82%E5%8A%A0%E4%BD%93%E9%AA%8C%EF%BC%81/"/>
      <url>/2017/07/21/%E7%AC%AC%E4%B8%80%E5%B1%8A%20Bilibili%20World%20%E5%8F%82%E5%8A%A0%E4%BD%93%E9%AA%8C%EF%BC%81/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/6eeacea3-3bf6-48d0-9899-a517573eb2ce.png" alt=""></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最初知道 Bilibili World（以下简称BW） 是看到 B 站 up 主 LexBurner 发布的一段 BW 的 <a href="http://www.bilibili.com/video/av12203925/" target="_blank" rel="noopener">宣传视频</a>，看完发现坐标竟然就在上海！</p><p><strong>拔剑神曲（βίος）</strong>的原唱 <strong>小林未郁</strong> 会去，血洗B站的《极乐净土》舞团 <strong>GARNiDELiA</strong> 会去，小埋的声优会去，还有我关注的很多 up 主：中国 boy、允星河、神奇陆夫人、黑桐谷歌、祈Inory、Apple君、王自如…… 作为一个关注B站时间也不短的用户，看到这么多平时只在手机屏幕前看的面孔都会来参加，当然不会错过这个机会！<br><a id="more"></a></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/8fa4d786-51fa-4647-80e6-1e3ab39e925b.png" alt=""></p><p>门票价格比较良心：80元，看到活动的官方群里各地的人吵着要坐火车来上海，下面有人泼冷水：80元你买不了吃亏，80元你买不了上当，80元你也买不了火车票~~ 2333</p><p>早上9点出发，9点40分到达场馆（上海世博展览馆），看到一条巨长的队伍，外面天气巨热，据说今天的气温40.9度创历史新高，打破徐家汇站145年纪录…… 看 B 站的小电视都化了。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/8c6d7809-0a5a-4735-94c1-153dd7e438b1.png" alt=""></p><p>在场馆外排了40分钟，走了两条街才到入口处，进入场馆之后首先最大的感受是温度直降，全场开着冷气，连小电视都恢复了正常~ （场馆内外真有这两个设施~）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/01eea7ca-6180-43bf-8277-c5f287cb7d8a.png" alt=""></p><p>B 站发放的是电子票，必须打开 B站 app 自己账户内的 BML 票务管理系统，现场扫码才能进入。通过安检之后，是几十道长长的路障，必须根据路障划定的路线绕圈圈，据说全长有5公里…… 这直线距离其实不到500米的路我走了20分钟。</p><p>入场的时候有个细节我印象挺深刻，在走到一半多的时候，有一个路障分开了一个口子，一开始很多人蜂拥过去，然后我前面的几个人默默地过去把路障重新放回原处。这是B站的真爱粉啊，很有素质。</p><p>正式进入场馆之后还有个缓冲区，这里有B站吉祥物 2233 娘（真人版）可以合影，以及休息的地方。穿过弹幕通道之后就是真正的场馆，一进门第一感觉就是热闹，以及很多很多人，各个舞台闪着绚丽的光芒，争相夺彩，彩灯和音乐齐舞，一时间竟不知道去哪个方向。</p><p>下面是我主要体验的几个舞台，分享给大家！</p><h2 id="主舞台：小林未郁"><a href="#主舞台：小林未郁" class="headerlink" title="主舞台：小林未郁"></a>主舞台：小林未郁</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/b04d9670-b819-47f3-9c8a-b3d0237b0504.jpg" alt=""></p><p>今天的嘉宾最吸引我的便是 <strong>小林未郁</strong>，她演唱过一些 ACG 圈耳熟能详的歌曲，比如 at’aek ON taitn（《进击的巨人》插曲，就是超大化巨人出现时的音乐）、《βίος》（《罪恶王冠》插曲，即拔剑神曲）、BRE@TH//LESS（《ALDNOAH.ZERO》插曲，这个不太熟悉）。</p><p>11点45分，小林未郁准时出现，没让人失望，以上歌曲她都演唱了一遍。现场气氛很嗨，由于排队比较早，我凑到了前排，听歌之余，往后一看吓了一跳，人山人海，里三层外三层，我想场馆内一小半人都被吸引过来了。</p><p>现场听歌感觉就是不一样，大功率音响放出的歌声在场馆内回荡，加上周围的人狂热的气氛感染，很容易产生兴奋亢奋的情绪。</p><p>其实听过拔剑神曲就值回票价了！剩下的就好好玩耍啦！哈哈。</p><h2 id="脱口秀舞台：王自如"><a href="#脱口秀舞台：王自如" class="headerlink" title="脱口秀舞台：王自如"></a>脱口秀舞台：王自如</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/12dd9c5b-5028-4dbd-81df-77abb9b1d3af.jpg" alt=""></p><p>主舞台后面正好就是脱口秀舞台，在附近吃过午饭后，来这里一看，王自如和山下智博恰好在舞台上。</p><p>王自如在网上还是有知名度的，第一次看到真人，和印象里差不多。我去的时候，他正在回答观众的问题，过了一会，山下智博提议做游戏，内容是：王自如带上眼罩，然后摸手机，猜牌子和型号。试了四五部手机，王自如基本都答对，不愧是手机专家。</p><p>在这儿看了一会，看时间差不多到两点，于是跑去黑白键舞台。</p><h2 id="黑白键舞台：KyleXian（K大）、Animenzzz（A叔）"><a href="#黑白键舞台：KyleXian（K大）、Animenzzz（A叔）" class="headerlink" title="黑白键舞台：KyleXian（K大）、Animenzzz（A叔）"></a>黑白键舞台：KyleXian（K大）、Animenzzz（A叔）</h2><p>黑白键舞台是钢琴表演舞台，主要有两位大佬演奏：KyleXian（K大）、Animenzzz（A叔），他们都是弹奏动漫歌曲的大师。我在这个舞台待的时间最长，因为今天来的嘉宾，除了小林未郁，其次感兴趣的便是两位弹琴的大佬啦！</p><p>说起这两位，我了解他们，还都是搜索数码宝贝的钢琴版曲子的时候，因为他们都演奏过数码宝贝的主题曲！有一段时间，我的歌单里一直在循环播放他们的钢琴曲。得知两位大佬会驻演黑白键舞台，成了这次来 BW 最后一个助推力。</p><p>2点左右过去舞台的时候，K大 正在演奏钢琴，弹幕点歌，基本都是动漫歌曲，无缝切换，一直在站着弹奏，很辛苦的样子。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/687359e5-74b4-4ada-9051-753e7a5892a6.jpg" alt=""></p><p>A叔来的时候，K大摆出手势指向场外，观众响起欢呼，A叔隆重登场。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/8b781f7a-d763-4817-9f41-7cb385c09ed5.jpg" alt=""></p><p>A叔，网络 ID 为 Animenzzz，91年生，德国华裔，父母都是中国人，德国生德国长，在德国Rostock音乐和戏剧学院钢琴系接收西方古典音乐教育，却喜爱二次元，是一位在网络有高知名度的钢琴家，有“世界动漫钢琴改编第一人”的称谓。</p><p>A叔弹了一些曲子后，然后进入问答环界，由于A叔中文不太好，K大就客串起翻译的角色，没想到K大英文这么好！接着观众中就出现了直接和A叔全英文交流的同学，还不少！观众中也是卧虎藏龙啊，最后甚至还出现了一位会德语的大佬！和A叔德语交流无障碍！而且K大也懂德语，还能给我们继续做翻译！厉害了……</p><p>我要好好学习，天天向上（掩面）</p><p>要到 K大 的签名和合照是今天的意外收获，遗憾的是没有听到 A叔 和 K大 现场演奏的数码宝贝主题曲 ~</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/acf0cc9c-f0ae-4b12-8be6-721639f6d284.jpg" alt=""></p><h2 id="其它舞台"><a href="#其它舞台" class="headerlink" title="其它舞台"></a>其它舞台</h2><p>B站 吉祥物 2233娘</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/9ac11159-a215-4873-95e9-7278121abc94.jpg" alt=""></p><p>模拟驾驶</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/1689b85d-7ab4-4a81-a048-722811055a5a.jpg" alt=""></p><p>纳米核心展台（这里工作人员还跳了一段《极乐净土》）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/a298b655-42a1-429c-946d-9d30b10df6b2.jpg" alt=""></p><p>游戏舞台，据说花少北、神奇陆夫人在上面 solo</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/8fb9bf24-2fb8-4bc6-8303-3a9926f67544.jpg" alt=""></p><p>日食记</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/cdb01cb1-ae72-4e00-b122-2b6f74d9d947.jpg" alt=""></p><p>偶遇 coser</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/12199fc9-9e5c-4e54-bc5b-e8f36cec32e2.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/c44dcad9-4097-46d7-b7fe-5727531de5c7.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/76260d26-6980-4479-8ede-2fa4ed4f2a4d.jpg" alt=""></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><h4 id="再见，-Bilibili-World-2017！"><a href="#再见，-Bilibili-World-2017！" class="headerlink" title="再见， Bilibili World 2017！"></a>再见， Bilibili World 2017！</h4><p>有机会还会再来~</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/6404fc13-b13b-4a5e-86d0-8a19c84c7fdc.jpg" alt=""></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/391" target="_blank" rel="noopener">第一届 Bilibili World 参加体验！</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>记录一次服务器重新部署的经历（网站、gogs和一些脚本）</title>
      <link href="/2017/07/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%88%E7%BD%91%E7%AB%99%E3%80%81gogs%E5%92%8C%E4%B8%80%E4%BA%9B%E8%84%9A%E6%9C%AC%EF%BC%89/"/>
      <url>/2017/07/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%88%E7%BD%91%E7%AB%99%E3%80%81gogs%E5%92%8C%E4%B8%80%E4%BA%9B%E8%84%9A%E6%9C%AC%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间由于手贱在服务器上跑爬虫，开了100个进程，内存和cpu双双达到极限值，第二天起来一看，性能曲线赛高，使用 putty 和网页版 ssh 登录服务器，被拒之门外。于是重启服务器，然后发现启动报错，找阿里云售后工程师，说部分关键文件丢失，这种情况无法正常启动，建议恢复快照…… 无奈，依次尝试恢复快照，结果发现只有一月份的快照是正常的…… 这意味着我没法把系统直接恢复到最近的正常状态，一些服务和程序需要我重新搭建一遍。</p><p>心情崩溃…… 好在网站有 <a href="http://yangyingming.com/article/359/" target="_blank" rel="noopener">自动备份</a>，阿里云也可以 从快照创建磁盘 ，这说明数据没有丢失，不幸中的万幸，然后只要花时间把服务和程序重新搭建起来就可以恢复之前的状态了。<br><a id="more"></a></p><p><strong>原系统：</strong><br>ubuntu 14.04 LTS 32bit</p><p><strong>新系统：</strong><br>ubuntu 16.04 LTS 64bit</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>创建新用户，不再用 root 直接运行程序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:~<span class="comment"># useradd yym # 创建用户 yym</span></span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:~<span class="comment"># passwd yym  # 设置用户 yym 的密码</span></span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:~<span class="comment"># visudo      # 添加用户 yym 使用 sudo 的权限</span></span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:~<span class="comment"># cd /home    # 跳转目录到 home</span></span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:/home<span class="comment"># mkdir yym   # 创建 yym 用户目录</span></span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:/home<span class="comment"># su yym  # 切换到用户</span></span><br></pre></td></tr></table></figure></p><h3 id="挂载数据盘"><a href="#挂载数据盘" class="headerlink" title="挂载数据盘"></a>挂载数据盘</h3><p>新用户的数据都将放置在这个数据盘里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yym@iZ2zegis1iqwk7ddw7voqtZ:/home$ sudo fdisk -l    <span class="comment"># 查看所有磁盘</span></span><br><span class="line">...</span><br><span class="line">yym@iZ2zegis1iqwk7ddw7voqtZ:/home$ sudo mount /dev/vdb ~    <span class="comment"># 挂载磁盘 /dev/vdb</span></span><br></pre></td></tr></table></figure><p><strong>问题</strong>：用新用户登陆后命令行只有一个$<br><strong>原因</strong>：/etc/passwd 中新建用户没有 bash 的权限<br><strong>解决方法</strong>：在新用户权限后添加 /bin/bash</p><p>参考资料：<a href="https://help.aliyun.com/document_detail/25426.html?spm=5176.doc25446.2.3.ifWqWH" target="_blank" rel="noopener">Linux 格式化和挂载数据盘</a></p><h3 id="修改-shell-默认配色"><a href="#修改-shell-默认配色" class="headerlink" title="修改 shell 默认配色"></a>修改 shell 默认配色</h3><p>github上找到的配色解决方案，<a href="https://github.com/seebi/dircolors-solarized" target="_blank" rel="noopener">dircolors-solarized</a></p><h4 id="1、将配色方案clone到本地"><a href="#1、将配色方案clone到本地" class="headerlink" title="1、将配色方案clone到本地"></a>1、将配色方案clone到本地</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/seebi/dircolors-solarized.git</span><br></pre></td></tr></table></figure><p>（需要先安装git，没有安装的先在shell里运行命令apt-get install git）</p><h4 id="2、设置配色方案到-dircolors"><a href="#2、设置配色方案到-dircolors" class="headerlink" title="2、设置配色方案到 .dircolors"></a>2、设置配色方案到 .dircolors</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp dircolors<span class="number">.256</span>dark ~/.dircolors</span><br></pre></td></tr></table></figure><p>（需要先移动到dircolors-solarized目录下)</p><h4 id="3、重新登录用户"><a href="#3、重新登录用户" class="headerlink" title="3、重新登录用户"></a>3、重新登录用户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval `dircolors dircolors<span class="number">.256</span>dark`</span><br></pre></td></tr></table></figure><p>运行以上命令可以直接预览配色效果，但是下次登录会恢复默认配色</p><p>详情可参考：<a href="http://yangyingming.com/article/22/" target="_blank" rel="noopener">改变linux默认配色方案（dircolors和dircolors-solarized使用）</a></p><h3 id="在用户根目录下创建-bashrc-和-profile"><a href="#在用户根目录下创建-bashrc-和-profile" class="headerlink" title="在用户根目录下创建 .bashrc 和 .profile"></a>在用户根目录下创建 .bashrc 和 .profile</h3><p>.bashrc 和 .profile 是系统启动时自动运行的脚本，会自动运行一些配置，方便使用。</p><p>在配置之前，如果你是新用户，<strong>首先要给新用户添加使用 bash 的权限</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/passwd</span><br></pre></td></tr></table></figure></p><p>然后在新用户那一行最后添加 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">your_user:x:1000:1000::/home/whz:/bin/bash</span><br></pre></td></tr></table></figure></p><p>创建 .bashrc 和 .profile 的方法有两个：</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>直接复制了 root 用户的 .bashrc 和 .profile 过来，并修改权限为当前用户。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /root/.profile ~</span><br><span class="line">sudo cp /root/.bashrc ~</span><br><span class="line">sudo chown user:user ~/.profile</span><br><span class="line">sudo chown user:user ~/.bashrc</span><br></pre></td></tr></table></figure></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>可以直接用别人造好的轮子，我选了一个，原因是安装方便：<a href="https://github.com/fnichol/bashrc" target="_blank" rel="noopener">fnichol/bashrc</a>。</p><p>执行以下命令即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/fnichol/bashrc/master/contrib/install-local | bash</span><br></pre></td></tr></table></figure></p><h3 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h3><p>vim 我使用了 github 上 <a href="https://github.com/ma6174/vim" target="_blank" rel="noopener">ma6174/vim</a> 的配置，Star 数量 2.9k，搜索 vim 第一条结果就是。</p><p>安装十分简单，运行一条命令即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.github.com/ma6174/vim/master/setup.sh | sh -x</span><br></pre></td></tr></table></figure><p><strong>问题</strong>：使用 vim 编辑 py 文件的时候出现如下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ex.py"</span> <span class="number">5L</span>, <span class="number">87</span>C</span><br><span class="line">Error detected <span class="keyword">while</span> processing /home/yym/.vim/ftplugin/python/pyflakes.vim:</span><br><span class="line">line   <span class="number">28</span>:</span><br><span class="line">Error: the pyflakes.vim plugin requires Vim to be compiled <span class="keyword">with</span> +python</span><br><span class="line">Press ENTER <span class="keyword">or</span> type command to <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：<br>链接：<a href="https://jingyan.baidu.com/article/3f16e00308b4482591c1030f.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/3f16e00308b4482591c1030f.html</a></p><p>步骤：</p><p>去github重新下载一个pyflakes.vim：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive git://github.com/kevinw/pyflakes-vim.git</span><br></pre></td></tr></table></figure></p><p>将python目录下的所有文件复制到~/.vim/ftplugin目录下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R ./pyflakes-vim/ftplugin/python/  ~/.vim/ftplugin/</span><br></pre></td></tr></table></figure></p><p><strong>ma6174/vim 使用方法见链接</strong>：<br><a href="https://github.com/ma6174/vim/blob/master/tips.md" target="_blank" rel="noopener">https://github.com/ma6174/vim/blob/master/tips.md</a></p><h3 id="添加-pip-豆瓣源加速安装"><a href="#添加-pip-豆瓣源加速安装" class="headerlink" title="添加 pip 豆瓣源加速安装"></a>添加 pip 豆瓣源加速安装</h3><p>使用默认 pip 源安装各种 python 库速度十分慢，经常出现 read time out 超时错误。忍无可忍，换成国内的 pip 豆瓣源。</p><h4 id="临时使用豆瓣源"><a href="#临时使用豆瓣源" class="headerlink" title="临时使用豆瓣源"></a>临时使用豆瓣源</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install -i http://pypi.douban.com/simple/ saltTesting </span><br><span class="line">sudo pip install -i http://pypi.douban.com/simple/ saltTesting</span><br></pre></td></tr></table></figure><h4 id="永久使用豆瓣源"><a href="#永久使用豆瓣源" class="headerlink" title="永久使用豆瓣源"></a>永久使用豆瓣源</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">vi .pip/pip.conf</span><br></pre></td></tr></table></figure><p>添加内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>] </span><br><span class="line">index-url = http://pypi.douban.com/simple </span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>在用 pip 安装 python 库试试，速度是不是快多了呢？ :)</p><p>参考于：<a href="https://www.douban.com/note/302711300/" target="_blank" rel="noopener">国内的pythoner强烈建议使用豆瓣的pypi源 zz</a></p><h2 id="搭建个人博客-MingBlog-网站"><a href="#搭建个人博客-MingBlog-网站" class="headerlink" title="搭建个人博客 MingBlog 网站"></a>搭建个人博客 MingBlog 网站</h2><p>###在 ubuntu 16.04 上安装 mysql-5.6</p><p><strong>安装 mysql 两篇教程</strong>：<br><a href="https://askubuntu.com/questions/762384/install-mysql-5-6-on-ubuntu-16-04" target="_blank" rel="noopener">https://askubuntu.com/questions/762384/install-mysql-5-6-on-ubuntu-16-04</a><br><a href="http://blog.csdn.net/keeyce/article/details/52217730" target="_blank" rel="noopener">http://blog.csdn.net/keeyce/article/details/52217730</a></p><p><strong>启动 mysql</strong><br><a href="http://blog.csdn.net/he582754810/article/details/53516158" target="_blank" rel="noopener">http://blog.csdn.net/he582754810/article/details/53516158</a></p><p><strong>允许远程用户登录访问 mysql</strong><br><a href="http://www.cnblogs.com/hyzhou/archive/2011/12/06/2278236.html" target="_blank" rel="noopener">http://www.cnblogs.com/hyzhou/archive/2011/12/06/2278236.html</a></p><p><strong>mysql 数据库还原 gzip 备份文件</strong><br><a href="http://blog.csdn.net/junqing124/article/details/42869521" target="_blank" rel="noopener">http://blog.csdn.net/junqing124/article/details/42869521</a></p><p><strong>完全卸载 mysql</strong><br><a href="http://www.linuxidc.com/Linux/2013-04/82934.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2013-04/82934.htm</a></p><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><h4 id="1-安装-nginx"><a href="#1-安装-nginx" class="headerlink" title="1.安装 nginx"></a>1.安装 nginx</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h4 id="2-查看-nginx-服务状态"><a href="#2-查看-nginx-服务状态" class="headerlink" title="2.查看 nginx 服务状态"></a>2.查看 nginx 服务状态</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yym@iZ2zegis1iqwk7ddw7voqtZ:~ $ service nginx status</span><br><span class="line">● nginx.service - A high performance web server <span class="keyword">and</span> a reverse proxy server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Mon <span class="number">2017</span><span class="number">-07</span><span class="number">-17</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">51</span> CST; <span class="number">27</span>s ago</span><br><span class="line"> Main PID: <span class="number">30583</span> (nginx)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─<span class="number">30583</span> nginx: master process /usr/sbin/nginx -g daemon on; master_process on</span><br><span class="line">           └─<span class="number">30584</span> nginx: worker process</span><br></pre></td></tr></table></figure><p>看到 active (running) 表示 nginx 服务已经启动</p><h4 id="3-添加-nginx-配置文件"><a href="#3-添加-nginx-配置文件" class="headerlink" title="3.添加 nginx 配置文件"></a>3.添加 nginx 配置文件</h4><p>在 <strong>/etc/nginx/conf.d/</strong> 创建网站级配置文件 <strong>MingBlog.conf</strong>（.conf 后缀名一定要有）<br>文件内容见下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span> default_server;</span><br><span class="line">    listen [::]:<span class="number">80</span> default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># root /usr/share/nginx/html;</span></span><br><span class="line">    <span class="comment">#index index.html index.htm;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make site accessible from http://localhost/</span></span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    charset utf<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># max upload size</span></span><br><span class="line">    client_max_body_size <span class="number">75</span>M;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Django static</span></span><br><span class="line">    location /static&#123;</span><br><span class="line">        <span class="comment"># Django project's static files</span></span><br><span class="line">        <span class="comment">#expires 30d;</span></span><br><span class="line">        <span class="comment">#autoindex on;</span></span><br><span class="line">        <span class="comment">#add_header Cache-Control private;</span></span><br><span class="line">        alias /home/yym/workspace/MingBlog/static/;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">        <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">        <span class="comment"># try_files $uri $uri/ =404;</span></span><br><span class="line">        <span class="comment"># Uncomment to enable naxsi on this location</span></span><br><span class="line">        <span class="comment"># include /etc/nginx/naxsi.rules</span></span><br><span class="line">        root /home/yym/workspace/MingBlog;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span>;</span><br><span class="line">        uwsgi_read_timeout <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-uwsgi"><a href="#配置-uwsgi" class="headerlink" title="配置 uwsgi"></a>配置 uwsgi</h3><h4 id="1-安装-uwsgi"><a href="#1-安装-uwsgi" class="headerlink" title="1.安装 uwsgi"></a>1.安装 uwsgi</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install uwsgi</span><br></pre></td></tr></table></figure><h4 id="2-查看-uwsgi-服务状态"><a href="#2-查看-uwsgi-服务状态" class="headerlink" title="2.查看 uwsgi 服务状态"></a>2.查看 uwsgi 服务状态</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yym@iZ2zegis1iqwk7ddw7voqtZ:~ $ service uwsgi status</span><br><span class="line">● uwsgi.service - LSB: Start/stop uWSGI server instance(s)</span><br><span class="line">   Loaded: loaded (/etc/init.d/uwsgi; bad; vendor preset: enabled)</span><br><span class="line">   Active: active (exited) since Mon <span class="number">2017</span><span class="number">-07</span><span class="number">-17</span> <span class="number">21</span>:<span class="number">17</span>:<span class="number">00</span> CST; <span class="number">29</span>s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>看到 Active: active (exited) 表示服务已启动</p><h3 id="安装-MingBlog-网站运行环境"><a href="#安装-MingBlog-网站运行环境" class="headerlink" title="安装 MingBlog 网站运行环境"></a>安装 MingBlog 网站运行环境</h3><p><strong>问题</strong>：用原来的32位系统的 virtualenv 环境运行 uwsgi 会报以下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi: error <span class="keyword">while</span> loading shared libraries: libexpat.so<span class="number">.1</span>: cannot open shared object file: No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：根据 requirements.txt 在新系统中重装一下网站运行环境环境：   </p><h4 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualenv         <span class="comment"># 安装 virtualenv</span></span><br><span class="line">virtualenv --no-site-packages BLOG_VENV <span class="comment"># 用 virtualenv 创建网站运行环境</span></span><br><span class="line">source BLOG_VENV/bin/activate       <span class="comment"># 激活 virtualenv 环境</span></span><br></pre></td></tr></table></figure><p><strong>问题</strong>：mysql-python 安装时报错 EnvironmentError: mysql_config not found<br><strong>解决方法</strong>：<a href="http://www.cnblogs.com/xiazh/archive/2012/12/12/2814289.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiazh/archive/2012/12/12/2814289.html</a></p><h4 id="2-使用豆瓣源加速pip安装"><a href="#2-使用豆瓣源加速pip安装" class="headerlink" title="2.使用豆瓣源加速pip安装"></a>2.使用豆瓣源加速pip安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r ../BLOG_VENV_BACKUP/requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><p>新环境安装完毕，尝试运行 uwsgi，错误消失。</p><h4 id="3-修改博客系统的第三方库"><a href="#3-修改博客系统的第三方库" class="headerlink" title="3.修改博客系统的第三方库"></a>3.修改博客系统的第三方库</h4><p>参考：<a href="http://www.yangyingming.com/article/360/" target="_blank" rel="noopener">http://www.yangyingming.com/article/360/</a></p><h3 id="启动-MingBlog-网站"><a href="#启动-MingBlog-网站" class="headerlink" title="启动 MingBlog 网站"></a>启动 MingBlog 网站</h3><p>运行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yym@iZ2zegis1iqwk7ddw7voqtZ:~/workspace/MingBlog$ ./uwsgiserver.sh start</span><br></pre></td></tr></table></figure><h2 id="搭建-gogs-私人-git-服务器"><a href="#搭建-gogs-私人-git-服务器" class="headerlink" title="搭建 gogs 私人 git 服务器"></a>搭建 gogs 私人 git 服务器</h2><h4 id="1-搭建-gogs-服务"><a href="#1-搭建-gogs-服务" class="headerlink" title="1.搭建 gogs 服务"></a>1.搭建 gogs 服务</h4><p>可参考：<a href="http://yangyingming.com/article/383/" target="_blank" rel="noopener">使用 gogs 搭建私人 git 服务器 | nginx 添加反向代理到二级域名</a></p><h4 id="2-恢复-gogs-仓库数据"><a href="#2-恢复-gogs-仓库数据" class="headerlink" title="2.恢复 gogs 仓库数据"></a>2.恢复 gogs 仓库数据</h4><p>由于 gogs 仓库信息有一些记录在数据库上，且 gogs 的数据库当时没有设置自动备份，这就导致我现在只有原来的仓库数据，但是数据库中没有这些仓库匹配的信息。</p><p>如何恢复仓库可以参考： <a href="http://www.cnblogs.com/ilovewindy/p/6700867.html" target="_blank" rel="noopener">gogs: 如何恢复repository</a>，亲测有效，就是麻烦了点，希望 gogs 官方早点集成恢复本地仓库功能。</p><h2 id="恢复-cron-计划任务"><a href="#恢复-cron-计划任务" class="headerlink" title="恢复 cron 计划任务"></a>恢复 cron 计划任务</h2><p>放置 cron 计划任务清单的文件一般在 <strong>/var/spool/cron</strong> 下</p><p>将原来的清单中的任务复制到新清单中即可恢复</p><h2 id="恢复-IPProxyPool-代理池服务"><a href="#恢复-IPProxyPool-代理池服务" class="headerlink" title="恢复 IPProxyPool 代理池服务"></a>恢复 IPProxyPool 代理池服务</h2><p>按照 <a href="https://github.com/qiyeboy/IPProxyPool" target="_blank" rel="noopener">qiyeboy/IPProxyPool</a> 提示安装依赖，然后运行命令启动即可。</p><p>为了方便使用，我在这里将 python 运行环境用 virtualenv 集成到项目中，然后提交到 gogs 私人 git 服务器中。觉得安装依赖麻烦的也可以这么做。</p><h4 id="IPProxyPool-启动命令"><a href="#IPProxyPool-启动命令" class="headerlink" title="IPProxyPool 启动命令"></a>IPProxyPool 启动命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ~/workspace/IPProxyPool/IPPROXYPOOL_VENV/bin/python ~/workspace/IPProxyPool/IPProxy.py &gt; ~/workspace/log/IPProxyPool.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/390" target="_blank" rel="noopener">记录一次服务器重新部署的经历（网站、gogs和一些脚本）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>大数据报告：知乎百万用户分析</title>
      <link href="/2017/07/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%91%8A%EF%BC%9A%E7%9F%A5%E4%B9%8E%E7%99%BE%E4%B8%87%E7%94%A8%E6%88%B7%E5%88%86%E6%9E%90/"/>
      <url>/2017/07/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%91%8A%EF%BC%9A%E7%9F%A5%E4%B9%8E%E7%99%BE%E4%B8%87%E7%94%A8%E6%88%B7%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近用 python 爬虫抓取了知乎用户个人资料（公开信息），去重之后有300+万条记录，为了得到这些数据，还不小心跑崩了一台服务器…… 当然主要是配置太低。</p><p>手头有了数据也不能闲着，于是就有了这篇分析报告，这篇报告做了一些浅显的数据分析，主要目的是练练手，大家看个热闹，高手勿笑。</p><p><strong>数据量</strong>：3,289,329 人。</p><p><strong>数据采集工具</strong>：分布式 python 爬虫</p><p><strong>分析工具</strong>：ElasticSearch + Kibana</p><p><strong>分析角度包括</strong>：地理位置、男女比例、各类排名、所在高校、活跃程度等。<br><a id="more"></a></p><p><strong>注意</strong>：</p><ul><li>以下所有分析结果都基于我抓取到的这300万用户的个人信息，非权威分析，仅供参考。</li><li>数据抓取时间为2017年7月份，用户数据会随着时间推移而变化，所以该报告具有一定时效性。</li><li>知乎的用户个人资料很大程度上是不完整的，因为用户有权只填写部分信息，所以后面分析的时候会筛掉对应指标为空的用户。</li></ul><p>下面让我们看看知乎用户分布中有哪些有趣的现象（下面的图点击可以放大） ↓</p><h2 id="知乎的男女比例？"><a href="#知乎的男女比例？" class="headerlink" title="知乎的男女比例？"></a>知乎的男女比例？</h2><p>首先来看看知乎用户的男女比例，以当前样本数据统计的结果接近 <strong>1:1</strong>，其中男生偏多一些。（其实还有很大一部分性别不明的用户，被我略掉了 ╮(╯▽╰)╭）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/e5ceffab-2afb-44d8-84ef-c602ab5cf17b.png" alt=""></p><p><strong>蓝色为男生，红色为女生</strong>。具体数据为：  </p><p>男生：1,202,234 人，占 51.55%<br>女生：1,129,874 人，占 48.45%</p><h2 id="知乎用户都是哪里人？"><a href="#知乎用户都是哪里人？" class="headerlink" title="知乎用户都是哪里人？"></a>知乎用户都是哪里人？</h2><p>再来看看<strong>全国（全球？）都有哪些地方的人在玩知乎</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d67b117f-1363-4489-b3f8-8b2bb0770ea2.png" alt=""></p><p>由上图可以看到，<strong>知乎用户中一线城市用户占较大的比重</strong>，北上广深皆在词云的中心位置（文字越大，比重越大）。我们再来看看具体的排名（前十名）：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/79272e4b-2483-4936-afd5-afbd7f21cc71.png" alt=""></p><p>知乎用户居住地前十名依次是：<strong>北京、上海、杭州、成都、南京、武汉、广州、深圳、西安、重庆</strong>。</p><p>你可能发现了Y坐标里每座城市的用户数并不多，这是因为有大概260万的知乎没有填写“居住地”这一栏~ 以下分析也有可能出现用户没有填写某一栏信息的情况，我会把这些用户忽略掉，以保证展示图表的准确性。</p><h2 id="知乎的职业分布？"><a href="#知乎的职业分布？" class="headerlink" title="知乎的职业分布？"></a>知乎的职业分布？</h2><p>以下显示<strong>知乎主流职业</strong>，同样根据知乎用户个人信息里填写的职业为准：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/7573ec55-bcf2-40c7-b7dc-34d3d117b576.png" alt=""></p><p>由上图可以看到，知乎用户中<strong>学生用户占据多数</strong>，其它的比如产品经理、程序员、运营、HR数量也不少。我们看一下具体的排名（前十名）：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/5c22df3e-c26f-49f5-a6bd-2197e9db439d.png" alt=""></p><p>由上图可以看到，知乎用户中“学生”的比重独占鳌头，我们把“学生”去掉，来看看<strong>正经些的知乎职业排名</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/dced3ee9-f009-420a-b96a-4b7c234ce5c6.png" alt=""></p><p>去除学生后，知乎主流职业比重从大到小依次是（前十名）：<strong>产品经理、自由职业、程序员、工程师、设计师、腾讯、教师、人力资源（HR）、运营、律师</strong>。可以看到，除了一些互联网公司的常见职位外，教师和律师用户在知乎中也占据不小的比重。</p><p>下面我们结合 <strong>性别</strong> 和 <strong>居住地</strong> 来分析一下知乎的主流职业。</p><p><strong>知乎主流职业的性别分布</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/33c3fb3c-aa80-4af4-8aa4-b05fa58bd6a7.png" alt=""></p><p>上面这张饼图的内圈表示各主流职业在前十名中所占的比重，外圈表示该职业从业者中的男女比例，蓝色为男性，红色为女性。我们再用一张直方图来表示：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/58d76873-aee3-4b83-b068-c22916c88937.png" alt=""></p><p>同样蓝色代表男性，红色代表女性，从左到右的职业在知乎中的数量依次下降。可以看到，<strong>知乎大部分主流职业中主要为男性占主导</strong>。前 10 名的主流职业中有 8 个职业的男性从业者比女性多，其中以 <strong>程序员</strong> 的男女比例差距最为悬殊（-_-|||），以 <strong>设计师</strong> 男女比例差距最小，看来设计师从业人员男女比例较为均衡。其它的，比如产品经理、自由职业者、律师中，均为男性从业者多于女性。而前 10 名剩下的 2 个职业——<strong>教师、人力资源（HR）</strong>——女性从业者要多于男性，其中以 <strong>人力资源（HR）</strong> 男女比例差距最为悬殊，<strong>教师</strong>的男女比例虽不那么夸张，但女性也远远多于男性（也许是因为男性教师不怎么上知乎？）。</p><p>看完了知乎各职业的性别分布，我们再用一张热力图，来观察<strong>知乎主流职业（前五名）在各个地区的分布情况</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/a66c6cb9-0203-4bec-85f6-0c766a23faba.png" alt=""></p><p>这里我为了展示方便，<strong>去掉了产品经理</strong>，你只需要知道产品经理在各地人数都是最多的…… 不明白知乎上怎么这么多产品经理，可能是为了方便宣传他们的产品？</p><p>从上图可以看出，知乎各主流职业大部分集中在<strong>北京和上海</strong>两地，更准确地说，大部分都集中在北京，但是<strong>人力资源（HR）</strong>是个例外，他们更多集中在上海。我们再来看看其他职业，<strong>程序员</strong>分布最多的城市依次是：<strong>北京、上海、广州、杭州、厦门</strong>。北京占得比重最大，简直绿的发黑，看来北京是程序员的天堂？其中深圳没有上榜，让我很奇怪。<strong>设计师</strong>分布最多的城市依次是：<strong>北京、上海、杭州、深圳、武汉</strong>。设计师的地区分布比较平均，各个城市都有一定数量。</p><h2 id="知乎的高校用户"><a href="#知乎的高校用户" class="headerlink" title="知乎的高校用户"></a>知乎的高校用户</h2><p>知乎中学生用户占很大的比重，我们来看看<strong>他们都来自哪些学校</strong>！词云中字体越大，表示所占比重越大。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/efa772e2-456c-4209-8428-417a339cacb8.png" alt=""></p><p>我们再列出详细的比重排名：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/aed3a33c-cbf2-4dcd-bc69-87646e044165.png" alt=""></p><p>以上展示的结果不一定准确，可能有很大一部分学生用户没有填写自己的学校。仅从上图可以看出，知乎活跃高校用户从大到小依次是：<strong>浙江大学、武汉大学、华中科技大学、中山大学、北京大学、上海交通大学、复旦大学、南京大学、四川大学、清华大学</strong>。</p><p>既然分析到学校了，我们顺便看看<strong>各高校的男女比例</strong>，嘿嘿。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/c31c5be7-32ff-4a03-9e55-d33ff82df7c5.png" alt=""></p><p>发现一个有意思的现象，各高校大部分都是男生在玩知乎…… </p><p>再看一下<strong>哪些高校在知乎获得的赞数最多</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/01d6e457-5b2f-4d5c-8b4a-0f8685275b92.png" alt=""></p><p>第一是同济大学，土木工程，恩，这是哪位大佬撑起来的；第二是华南理工大学，软件工程，这个我知道，轮子哥是皇家理工的嘛；第三，重庆第一工程尸培训基地，恩？？？这是什么鬼（黑人问号）；继续往后看，恩……？？家里蹲大学？？！！还有一个兰州大学，牛肉面工艺专业？？？WHAT？？！！∑(っ°Д°;)っ</p><p>知乎大佬都这么调皮吗……</p><p>这个图似乎不太准，大家忽略就好……</p><p>我们再来看看<strong>各地区有哪些高校是知乎重度用户</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/16c52d52-b175-4b34-93a7-6f54314a84fa.png" alt=""></p><p>北京玩知乎最多的高校依次是：<strong>北京大学、北京邮电大学、中国传媒大学、中国人民大学、清华大学</strong>。<br>上海玩知乎最多的高校依次是：<strong>上海交通大学、复旦大学、同济大学、上海大学、上海财经大学</strong>。<br>杭州玩知乎最多的高校依次是：<strong>浙江大学、浙江工业大学、杭州电子科技大学、浙江大学,计算机科学、浙江大学,软件工程</strong>。浙江大学是重度用户啊……<br>成都玩知乎最多的高校依次是：<strong>电子科技大学、四川大学、西南交通大学、电子科技大学,软件工程、四川师范大学</strong>。<br>广州玩知乎最多的高校依次是：<strong>中山大学（SYSU）、华南理工大学（SCUT）、华南农业大学(SCAU)、广东外语外贸大学、广东工业大学</strong>。  </p><p>我们再来看一下<strong>知乎各高校用户的活跃程度</strong>，按每个学校用户回答问题的总数排名：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/0ef9b198-ad67-46e9-86aa-ce95d779195f.png" alt=""></p><p>排名依次是：<strong>武汉大学、浙江大学、中山大学、华南理工大学、北京大学、华中科技大学、复旦大学、上海交通大学、西北农林科技大学</strong>。</p><p>好了，高校分析告一段落，我们再来看看知乎用户的各类排名。</p><h2 id="知乎赞数最多的100位大V"><a href="#知乎赞数最多的100位大V" class="headerlink" title="知乎赞数最多的100位大V"></a>知乎赞数最多的100位大V</h2><p>下图中词云的字越大，表示收到的赞数越多：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/0162a585-5166-4ec9-8783-985e142f5487.png" alt=""></p><p>我们再来一张直方图，配合着看：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/5c52ea6b-ef1b-469b-a4ff-d8af1e0a5e6e.png" alt=""></p><p><strong>张佳玮</strong>大大无可争议的获得第一名，360+万赞，恐怖。其次是<strong>马前卒、唐缺、vczh、肥肥猫、朱炫、Seasee Youl、ze ran、鬼木知、豆子</strong>。知乎获赞总数前五名有两位都是作家（张佳玮和唐缺），看来作家在知乎回答问题获赞方面还是很吃香，果然表达能力是观点获得认可的一个重要支撑 。</p><h2 id="知乎关注者最多的100位大V"><a href="#知乎关注者最多的100位大V" class="headerlink" title="知乎关注者最多的100位大V"></a>知乎关注者最多的100位大V</h2><p>下图词云的字越大，表示关注者越多，看看有没有你熟悉的大V 呢？：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/7dbe042e-1919-4206-b1e4-e2c27b6350cc.png" alt=""></p><p>同样我们配合着一张直方图来看：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/659c517c-1488-4f45-96aa-1ad3c3452b98.png" alt=""></p><p>知乎关注人数最多的前10位大V依次是：<strong>张佳玮、李开复、黄继新、周源、张亮、张小北、李淼、朱炫、葛巾、田吉顺</strong>。这些是知乎真正的大V，关注者数量极多。关注者最多的张佳玮有137万粉丝（抓取时），他的粉丝还在不断上涨，到现在已经有138万粉丝。关注者最少田吉顺也有57万粉丝，轮子哥（vczh）稍微少一些，排在第11位。</p><h2 id="知乎回答问题最多的100位大V"><a href="#知乎回答问题最多的100位大V" class="headerlink" title="知乎回答问题最多的100位大V"></a>知乎回答问题最多的100位大V</h2><p>这些大V在知乎很活跃…… 下图词云文字越大，表示回答问题数量越多。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/e331d138-be36-4397-8e40-804b3915ee61.png" alt=""></p><p>具体的排名为：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/25e2b7aa-1256-497a-b700-ea51f585944a.png" alt=""></p><p>知乎回答问题数最多的10位大V从大到小依次为：<strong>vczh、李东、赵钢、另一只袜子、四海之内、M3小蘑菇、kun yu、白猫转转风、yskin、肛里拉出个电锯</strong>。微软的工作貌似很闲，看轮子哥（vczh）整天刷知乎……</p><p>我们再来加上这几位用户在知乎的获得的赞数，看看<strong>“回答问题的数量”</strong>和<strong>“获得的赞数”</strong>之间有没有什么联系：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/887a4afe-7f93-4e54-92a2-911f45801447.png" alt=""></p><p>由上图我们可以粗略的得出结论，<strong>回答问题的数量和获得赞数的关系没有很大</strong>。上图中只有 kun yu 和 vczh 回答问题的数量和获赞数基本持平，榜单前十名的其它用户获得赞数虽然也不少，但和他们回答问题数量的排名比起来，还不在一个量级上。这从侧面也说明了一个问题，<strong>回答问题的质量更加重要，某些高质量的会更容易吸引用户点赞</strong>。</p><h2 id="知乎参加live最多的100位大V"><a href="#知乎参加live最多的100位大V" class="headerlink" title="知乎参加live最多的100位大V"></a>知乎参加live最多的100位大V</h2><p>我们再来看一个有意思的统计，<strong>知乎参加 live 最多的100位用户</strong>，以及他们最多参加过多少场 live。（live 是知乎推出的一种类似于直播的问答形式，大V开一场 live，分享他所在领域的知识，用户买门票参与 live，是一种知识变现的方式）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/00d0a022-99a8-4fb8-a16c-cd63c525e6b5.png" alt=""></p><p>再来看看他们最多参加过多少场 live：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/cf0f7836-72c1-4172-ab28-c3bb671b6f9c.png" alt=""></p><p>最多的那个大V竟然参加过 1600+ 场 live，真的很有精力和金钱，哈哈。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>以上，便是以知乎300万用户个人资料为样本，做出的简单数据分析。</p><p>大家觉得还可以挖掘哪些有用的信息呢？</p><p>接下来会发一篇爬虫的源码剖析，有时间的话会继续抓取其它有用的数据，做成数据报告发上来。另外我会尝试下把这次抓到的数据做成功能集成到微信公众号中，如果你有什么好玩的点子也可以推荐给我。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/be534b20-57c0-492f-96c0-043fa6ea7541.jpg" alt=""></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/389" target="_blank" rel="noopener">知乎百万用户大数据分析报告</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 6 月份阅读记录</title>
      <link href="/2017/07/12/2017%20%E5%B9%B4%206%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/07/12/2017%20%E5%B9%B4%206%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/8d924dba-c0db-4b2&lt;!---more---&gt;5-a95f-773a9ba3be26.jpg" alt=""></p><p>##《1988：我想和这个世界谈谈》<br><img src="http://yangyingming.com/uploads/markdownx/2017/6/6f28290c-334e-46bf-8ae0-9f394b72508a.jpg" alt=""></p><p><strong>标签</strong>：韩寒、青春小说</p><p>上个月读了两本国外翻译来的书，文字晦涩，读起来艰辛无比。于是这个月翻阅起韩寒的《1988》文字时，心情格外舒畅。</p><p>现在才读韩寒的书似乎有慢半拍的嫌疑，不过几年前心里实在没有读他的书的由头。直到看过韩寒拍摄的电影《后会无期》后，才冒出读一读这本据说和电影情节十分重合的韩寒早年小说的念头。</p><p>回到《1988》，小说表面上的风格轻松文艺又到处流淌着韩寒式的幽默，这种幽默隐藏在看似平淡的行文之中，常能让你不经意的笑出声来。小说的描述的内容又是偏灰暗的，平淡的文字讲述的是一个又一个悲伤地故事，不管是妓女娜娜，还是主角的朋友甚至他的童年伙伴们……结局都不能说好，他们都是生活这柄达摩克里斯之剑下的牺牲品，正如那只温水中的青蛙，生活就是猛然扣在头顶的那个锅盖，幽默背后你总能找到一丝对现实的讽刺。</p><p>这里不得不说说《1988》对童年的描写。</p><p>《1988》中穿插着主角对孩童时期的回忆，那些回忆淡漠又真实存在，仔细想想，有些画面和感觉，似乎在自己的童年中曾经有过。</p><p>这本书竟能让我在读的时候频频想起童年。</p><p>在我小时候，楼下是一个花园，有树，有草丛，有小径，最重要的是，还有一群玩伴。</p><p>我们像《1988》中描写的一样，常常扮演着当时在热播的动画中的人物。</p><p>玩过弹珠、陀螺、四驱车、卡牌、悠悠球、枪战……</p><p>这些玩伴，大部分我已想不起名字，甚至记不清样貌，</p><p>但我知道，他们伴我度过了最重要的童年时光。</p><p>《1988》，写得接地气。仅回忆这部分，描写的是我们这代人的童年，读起来十分有共鸣。</p><p>在看这本书的过程中，我时常戴着耳机在路上听有声的《1988》，小说的风格使我很有听故事的感觉。</p><p>小说充斥着回忆杀，每一段回忆互相关联，仿佛脑海中的一叶叶扁舟，也许它们正适合在旅途中被想起，因为同样在漂泊，这可能就是公路片的魅力之一。</p><p>最后贴上《后会无期》中妓女苏米和江河老师初次见面时的音乐：</p><blockquote><p>《Que Sera Sera》<br>（世事不可强求）<br>When I was just a little girl<br>当我还是个小女孩<br>I asked my mother, What will I be<br>我问妈妈，将来我会变成什么样子呢<br>Will I be pretty, will I be rich<br>会漂亮吗，会富有吗<br>Here’s what she said to me<br>她对我说<br>Que Sera Sera<br>世事不可强求<br>Whatever will be, will be<br>顺其自然吧<br>The future’s not ours to see<br>我们不能预见未来<br>Que Sera Sera<br>世事不可强求<br>What will be will be<br>顺其自然吧<br>When I grew up and fell in love<br>当我长大并恋爱了<br>I asked my sweetheart, What lies ahead<br>我问我的心上人，我们将来会怎么样呢<br>Will we have rainbows day after day<br>生活每天都美好吗<br>Here’s what my sweetheart said<br>我的爱人对我说<br>Que Sera Sera<br>世事不可强求<br>Whatever will be, will be<br>顺其自然吧<br>The future’s not ours to see<br>我们不能预见未来<br>Que Sera Sera<br>世事不可强求<br>What will be will be<br>顺其自然吧<br>Now I have children of my own<br>现在我有了自己的孩子<br>They ask their mother, What will I be<br>他们问我，将来我孩子会变成什么样子呢<br>Will I be handsome, will I be rich<br>会英俊吗，会富有吗<br>I tell them tenderly<br>我轻声地回答<br>Que Sera Sera<br>世事不可强求<br>Whatever will be, will be<br>顺其自然吧<br>The future’s not ours to see<br>我们不能预见未来<br>Que Sera Sera<br>世事不可强求<br>Que Sera Sera<br>世事不可强求<br>Whatever will be will be<br>顺其自然吧<br>The future’s not ours to see<br>我们不能预见未来<br>Que Sera Sera<br>世事不可强求<br>What will be will be<br>顺其自然吧<br>Que Sera Sera<br>世事不可强求  </p></blockquote><p>推荐指数：★★★✩</p><p>##《了不起的盖茨比》<br><img src="http://yangyingming.com/uploads/markdownx/2017/6/f0f4fda2-7177-4c23-b0ff-985ee33ff9c9.jpg" alt=""></p><p><strong>标签</strong>：爱情、名著</p><p>盖茨比是一个充满想象力，活力和幻想的人，他用半生的时光爱一个女人，他幻想着他们之间是世界上最浪漫的爱情，并单方面投入远超常人的热情。</p><p>盖茨比的伟大之处，在于他对爱情至诚的投入。一个人的真诚，是这是世界上最宝贵的东西。</p><p>黛西只是他内心美好的一个具象化的对象，他把世界上所有的好都映射到这个女人身上，认为与她在一起就是上天最好的恩赐。但黛西只是个俗人，是一个经历过滚滚红尘的女子，她的心已经被现实一推再推，塑造成一个麻木不仁的样子，她配不上盖茨比的爱。盖茨比看不到这一点，他一厢情愿的认为找到她追回她与她携手一生就是他余生的最终归宿。两个人根本上的不同，为盖茨比的悲剧埋下一个伏笔。</p><p>这场悲剧的魅力，就在于这种至诚被污浊的现实毁灭的那一刻。钻石般的心，终究抵不过现实的凿穿。</p><p>我本心向明月，奈何明月照沟渠。</p><p>多少伟大在现实中被践踏。</p><p>说说翻译，巫宁坤的翻译流传较广，属于那种按部就班、挑不出太大毛病的翻译风格，翻译的力度也最贴合原著，不过这也导致有些句子读起来十分晦涩，难免有不通顺的感觉。其它版本虽然没有读，但也略作了解，译者大多做了自己的改动，使句子读起来更加通顺优美，但可能会偏离原著的感觉。</p><p>知乎上看到有人提出一个评估《盖》译本翻译功力的方法——看经典的最后一段的翻译，如果翻译的和你的口味，便可以选择一读。当然最好的办法还是读原著，毕竟外国文学里的《红楼梦》，文字优美，有条件的可以读一读。（英语渣渣飘过）</p><p>推荐指数：★★★</p><p>##《无人生还》<br><img src="http://yangyingming.com/uploads/markdownx/2017/6/eb50eef2-903c-45eb-b15e-e52624c0a155.jpg" alt=""></p><p><strong>标签</strong>：阿加莎·克里斯蒂、侦探、悬疑</p><p>近来听说同学去看了《无人生还》的话剧，恰好在书店看到阿加莎•克里斯蒂的原著小说，于是生出一读的想法。</p><p>书的腰封上这么介绍阿加莎克里斯蒂：“无可争议的侦探小说女王，侦探文学史上最伟大的作家”，鼎鼎大名。</p><p>小说不长，故事直奔主题，没有废话，叙事节奏紧张，看起来很过瘾，你几乎可以一口气读完它。小说讲述了背景不同性格禀异的十个人因为邀请共同前往一座孤岛。在岛上一个接一个被神秘凶手杀死的故事，事实证明，他们皆是有罪之人，死亡的顺序和死法也和一首童谣如出一辙，最后无人生还……</p><p>用了几天时间断断续续读完小说，心情时常随着情节跌宕而起伏，看角色一个又一个的死去，看他们在恐怖的气氛下慌张不已互相猜忌，却阻止不了神秘凶手接二连三的行凶，配合上孤岛，暴雨，老宅，实在很有画面感啊有木有！电影一定要去看一下！话剧考虑一下，毕竟不便宜……</p><p>看的过程中一直在跟着小说的节奏走，真的没猜出来谁是凶手，也一直被凶手是如何行凶的这个问题困扰。直到我抱着很大的疑惑和期待看到最后一章——凶手的自白，说实话，有些失望。凶手行凶的过程不够严谨，很多手法只要目标人物稍微偏离预定的轨道，便不一定能成功，换句话说，有些经不起推敲，这多少使作品失去了一些真实性和震撼感。</p><p>整部小说结构是这样的：前期凶杀凶杀凶杀……这期间几乎没有推理，也就是说剧情的推动完全靠人物之间的互动，你只需要看着角色如热锅上的蚂蚁一般一个接一个被踩死，直到凶手 Beyond Godlike。后期…小说只用了一章的篇幅揭露真相，我们只能在这一篇章里释放我们的大脑。也就是说，整部小说几乎没有推理，但小说画面感极强，所以总结一下：这部小说也许是一部好的艺术作品，但个人认为它不是一部好的侦探小说。</p><p>即便如此，这也是一部十分优秀的小说，小说质量没的说，闻名世界的侦探大师的名篇，看完不会让你有浪费时间的感觉。</p><p>推荐指数：★★★✩</p><p>##《阳光下的罪恶》<br><img src="http://yangyingming.com/uploads/markdownx/2017/6/267a36d5-fea3-4ea0-9660-c3a40c4081b7.jpg" alt=""></p><p><strong>标签</strong>：阿加莎·克里斯蒂、侦探、悬疑</p><p>阿加莎·克里斯蒂又一名篇，路过书架看到这本书便觉得书名眼熟，于是翻开来看。小说不长，总共才200页，分了三次看完。</p><p>小说讲述了一场发生在度假小岛上的谋杀事件，被杀的是一名颇具魅惑力的女演员，属于那种特别吸引男人注意的女人。谋杀她的人就隐藏在来度假的人群当中，任何人都有谋杀她的嫌疑，然而作案可能却被一个又一个排除。老侦探波特通过拼图一般的推理还原，独辟蹊径找到了凶手作案的手法。</p><p>说实话这部小说看起来着实没什么意思，除了叙事流畅，其它体验不佳。前期几乎没有推理过程，只知道老波特在寻找蛛丝马迹，而且不断有所获，但读者一直被蒙在鼓里，不知道他到底在弄什么玄虚，我一度想放弃阅读，因为读者在这期间几乎得不到任何阅读的快感……读者到了最后一章才在老波特的长篇自述下明白凶手作案的手法以及破案思路，由于篇幅过少，给人一种破案过程一蹴而就的感觉，揭露真相本是侦探小说最令人激动的一部分，但这部小说破案氛围却营造的不佳。</p><p>看完这部小说，对克里斯蒂的作品有些失望，接下来还会继续看一些她的作品（谁让书店里摆了一书架的克里斯蒂），但应该不会很频繁了。</p><p>推荐指数：★★✩</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/382" target="_blank" rel="noopener">2017 年 6 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>windows 中永久修改环境变量的三种方法</title>
      <link href="/2017/07/02/windows%20%E4%B8%AD%E6%B0%B8%E4%B9%85%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2017/07/02/windows%20%E4%B8%AD%E6%B0%B8%E4%B9%85%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>##测试环境<br>windows 7 x64 位旗舰版</p><p>##需求描述<br>有一个简单的需求：</p><p>写一个批处理，将当前目录追加到 path 环境变量最后，使其永久生效。</p><p>我找到如下了三个解决方案<br><a id="more"></a><br>：</p><p>##方法一：使用 setx.exe<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off</span></span><br><span class="line">set cur_path=%cd%</span><br><span class="line"></span><br><span class="line">echo 添加 path 环境变量……</span><br><span class="line">.\setx.exe /m <span class="string">"path"</span> <span class="string">"%path%;%cur_path%"</span></span><br></pre></td></tr></table></figure></p><p>setx.exe 的使用可以参考另一篇博文：<a href="http://yangyingming.com/article/30/" target="_blank" rel="noopener">python环境变量自动配置脚本（setx使用）</a></p><p>##方法二：修改注册表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off</span></span><br><span class="line">set cur_path=%cd%</span><br><span class="line"></span><br><span class="line">echo 添加 path 环境变量……</span><br><span class="line">REG ADD <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment"</span> /v Path /t REG_SZ /d <span class="string">"%path%;%cur_path%"</span> /f</span><br></pre></td></tr></table></figure></p><p>##方法三：使用 wmic<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off</span></span><br><span class="line">set cur_path=%cd%</span><br><span class="line"></span><br><span class="line">echo 添加 path 环境变量……</span><br><span class="line">wmic ENVIRONMENT where <span class="string">"name='path' and username='&lt;system&gt;'"</span> set VariableValue=<span class="string">"%path%;%cur_path%"</span></span><br></pre></td></tr></table></figure></p><p>##注意<br>在使用以上三种方法追加 path 环境变量的时候有一个坑，当前的 %path% 环境变量中 <strong>不能带有双引号 “</strong>，否则会与命令中的双引号 “ 冲突，报出莫名其妙的错误。比如无效语法等等。</p><p>##三种方法的优缺点</p><p>方法一可以立即生效，重新打开一个 cmd 即可查看修改后环境变量；方法二、三需要注销或者重启系统才能生效，使用命令重启 explorer.exe 也无法使其立即生效。</p><p>但是方法一有个缺点，我在测试机器上把 setx.exe 从 system32 目录复制到其它目录后，使用 当前目录的 setx.exe 失效，不明白是为什么。因为有些机器没有自带 setx.exe ，所以方法一不具有普适性。</p><p>##后记<br>最后采用了方法二，比较简单粗暴，依赖少。很遗憾没有找到一个完美的解决方案，我想是因为机制设计的时候有缺陷，万恶的 windows 批处理。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/386" target="_blank" rel="noopener">windows 中永久修改环境变量的三种方法</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>win7 使用 mstsc 访问 win10 远程桌面</title>
      <link href="/2017/06/27/win7%20%E4%BD%BF%E7%94%A8%20mstsc%20%E8%AE%BF%E9%97%AE%20win10%20%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
      <url>/2017/06/27/win7%20%E4%BD%BF%E7%94%A8%20mstsc%20%E8%AE%BF%E9%97%AE%20win10%20%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>##前言<br>mstsc 是 windows 系统自带的远程桌面工具，有了它可以很方便连接内网甚至外网的主机。</p><p>近期在公司写代码的时候有一个特殊需求，因为台式机（win7）内存不足，使用 webstorm 太卡，于是打算利用一下放在我旁边暂时没人用的高配 win10 笔记本。用了几次，感觉笔记本屏幕太小，又因为只提供了 HDMI 接口，所以无法将笔记本直接连接到大屏显示器。</p><p>于是今天琢磨起远程桌面的主意，<strong>目的</strong> 是用台式机的 win7 系统连接笔记本的 win10 系统，这两台机器都连接到公司的 wifi。（尝试过 qq远程桌面，走的外网，延迟太高；teamviewer 由于我手贱，试用期已过，暂时没找到激活的方法）</p><p>废话不多说，介绍一下 win7 访问 win10 远程桌面的方法。<br><a id="more"></a></p><p>##步骤</p><p>###win10 远程设置</p><p>1.打开 <strong>win10 我的电脑 –&gt; 右键 –&gt; 属性</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/696a7cc3-a5a9-4f29-81bb-44a6e3f4cd1d.png" alt=""></p><p>2.点击 <strong>远程设置</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/c71b0380-5989-48a8-9a4b-5a98056582ea.png" alt=""></p><p>3.按图设置好 <strong>1) 和 2)</strong>，然后点击 <strong>选择用户</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/49959df9-b6e8-4fa5-8ef0-fd61a4a427de.png" alt=""></p><p>4.这时候 <strong>允许访问的列表</strong> 是空的，点击 <strong>用户账户</strong>，添加一个用于远程访问的用户</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/40bfa966-bbb2-4a57-b18a-07c01ed55d49.png" alt=""></p><p>5.点击 <strong>管理其他账户</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/a19e461a-a20d-4109-9b22-f6b18030434b.png" alt=""></p><p>6.点击 <strong>添加用户账户</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/6f78b879-cf53-4495-9092-f384803f3cfb.png" alt=""></p><p>7.点击 <strong>不使用 Microsoft 账户登录</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/0bbd4805-f4a0-40dc-8712-e63cbe182d34.png" alt=""></p><p>8.点击 <strong>本地账户</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/76de13c1-2893-4e9e-9d1d-3e4fc2f16b77.png" alt=""></p><p>9.填写 <strong>新账户信息</strong>，然后点击下一步。注意：最好填写密码。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/edadb1a1-ef8d-44f2-b2df-a83855d433b7.png" alt=""></p><p>10.这个时候，账户列表里会显示我们刚才创建的账户，<strong>这个账户将用于远程访问</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/e09e4f2d-405b-4ee7-bff5-0f1f643d2c76.png" alt=""></p><p>11.回到远程桌面窗口，<strong>添加新用户</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/2a87bb3b-b324-4e21-a198-0e5f8107ee5d.png" alt=""></p><p>12.<strong>填写</strong> 刚刚创建的用户名，点击 <strong>确定</strong></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/e8ce28cb-6e59-4392-9865-264a531cfbe2.png" alt=""></p><p>13.允许访问的列表中多出了我们创建的用户，点击确定。这个时候我们就可以用刚刚创建的账户进行远程桌面连接了</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/059ff953-b95e-4fb8-ad96-2780a8b964c0.png" alt=""></p><p>###win7 访问 win10 远程桌面</p><p>1.进入 win7 系统，按住快捷键 <strong>Win + R</strong> 打开运行，输入 <strong>mstsc</strong>，回车</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/8fa674cd-fa1d-4841-b319-80fa61dbdb1d.png" alt=""></p><p>2.输入<strong>远程主机 IP 地址</strong>，单击确定。对我来说，输入的是内网地址，因为台式机和笔记本在同一内网中</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/975e40da-b9c0-4717-9039-1e5e9cd7f9a5.png" alt=""></p><p>3.输入我们在 win10 中创建的用于远程访问的 <strong>账户密码</strong>，点击确定</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/44a25b27-29cd-4ae2-9891-bd8b031169f5.png" alt=""></p><p>4.等待一会儿，会进入远程 win10 电脑上的桌面</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/da754de7-91f0-4dd7-b6e7-4d8316d243ad.png" alt=""></p><p>5.win7 访问 win10 远程桌面成功</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/53777e3c-ff44-4567-b886-bc70115242ab.png" alt=""></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/385" target="_blank" rel="noopener">win7 使用 mstsc 连接 win10 远程桌面</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>神器清单</title>
      <link href="/2017/06/21/%E7%A5%9E%E5%99%A8%E6%B8%85%E5%8D%95/"/>
      <url>/2017/06/21/%E7%A5%9E%E5%99%A8%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>##teamviewer<br>安装的时候不要选择“商业用途”，一定要选择“个人用途”！！否则无法免费。</p><p>##htop - top的升级版<br><a href="http://www.178linux.com/4394" target="_blank" rel="noopener">htop使用详解</a></p><p>##nethops - 网络监控工具，统计网络带宽使用率<br><a href="https://segmentfault.com/a/1190000000470060" target="_blank" rel="noopener">NetHogs 实时检测网络流量</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/384" target="_blank" rel="noopener">神器清单<br><a id="more"></a></a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 gogs 搭建私人 git 服务器 | nginx 添加反向代理到二级域名</title>
      <link href="/2017/06/19/%E4%BD%BF%E7%94%A8%20gogs%20%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%20git%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%7C%20nginx%20%E6%B7%BB%E5%8A%A0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%88%B0%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
      <url>/2017/06/19/%E4%BD%BF%E7%94%A8%20gogs%20%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%20git%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%7C%20nginx%20%E6%B7%BB%E5%8A%A0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%88%B0%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/6/62d6f311-af73-489a-8975-a69298ebfb82.png" alt=""></p><p>##前言</p><p>最近一直在云主机的 linux 系统上开发，久而久之也积累了一些代码，另外有些个人文件夹需要在不同电脑上增量编辑，比如在公司和实验室的电脑上共同维护自己的工作日志，于是需要一个类似于 github 的网站统一管理这些私人的代码和文件夹。</p><p>在这里给大家提供一个搭建 <strong>私人 git 服务器</strong> 的思路，我选择的是 gogs。<br><a id="more"></a></p><p>##什么是 gogs？<br>它是一个基于 web 页面的可视化 git 服务器，相当于一个有无限私有仓库的 github，可以帮助你管理你的私有代码仓库。</p><p>简单来说，有些代码你不想放到 github 上的公有仓库给别人看，私有仓库又要收费，于是自己搭建 git 服务器就是一个不错的选择。</p><p>##为什么使用 gogs？</p><p>裸的 git 服务器很容易搭建，可以参照廖雪峰的博客有关 git 的最后一节，缺点是没有web界面，不便于管理。</p><p>提供 web 界面的开源 git 服务器，知名的有：<strong>gitlab、bitbucket 以及 gogs</strong>。</p><p>为什么使用 gogs 呢？</p><p>在这三个 git 服务器中我主要尝试了 gitlab 以及 gogs，最开始考虑的是 gitlab，原因是它在这个领域中知名度很高，功能比较齐全，项目迭代速度快，可靠性高。于是尝试搭建，但没多久便发现他们的开发团队只提供 64 位的安装包，也就是说只能安装到 64 位操作系统上。WTF，装了这么多年软件，遇到过只支持32位不兼容64位的软件，只支持64位的还是第一次碰到，我一个用 32位 ubuntu VPS 的渣渣只能放弃这个方案了 ╮(╯▽╰)╭</p><p>然后便在不知道哪里的一篇文章上看到 gogs，了解了一下，gogs 是用 golang 开发的一款开源 git 服务器，小巧灵活，轻量稳定，目前已经有不少个人开发者和公司在使用，在写这篇博文的时候最新发布的版本才迭代到 0.11.19，可谓潜力巨大。</p><p>相对于繁重臃肿的 gitlab，轻量级的 gogs 更适合个人开发者。</p><p>##准备工作</p><ol><li><p>一台 云主机/VPS/远程主机，总之要有独立的 IP地址可供远程访问</p></li><li><p>独立域名，比如：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">www.yangyingming.com</a></p></li><li><p>软件：nginx（反向代理）、mysql（管理用户等）</p></li></ol><p>##搭建 gogs 流程</p><p>gogs 一个最显著的特点便是 <strong>部署十分方便</strong>。</p><p>这里是 gogs 的<strong>下载地址</strong>： <a href="https://dl.gogs.io/" target="_blank" rel="noopener">官方网站</a> | <a href="https://github.com/gogits/gogs/releases" target="_blank" rel="noopener">github</a>。</p><p>首先要在远程主机上 <strong>创建一个新的用户 git</strong>，用于放置 gogs 项目文件以及启动 gogs。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:~$ useradd git</span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:~$ passwd git</span><br></pre></td></tr></table></figure><p>进入 git 用户目录，生成 ssh 密钥：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>下载安装包：我在 github 上下载了编译过的二进制安装包 <strong>linux_386.tar.gz</strong>，版本是 0.11.19，下载到本地后用 WinSCP 的 FTP 服务把安装包传送到我的远程主机（VPS）上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ ls</span><br><span class="line">linux_386.tar.gz</span><br></pre></td></tr></table></figure><p>解压安装包 linux_386.tar.gz，解压之后会多出来一个 gogs 目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ tar -zxvf linux_386.tar.gz</span><br><span class="line">……</span><br><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ ls</span><br><span class="line">gogs  linux_386.tar.gz</span><br></pre></td></tr></table></figure></p><p>这个时候 gogs 其实已经可以使用 <figure class="highlight plain"><figcaption><span>web``` 启动了，但是我们还要准备一下 mysql 数据库，以支持 gogs 的正确运行，有两个工作要做：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 在 mysql 中创建 gogs 数据库 </span><br><span class="line">2. 在 mysql 中创建 gogs 用户</span><br><span class="line"></span><br><span class="line">第一个工作，作用是在数据库中储存 gogs 服务的重要信息，比如用户数据。可以运行 gogs/scripts 目录中内置的 mysql 脚本自动完成：</span><br><span class="line">```python</span><br><span class="line">$ mysql -u root -p &lt; scripts/mysql.sql</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure></p><p>第二个工作，作用是将操作数据库 gogs 的所有权限赋给用户 gogs：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; create user <span class="string">'gogs'</span>@<span class="string">'localhost'</span> identified by <span class="string">'your_password'</span>;</span><br><span class="line">mysql&gt; grant all privileges on gogs.* to <span class="string">'gogs'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure></p><p>数据库准备好之后，我们就可以启动 gogs 服务器啦！它的启动十分简单，在 gogs 目录下运行如下命令即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~/gogs$ ./gogs web</span><br></pre></td></tr></table></figure></p><p>看到有日志信息刷出，说明 gogs 服务器启动成功！</p><p>gogs 服务器默认监听 3000 端口，我们在浏览器中输入 <strong>http://远程主机IP:3000</strong> 或者 <strong>http://域名:3000</strong> 便可以打开 gogs 的 web 界面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/f892d45b-0231-4ccf-93ac-5f957f192ced.png" alt=""></p><p>首次运行需要配置一些信息，采用 web 界面来配置很方便。注意最好把下面的 <strong>管理员账号</strong> 也配置一下，后面会方便不少，gogs 默认 id=1 的账户为管理员账户。<strong>注意</strong>：貌似账号名不能使用 admin。</p><p>配置好之后，我们便可以看到登陆页面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/0ee1f526-f1e4-4855-9bdc-72f0b4fdfca5.png" alt=""></p><p>输入刚刚配置的管理员账号，登陆成功后进入用户界面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/a7dde137-7e05-4f9e-b137-a7fc28a25232.png" alt=""></p><p>界面和 github 类似，但是更简约，语言也是中文的。</p><p>至此，你的私人 git 服务器便启动起来了！</p><p>在我的教程之外，这里有两个教程可供你参考：<a href="https://gogs.io/docs/installation/install_from_binary" target="_blank" rel="noopener">官方文档</a> 和 <a href="https://blog.mynook.info/post/host-your-own-git-server-using-gogs" target="_blank" rel="noopener">网友写的一个比较详细的教程</a>。</p><p>##nginx 反向代理至二级域名</p><p>git 服务器已经启动成功，但是每次访问都需要加上端口号，比如： <strong><a href="http://yangyingming.com:3000" target="_blank" rel="noopener">http://yangyingming.com:3000</a></strong> 才能访问，未免太丑。</p><p>于是我们便有了一个需求，以我的域名为例：设立二级域名 gogs，访问 <strong><a href="http://gogs.yangyingming.com" target="_blank" rel="noopener">http://gogs.yangyingming.com</a></strong> 便能跳转到 gogs web 页面。</p><p>要做到这一点，需要两步：</p><p>###1.添加二级域名的 DNS 解析，这里假设要设置的二级域名为 gogs</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/94e0ec90-e31a-4075-a770-0281e6a5b342.png" alt=""></p><p>###2.修改 nginx 配置文件，添加反向代理</p><p>进入 <figure class="highlight plain"><figcaption><span>目录，创建新的配置文件 gogs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:/etc/nginx/sites-available# vi gogs</span><br></pre></td></tr></table></figure></p><p>在新的配置文件 gogs 中，添加反向代理到二级域名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name gogs.yangyingming.com;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    <span class="comment">#ssl on;</span></span><br><span class="line"></span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>/;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启 nginx 服务<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ2zegis1iqwk7ddw7voqtZ:/etc/nginx/sites-available<span class="comment"># service nginx restart</span></span><br><span class="line">nginx stop/waiting</span><br><span class="line">nginx start/running, process <span class="number">13025</span></span><br></pre></td></tr></table></figure></p><p>这里解释一下 <strong>配置文件 gogs</strong> 的意思：server_name 表示主机名，listen 表示这个服务监听的端口，这里监听 80 端口，<strong>proxy_pass <a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a>;</strong> 这条语句将 nginx 和 gogs 联系起来，意思是转发请求到 <a href="http://127.0.0.1:3000/。" target="_blank" rel="noopener">http://127.0.0.1:3000/。</a></p><p>配置好 nginx 反向代理之后，<strong>访问的整个流程</strong> 便是</p><blockquote><ol><li>访问二级域名</li><li>DNS 服务器将二级域名解析到远程主机 的 IP 地址的 80 端口（ http 服务默认是 80 端口）</li><li>远程主机上的 nginx 服务器监听 80 端口，接收到这个访问请求</li><li>nginx 转发请求到 <a href="http://127.0.0.1:3000" target="_blank" rel="noopener">http://127.0.0.1:3000</a></li><li><a href="http://127.0.0.1:3000" target="_blank" rel="noopener">http://127.0.0.1:3000</a> 端口位置上的 gogs 服务器处理请求</li><li>将请求结果返回到客户端</li></ol></blockquote><p>以上两步配置完成后，我们便可以丢掉端口号，通过二级域名直接访问 gogs web 服务啦！</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/5534c8dc-22ba-484f-b003-6f976cfa4212.png" alt=""></p><p>##后台运行 gogs</p><p>使用 nohup 可以后台运行 gogs ，这样即使关掉 ssh 连接也不会影响 gogs 的运行，运行如下命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ nohup gogs/gogs web &gt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></p><p>关闭 gogs 服务：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ ps -aux | grep gogs | grep -v grep</span><br><span class="line">git      <span class="number">12755</span>  <span class="number">0.0</span>  <span class="number">1.6</span> <span class="number">860788</span> <span class="number">34012</span> pts/<span class="number">0</span>    Sl   <span class="number">09</span>:<span class="number">43</span>   <span class="number">0</span>:<span class="number">09</span> gogs/gogs web</span><br><span class="line">git@iZ2zegis1iqwk7ddw7voqtZ:~$ kill <span class="number">12755</span></span><br></pre></td></tr></table></figure></p><p>##参考资料<br><a href="http://blog.csdn.net/u011138447/article/details/51363766" target="_blank" rel="noopener">CentOS7下搭建nginx反向代理服务器使得外网可以二级域名访问内网应用</a></p><p><a href="http://blog.csdn.net/smartbetter/article/details/53615313" target="_blank" rel="noopener">Nginx + Tomcat 反向代理 如何高效的在一台服务器部署多个站点</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/383" target="_blank" rel="noopener">使用 gogs 搭建 git 服务器 + 反向代理到二级域名</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>readfree.me 自动签到脚本获取免费积分</title>
      <link href="/2017/06/07/readfree.me%20%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9%E7%A7%AF%E5%88%86/"/>
      <url>/2017/06/07/readfree.me%20%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9%E7%A7%AF%E5%88%86/</url>
      <content type="html"><![CDATA[<p>##前言<br>这又是一个 python 脚本，这次的目标是 <a href="http://www.readfree.me" target="_blank" rel="noopener">readfree.me</a> ，一个比较正规的 kindle 电子书资源站。这个网站做了限制，电子书需要积分才能下载，积分有两种获取方式：1.充会员 2.每天领免费积分。本着能免费就不掏腰包的革命原则，我自然而然的把目光瞄到了每天的免费积分上…… </p><p><strong>脚本目的</strong>：每天自动登录 readfree.me 进行签到  —&gt;  领取积分<br><a id="more"></a></p><p>另外<strong>推荐</strong>一个免费的 kindle 电子书网站：<a href="http://www.52kindle.top" target="_blank" rel="noopener">52kindle.top</a>（这个网站经常挂，能否打开看运气）</p><p>##分析过程<br>最一开始的思路是用 post 模拟登录网站，登陆之后再访问签到页面。</p><p>于是很开心的打开 chrome F12 分析登录流程，发现 post 的数据不仅有用户名和密码，还有验证码 和 csrf 验证。csrf 验证好说，在登录页面的源码中就能找到关键字。但是验证码不好整，找了一些自动识别验证码的库，比如 pytesser 什么的，但由于各种原因，失败。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/fcdbfca7-a4f8-401c-993b-e7d10bf89673.png" alt=""></p><p>遂不能使用以上思路，想了另一种办法：<strong>直接把登录之后的 cookie 复制到脚本中使用</strong>。</p><p>回到刚刚 chrome 的登录路程分析中，在登陆成功之后，访问的第二个页面的 Request Headers 中，找到一个字段 <strong>Cookie</strong>：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/9322a7c1-88e0-40a4-9942-533077234c5e.png" alt=""></p><p>它的值大概是这种格式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hm_lvt_375aa6d601368176e50751c1c6bf0e82=<span class="number">1495876976</span>; Hm_lpvt_375aa6d601368176e50751c1c6bf0e82=<span class="number">1496806049</span>; sessionid=bo8x9rupjckoaxjk20igguxxxxxxxxxx; csrftoken=LOYvRkFdyosLgGXdabsETfwPp6XKpMEpzGIWd0ELByicRows4oqEnAxxxxxxxxxx</span><br></pre></td></tr></table></figure></p><p>这就是登录之后服务器返回给当前用户所在客户端的 cookie，分析一下：</p><p>他一共有4个字段，<strong>sessionid、csrftoken、Hm_lvt_375aa6d601368176e50751c1c6bf0e82、Hm_lpvt_375aa6d601368176e50751c1c6bf0e82</strong>。其中 sessionid 最重要，它是代表当前客户端用户已经登录的唯一标识，和服务器端遥相呼应，有了它服务器才承认你在这个浏览器上登录过了。</p><p>有了cookie，我们就可以在脚本中使用它登录了！</p><p>具体的方法很简单，需要使用 Requests 库的 get 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = requests.get(check_url,cookies=cookie)</span><br></pre></td></tr></table></figure></p><p>具体见完整源码。</p><p>另外关于 cookie 的过期时间，我们看一下登陆之后服务器返回的头部：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/7aaf0ba6-b157-47d1-9fcf-affbffffe0f9.png" alt=""></p><p><strong>expires</strong> 代表 cookie 过期时间，这个属性有些过时。<strong>Max-Age</strong> 作为替代，代表cookie的生存期，以秒为单位。按照这个时间来计算，这个 cookie 可以用将近4年……这算它们网站设计的一个小bug…… 不过方便了我们，利用这个漏洞，不用频繁更新 cookie了。</p><p>脚本写好了剩下的就简单了，在 windows 的计划任务中设置成每天执行一次脚本（或者在linux 中设置 crontab），这样就做到了每天自动签到。</p><p><strong>注意</strong>：通过网友 <strong>懒</strong> 的提醒，发现现在 readfree.me 的 cookie 似乎做了修改，不再是那几个字段，如过发现其中没有时间相关的字段，那么直接复制 cookie 过来到代码中就行，时间相关字段部分无需我们再手动生成。</p><p>##使用方法<br>1.从 chrome F12 中把登陆之后的 Cookie 复制到脚本中，具体方法是（熟手请忽略）：</p><p>Chrome浏览器中打开网站 readfree.me —&gt;  按住F12调出调试页面 —&gt; 在调试页面最上方点击 Network 栏目 —&gt; 选中顶部第二行的 Preserve log —&gt; 回到登录页面填上你的用户名密码验证码进行登录 —&gt; 后面刷出一大堆信息，移动到最上方，点击第二行名字为 readfree.me 的请求 —&gt; 在右边弹出的 Headers 栏目的 Request Headers 条目中找到 Cookie 字段 —&gt; 将 Cookie 的值复制到脚本代码的 cookie_str 变量中</p><p>2.设置计划任务，每天执行一次脚本</p><p>##代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录验证地址</span></span><br><span class="line">check_url = <span class="string">'http://readfree.me/accounts/checkin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录程序运行时的时间</span></span><br><span class="line">fp = open(<span class="string">'auto_signon_readfree.log'</span>,<span class="string">'a'</span>)</span><br><span class="line">ISOTIMEFORMAT=<span class="string">'%Y-%m-%d %X'</span></span><br><span class="line">curtime = time.strftime( ISOTIMEFORMAT, time.localtime( time.time() ) )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'at %s'</span>%curtime</span><br><span class="line">fp.write(<span class="string">'at %s\n'</span>%curtime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备cookie</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'准备cookie中……'</span></span><br><span class="line">fp.write(<span class="string">'准备cookie中……\n'</span>)</span><br><span class="line">cookie_str = <span class="string">'Hm_lvt_375aa6d601368176e50751c1c6bf0e82=1495876976; Hm_lpvt_375aa6d601368176e50751c1c6bf0e82=%s; sessionid=bo8x9rupjckoaxjk20igguxxxxxxxxxx; csrftoken=LOYvRkFdyosLgGXdabsETfwPp6XKpMEpzGIWd0ELByicRows4oqEnAxxxxxxxxxx'</span>%(int(time.time()))</span><br><span class="line">cookie = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> cookie_str.split(<span class="string">';'</span>):   </span><br><span class="line">    name,value=line.strip().split(<span class="string">'='</span>,<span class="number">1</span>)  </span><br><span class="line">    cookie[name]=value  </span><br><span class="line"><span class="keyword">print</span> cookie</span><br><span class="line">fp.write(<span class="string">'%s\n'</span>%cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用cookie访问网站</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'签到中……'</span></span><br><span class="line">fp.write(<span class="string">'签到中……\n'</span>)</span><br><span class="line">res = requests.get(check_url,cookies=cookie)</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line">fp.write(<span class="string">'%s\n\n'</span>%res)</span><br></pre></td></tr></table></figure></p><p>我把脚本放到云服务器上每天凌晨1点定时运行一次，测试了一个周效果如下：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/6/1477afa3-f986-40d2-847a-f3251cb3fb6d.png" alt=""></p><p>这个脚本比上一个脚本要简单，但是却花费了一晚上的时间，因为要排除一些不可行的方法。不过到最后还是有缺点，那就是需要手动复制cookie到脚本中，这不够自动化，好在cookie可以一直使用，复制一次即可。</p><p>##参考资料<br><a href="http://www.oschina.net/code/snippet_2463131_52023" target="_blank" rel="noopener">Python爬虫-保存cookies,模拟登录的一些基础用法</a></p><p><a href="http://blog.csdn.net/winterto1990/article/details/51213029" target="_blank" rel="noopener">python的requests在网络请求中添加cookies参数</a></p><p><a href="http://blog.csdn.net/caisini_vc/article/details/5619954" target="_blank" rel="noopener">python 的常用时间操作，取得当前时间等</a></p><p><a href="http://blog.csdn.net/zhangxinrun/article/details/6427369" target="_blank" rel="noopener">cookie的expires属性和max-age属性</a></p><p><a href="http://blog.csdn.net/chenzhuyu/article/details/50363873" target="_blank" rel="noopener">python脚本在Windows计划任务执行问题</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/381" target="_blank" rel="noopener">readfree.me 自动签到脚本</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>python 实现校园网自动登录</title>
      <link href="/2017/06/05/python%20%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/"/>
      <url>/2017/06/05/python%20%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>##背景<br>我所在的学校校园网登录是web式的，即随便打开一个网页就会自动跳转到登录页面，然后输入用户名密码，点登录，便可以上网了。</p><p>但这种登录方式有个缺点：<strong>登录状态不会一直保持下去</strong>。即过一段时间就会掉线，然后你需要重新登陆才行。这个时间大概是一天。</p><p>这就蛋疼了，想让实验室的电脑随时保持联网状态怎么办呢？（有时候我需要远程我的电脑）</p><p>这个时候可以用python脚本解决这个问题！<br><a id="more"></a></p><p>##思路</p><p>写一个死循环一直 ping 8.8.8.8，如果 ping 通说明正连着网，进入下一次循环；如果 ping 不通，说明断网了，尝试登陆校园网，然后进入下一次循环。即：</p><p>ping 8.8.8.8 —&gt; 如果已联网 —&gt; 继续 ping 8.8.8.8 —&gt; …… —&gt; 如果断网 —&gt; 尝试登陆 —&gt; 登陆成功 —&gt; ping 8.8.8.8 ……</p><p>脚本写好后放到 windows 的计划任务里设置开机启动。</p><p>或者在linux中设置 crontab，一样的道理。</p><p>##技术点</p><ul><li>利用 python 进行 post 请求</li><li>base64加密解密</li><li>利用 subprocess 创建子进程</li></ul><p>##碎碎念<br>脚本在后台运行cpu占用大概为 1~2%，内存占用大概为 4M 左右，完全可以接受。</p><p>当然如果你有条件的话，运行在内网服务器上也是极好的，顺便可以连个路由器出来，这样实验室的小伙伴能用不断网的wifi了……</p><p>如果没有服务器，树莓派+路由器的组合也是一种解决方案~</p><p>当然最省钱的就是我这种把脚本直接跑在自己机器上的…… </p><p>##代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> urllib,urllib2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os , subprocess</span><br><span class="line"></span><br><span class="line">username = <span class="string">'你的base64加密过的校园网用户名'</span></span><br><span class="line">password  = <span class="string">'你的base64加密过的校园网密码'</span></span><br><span class="line">url = <span class="string">'https://login.xxxx.edu.cn/auth_action.php'</span><span class="comment"># 校园网登陆验证地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isConnecting</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Judge network connect status</span></span><br><span class="line">    res = subprocess.call(<span class="string">'ping 8.8.8.8 -n 1'</span>,shell=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span> <span class="keyword">if</span> res <span class="keyword">else</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Signon</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Sign on</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'action'</span> : <span class="string">'login'</span>,</span><br><span class="line">        <span class="string">'username'</span> : base64.decodestring(username),</span><br><span class="line">        <span class="string">'password'</span> : base64.decodestring(password),</span><br><span class="line">        <span class="string">'ac_id'</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">'save_me'</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="string">'ajax'</span> : <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    data = urllib.urlencode(data)</span><br><span class="line">    response = urllib2.urlopen(url,data=data)</span><br><span class="line">    response = response.read().decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">print</span> response</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isConnecting():</span><br><span class="line">            <span class="comment"># no-connect status, attempt sign on</span></span><br><span class="line">            Signon()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[ERROR]:'</span>,</span><br><span class="line">        <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure></p><h2 id="设置任务计划"><a href="#设置任务计划" class="headerlink" title="设置任务计划"></a>设置任务计划</h2><p>在 windows 中设置 <strong>任务计划</strong> 以便在某些情况下自动运行脚本。</p><p>比如现在我想在 <strong>连接 WIFI 时自动运行校园网登陆的脚本</strong>。</p><p>实现的思路是在任务计划中创建一个新的任务，在新任务的触发器中设置 <strong>发生事件时</strong> 运行脚本，连接 WIFI 的事件是 WLAN-AutoConfig &gt; Operational 的 8001 事件。</p><p>可按如下设置创建新任务：</p><p>常规页面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d6886de4-bf2c-4e80-bc6e-31cfdd06b426.png" alt=""></p><p>触发器页面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/4268df30-df3f-4da9-899e-3b192296bfce.png" alt=""></p><p>编辑触发器（电脑启动时运行）：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/7d2749c6-3802-43a9-b874-6cc09fec7bb1.png" alt=""></p><p>编辑触发器（可选，连接无线网络时）：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/566f0942-e288-46e8-9eb3-50ecd8f4c366.png" alt=""></p><p>操作页面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/8bd56c1b-148f-4c5c-b810-0d1479ea9d24.png" alt=""></p><p>编辑操作：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/9372964a-b6fa-4217-bf71-fab9a7d901b2.png" alt=""></p><p>条件页面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f514c908-590b-4046-bbe1-4af47a470fae.png" alt=""></p><p>设置页面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/12924a7b-9452-4bd1-83b6-5a2b494633a4.png" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.zhihu.com/question/50249683/answer/120098478" target="_blank" rel="noopener">如何设置计划任务或者脚本才能使电脑在连接指定wifi后自动运行某程序？</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/380" target="_blank" rel="noopener">python 实现校园网自动登录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于 ElasticSearch 中倒排索引的理解</title>
      <link href="/2017/05/29/%E5%85%B3%E4%BA%8E%20ElasticSearch%20%E4%B8%AD%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2017/05/29/%E5%85%B3%E4%BA%8E%20ElasticSearch%20%E4%B8%AD%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>ElasticSearch 是一个搜索引擎，也可以看做是一个分布式的数据库（经常被当做一个文档型的NoSQL数据库在使用），它可以大量的存储数据，并建立索引，以便在极短时间从海量数据中找到目标数据。</p><p>它和传统数据库很大的一个区别在于它建立索引的能力，这里有一个重要的概念——<strong>倒排索引</strong>。</p><p>倒排索引可以很大的提高检索的速度，下面举一个例子，来说明一下倒排索引是什么，以及这种方式相比于传统数据库为什么会提高索引的速度。<br><a id="more"></a></p><p>在 ElasticSearch 中，一条记录被称之为一个<strong>文档</strong>，文档中有 id、type、version、source（文档主要数据存储在这里）等字段。</p><p>这里假设 <strong>文档A</strong> 的source字段中有一个关键字 content 的值是一条文本：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love study.</span><br></pre></td></tr></table></figure></p><p><strong>文档B</strong> 的source字段中有一个关键字 content 的值是另一条文本：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And study make me happy.</span><br></pre></td></tr></table></figure></p><p>现在输入我们想要检索的关键字：<strong>“study happy”</strong>。</p><p>可以想象，在传统数据库中，会用一条类似这样的 sql 语句在数据库表中挨条查找符合要求的记录：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> (column_name <span class="keyword">LIKE</span> <span class="string">'study'</span> <span class="keyword">and</span> column_name <span class="keyword">LIKE</span> <span class="string">'happy'</span>)</span><br></pre></td></tr></table></figure></p><p>假如表中存有 1000w 条记录，那么这条 sql 将会依次检索这1000w 条记录，所要消耗的时间随着记录数增多而提高。这种方式在应对海量数据的时候，便有些力不从心。</p><p>那么我们可不可以换一种检索的方式呢？</p><p>既然我们要在 <strong>文档（记录）</strong> 中查找指定的 <strong>单词（关键字）</strong>，最终查找的是 <strong>单词（关键字）</strong> 在某一个文档中存不存在，存在于哪一个文档中。那么我们可以反过来直接根据 <strong>单词（关键字）</strong> 建立一个索引表，通过检索关键字直接找到所有包含关键字的文档，这便是 <strong>倒排索引</strong>。</p><p>先拿以上例子说明一下传统数据库存储的方式：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/b52cd1ab-c680-4d4b-ba88-f3382ae3e945.png" alt=""></p><p>再拿以上例子说明如何建立倒排索引：</p><p>文档 A 和 B 中的两个文本，<strong>“I love study.”</strong> 和 <strong>“And study make me happy.”</strong>，可以建立如下索引表：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/4af14dc4-fc11-4d99-9cf8-37911298cb81.png" alt=""></p><p>当我们检索关键字 <strong>“study happy”</strong> 的时候，可以直接找到 study 在文档A和文档B中都存在，happy 只在 文档B 中存在。相比传统数据库的检索方式，这种方式更加直接和高效，特别在数据量极大的情况下。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/8b955dd9-7678-4360-a369-7da1b476e224.png" alt=""></p><p>同时我们也可以发现，我们输入的关键字在 文档A 中命中1次，在文档B中命中2次，于是 ElasticSearch 甚至可以得到相关性的结论，<strong>文档B 的相关度比 文档A 高</strong>。</p><p>这也是 ElasticSearch 的一个优势所在，它不仅可以快速检索内容，还可以将命中的文档根据相关度进行排序，并显示在搜索结果中。</p><p>本文只对倒排索引最核心的概念进行粗略介绍，如有不当之处，欢迎指出。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/379" target="_blank" rel="noopener">关于 ElasticSearch 中倒排索引的理解</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 5 月份阅读记录</title>
      <link href="/2017/05/17/2017%20%E5%B9%B4%205%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/05/17/2017%20%E5%B9%B4%205%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/4/df35a19e-8179-4aaa-8470-1e3afebf3ed2.jpg" alt=""><br>读万卷书，行万里路。<br><a id="more"></a></p><p>##《拉普拉斯的魔女》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/2831ef42-d4f4-4775-930d-a3869537abf6.png" alt=""></p><p>标签：东野圭吾、推理、悬疑</p><p>这是这个月读完的第一本书，在上海西西弗书店的东野圭吾专架上捡起这本书，每次下班后便去看一个多小时书，去了四次才看完。</p><p>这本书又是一部典型的“东野圭吾式”的前期枯燥无比，后期开始渐入佳境的小说，但和以往不同的是，这部小说后期也没有为读者支持起足够的代入感和兴奋感。</p><p>说是“拉普拉斯的魔女”，但小说内核讲述的却不是“魔女”的故事，大部分时间她只是作为一个旁观者，看着一个家庭两代人的恩怨和冲突。随着剧情发展，到了后期才变得有点意思起来，然而结局之后却没有留给读者太多回味的余味，就像以为是一顿大餐，结果吃的却是粗茶淡饭，不免让人感觉有些失望。想起刚拿起这本书时想着“东野大大终于出新书”的期待心情，现在有些担心东野大大是否已经江郎才尽，未来还能带给我们像《恶意》、《秘密》等震撼人心的作品吗？</p><p>回到本书，可能是我要求太高，但我觉得东野圭吾大大的这部小说没有他说的“我想摧毁自己以前写的小说，于是，这部作品就此诞生”那么吸引读者。</p><p>30周年之作，本不该如此敷衍。</p><p>小说行文很流畅，故事完整，本想打两星，但后期还挺有意思，加一星。</p><p>推荐指数：★★★</p><p>##《猫：懒得理你》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/f82f0ada-d27c-4531-aa90-d861fbc57088.jpg" alt=""></p><p>标签：喵、影像集、减压书</p><p>这是一本Lens出品的影像集，里面包含大量有关猫的让人瞩目和发笑的照片，每张“猫片”旁边标注着很有意思的标题，似乎在代替猫讲出它们的心声。</p><p>书中还穿插着不少爱猫人士和他们的猫的故事，让人读起来感觉很有爱。另外书中小篇幅介绍了猫咪小知识，精辟实用。</p><p>整本书翻下来身心十分愉悦，即使不是爱猫人士，忙碌之余浏览一下，相信也总有一张“猫片”会让你会心一笑。</p><p>这边书文字不多，几乎可以作为纯视觉欣赏的作品，翻看起来十分舒畅，作为爱猫人士给它打个三星。</p><p>推荐指数：★★★</p><p>##《巨婴国》</p><p>标签：心理</p><p>这本书只看了三分之一，原谅我没读下去，作者的有些观点太偏颇，读起来实在感觉心累。</p><p>看这本书的过程会有两极分化，读到有些片段，你会深以为然；但有些片段你会看到作者写了一堆理论，却并不能引起你的共鸣，换句话说，你会觉得他在胡扯。</p><p>书中描述的一些心理现象在中国的社会我相信是存在的，但这并不能就给它们戴上一个“中国式”开头的帽子，这些现象并不普遍存在于现实生活中。</p><p>以偏概全大概是这本书最大的问题，不推荐读。</p><p>推荐指数：★★</p><p>##《挪威的森林》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/b1e00263-9b63-40ab-b32c-6ef9e90fb53d.jpg" alt=""></p><p>标签：青春、爱情</p><p>村上春树这部小说早就想看，如今终于一睹为快。</p><p>从这部小说里，能看到处于青春期少年少女的混乱，迷茫，成长并不是理所应当的增长，而是伴着痛苦和分裂——抛弃过去的自己，以一个稚嫩而坚强的躯壳一次次迎向新生，就这样走过青春的十八年华，这样的一条蜕变之路。</p><p>渡边和直子都不知如何才算爱上一个人，换句话说，他们在那个时候一度失去了爱一个人的能力。书中出现的人物似乎都有些不正常，不过反过来想，青春期的少年少女的心思，可能多少都带有一丝疯狂和荒诞吧。</p><p>村上春树描绘的渡边直子绿子的青春图景带有一点荒唐，一点疯狂，一点不正常，但却肆意，任性。不由得让人回想起自己度过的或者正在度过的青春，那些图景，那些飞扬荒诞的想法，不是正和自己记忆中一些碎片有几许重叠？</p><p>整个故事结构完整，一气呵成，看完小说的最后一段，留在心中的竟是怅然若失的感觉。</p><p>缅怀一下逝去的青春，值得一读的一本书，村上春树出品，质量也有保证，但愿你能在书中找到自己曾经的影子。</p><p>推荐指数：★★★☆</p><p>附带此书的灵感来源，甲壳虫乐队的《挪威的森林》</p><blockquote><p><strong>《Norwegian Wood》</strong><br>by The Beatles<br>I once had a girl,<br>我曾经拥有过一个女孩<br>Or should I say<br>或者我应该说<br>She once had me.<br>是她拥有我<br>She showed me her room,<br>她带我去看她的房间<br>Isn‘t it good?<br>这很好，不是吗？<br>Norwegian wood.<br>像挪威的森林一般冷清<br>She asked me to stay and she told me to sit anywhere,<br>她叫我留下，让我随便坐坐<br>So I looked around and I noticed there wasn‘t a chair.<br>然后我环视了房间一周，发现这连一张椅子都没有<br>I sat on a rug<br>那我就只好坐在一块小地毯上<br>Biding my time,<br>等待着时机的来临<br>Drinking her wine.<br>喝着她给的酒<br>We talked until two,<br>我们聊到深夜两点钟<br>And then she said,<br>然后她说<br>is time for bed?<br>是时候睡觉了吧？<br>She told me she worked in the morning and started to laugh,<br>她告诉我她要在早上去上班，然后她就放声大笑了<br>I told her I didn‘t,<br>我告诉她没有工作<br>and crawled off to sleep in the bath.<br>然后就只好跑到浴室里睡觉了<br>And when I awoke<br>当我醒来的时候<br>I was alone,<br>我只是孤身一人<br>This bird has flown,<br>小鸟都飞走了<br>So I lit a fire,<br>所以我点上一支烟<br>Isn‘t it good?<br>这不是很好吗？<br>Norwegian wood.<br>这如挪威森林一般冷清的房子  </p></blockquote><p>##《发条橙》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/9a72f64f-5b10-426c-a3de-0d21c710b254.jpg" alt=""></p><p>标签：暴力、人性</p><p>久仰《发条橙》的大名，在书店闲暇时看到这本不厚的书，便拿来一读。（《发条橙》改编的电影曾一度被列为禁片，因为它所展现的内容过于暴力）</p><p>小说前期是主角毫无缘由和目标的施虐行为，因为“毫无缘由”，所以显得有些无聊和空泛；到了中期，开始变得有意思起来，主角为了尽快出狱，接受了心灵改造实验；后期便是他被改造之后作为一个只知“行善”的发条机器在社会上的遭遇。</p><p>《发条橙》制造了一个暴力念头被完全抑制的人性场景，主角硬生生从一个无法无天的暴力青年变成一个“受虐狂”。出狱之后，他只要一生出暴力的念头，便会感到恶心、身体不适，从而不能作恶。</p><p>这样的做法，真的能制造出“善”人吗？</p><p>当脑中“暴力”的念头完全被抑制，是否真的是一件好事呢？</p><p>当一个人不能选择暴力，便被迫选择了卑微，他失去了道德选择的权利。这时的“他”，已不是一个完整的人。</p><p>就像主角被剥夺暴力念头而做出卑微之举之后，喃喃自语道：</p><p>“我只能充当上发条的甜橙吗？”</p><p>豆瓣上看到一篇影评的题目：<strong>“彻底的善与彻底的恶一样没有人性”</strong>。偏僻入里，正符合小说所表达的内涵。</p><p>推荐指数：★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/378" target="_blank" rel="noopener">2017 年 5 月份阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017.5.15 初来上海一周见闻</title>
      <link href="/2017/05/15/2017.5.15%20%E5%88%9D%E6%9D%A5%E4%B8%8A%E6%B5%B7%E4%B8%80%E5%91%A8%E8%A7%81%E9%97%BB/"/>
      <url>/2017/05/15/2017.5.15%20%E5%88%9D%E6%9D%A5%E4%B8%8A%E6%B5%B7%E4%B8%80%E5%91%A8%E8%A7%81%E9%97%BB/</url>
      <content type="html"><![CDATA[<p><strong>流量警告：多图杀猫！</strong></p><p><strong>标签</strong>：上海、魔都、猫、学校、公司、实验室</p><p>从3月底考研复试结束之后，在家浪了有一个月左右的时间，期间回学校看了看，和老师、实验室的小伙伴一起吃了顿饭，气氛很愉快，回到母校很亲切。烟大的海，还有天，还是那么湛蓝。</p><p>5月7日，周日。启程去上海。正值C919大飞机试飞成功，我也坐个小飞机。<br><a id="more"></a></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/3905ec9d-6083-4373-9c07-dc451ef05218.jpg" alt=""></p><p>下午两点左右抵达学校。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/63527704-7753-43fe-a865-114a39093ade.jpg" alt=""></p><p>和学长一起来到暂住的地方，小区里有很多猫，很赞！</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/4d5db196-9a4e-4a7c-93d8-1abd758198ad.jpg" alt=""></p><p>收拾好床铺之后，和学长一起到阳台上聊天，惊喜地发现对面墙上爬满爬山虎。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/52884723-8000-4761-8dad-52fc2b426930.jpg" alt=""></p><p>听说宿舍隔壁也养了一只猫，可惜今天恰好跑掉了，没见到，很可惜。</p><p>5月8日，周一。上海天气多变，多阴雨天，这不，今天就下起了雨，图为校训——“求实创造，为人师表”。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/9f0a3520-7938-4694-9719-a46960e1ee3c.jpg" alt=""></p><p>今天的主要任务是见导师，导师交代了一些事情，带我来到实验室，给我配了电脑，总算有个归属地了。实验室还有一台服务器，太棒了（鼓掌）！打开一开就蒙了，what?? 这是谁装的win7系统 Orz ……</p><p>在实验室装配好电脑之后，便在楼下找了辆小黄车去后勤保障部，询问临时宿舍的问题，问完后便在蒙蒙细雨中骑着自行车在校园里闲逛。下面是随手拍的校园一角：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/bdf2560d-d3e5-4418-b39b-7aed005b1e05.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/4ce5be4b-a301-4428-bd0d-06b7398c3dc6.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/1e620e58-13f6-4005-ace7-681a54e4eef7.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/b26329eb-e216-4529-bef3-abb3c8599ec3.jpg" alt=""></p><p>傍晚时分回到实验室，收拾了下桌面：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/deb9b00c-4a2c-453c-8af3-c6b2788061bd.jpg" alt=""></p><p>晚上回到宿舍，见到隔壁宿舍那只猫咪，一时之间和它大眼瞪小眼，回头想想也是极有意思。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/39fb03ba-5098-4418-bc3d-96a955def30d.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/a36829bb-e706-428a-8863-816bdec9250a.jpg" alt=""></p><p>5月9日，周二，天气晴朗，第一天上班。老大分配了任务，一天开了两次会议。公司氛围很喜欢。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/8bc99d8d-a2d4-43bc-aae9-7d7eaffcac26.jpg" alt=""></p><p>晚上下班路过环球港，想起一家中意的书店就在这里，而且地铁站和环球港是连在一起的，于是便进去一探究竟。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/1440bdda-d9f0-4dd6-9181-9947e528b186.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/8c1e9fc0-a2c5-4c72-96f1-0a1f4c9dec3c.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/fb4e374f-312e-48b3-af46-ce28425b5aa5.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/c4bb21a3-a738-4302-9f1d-ea8d7bddaed9.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/df35a19e-8179-4aaa-8470-1e3afebf3ed2.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/b66be10f-d747-4952-b9ba-bf57a2719bfb.jpg" alt=""></p><p>（一进环球港画风都变了…… 金黄）</p><p>5月10日，周三。</p><p>上午和公司请假去办理临时宿舍，未果，无奈。剩下的时间骑小黄车去办理电话卡，太阳很烈，学校附近没有移动营业厅，于是骑了2条街到最近的营业厅。到了才发现校外的移动卡套餐业务真是少的可怜，想念还在学校的时候可以有那么多选择。办理了电话卡之后才发现有些鸡肋，只能用三个月，我的手机还不能双卡，原来的号绑定了很多东西，一时间纠结无比。算了，有需要的时候再用它吧。</p><p>下午去公司上班，搭建起来系统，但是没有数据。老大说明天找大佬给我讲讲。</p><p>5月11日，周四，继续上班，今天老板分配的任务总算有了一些进度，还要花时间去熟悉。</p><p>晚上继续到“西西弗书店”看书，空闲之余，闲逛环球港。来到文化区，这里金碧辉煌，一时之间惊叹无比，不愧是魔都地界。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/4d600492-47f5-43be-82e5-36a682209ac9.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/264ee269-ed57-4d18-ba03-9374a31be4eb.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/1e312836-5c3a-4308-914b-cb7d09bb891b.jpg" alt=""></p><p>感受了一阵奢华气息之后，还是回到安静的书店看我的书，毕竟现在还在吃土。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/6767fa73-5b5e-4857-b289-afecd04d987e.jpg" alt=""></p><p>西西弗书店很贴心，每本新书旁边都会放着一本拆过封的书，供读者随意取阅。即使没有拆过封的书，你也可以叫工作人员过来帮忙拆一本新的。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/6c31e653-3f45-411e-98a2-24257d09cc19.jpg" alt=""></p><p>5月12日，周五。目前一周只去三次公司，今天不去。跑了几趟后勤，基本确定临时宿舍没有办法申请了。其它时间在实验室看老师的任务。</p><p>晚上回宿舍后，撸猫乃一大乐趣……</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/31fbe57f-3e3c-4071-8679-5cd57b640b99.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/6c6f4e2d-4af5-42ca-aeec-c63faf314e65.jpg" alt=""></p><p>5月13日，周六，天气晴朗，公司团队建设。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/57081ddf-1003-4cfb-8b46-1339be659e63.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/00ff3761-93f1-4a3b-a453-f27010991634.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/4ad809a1-5e7a-48aa-8147-254b66929a4b.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/adc5fda1-a8cc-4181-9230-1fd8bfa7801f.jpg" alt=""></p><p>团建很开心，和公司其他人组队打球，很棒的活动！发现个个体力惊人呀，哈哈，谁说程序猿都是宅男！~</p><p>晚上，得知舍管大妈下了禁令，下周需要搬出去。</p><p>5月14日，周日，时间紧急，找了一天租房。最后在离地铁一条街的地方找到一处还算合适的房，签了3个月的合同。在租房过程中意外发现一处猫窝：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/5f85d914-1c96-4968-aa10-a1380dc06684.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/f0f5c068-978f-4913-8a03-e2f62f59b811.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/508931de-c5fa-4fec-beae-9bdb92def1aa.jpg" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/7cfc8af3-d9e5-4927-9e58-08b53a439221.jpg" alt=""></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/377" target="_blank" rel="noopener">2017.5.15 初来上海一周见闻</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Pandas 默认时间格式转换为 Unix 时间戳</title>
      <link href="/2017/04/21/Pandas%20%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%20Unix%20%E6%97%B6%E9%97%B4%E6%88%B3/"/>
      <url>/2017/04/21/Pandas%20%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%20Unix%20%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      <content type="html"><![CDATA[<p>Pandas读取csv文件时，时间会自动显示为<strong>‘YYYY-MM-DD HH:MM:SS’</strong>的格式，那么如果想要将这个时间转换为 <strong>Unix时间戳</strong> 呢？</p><p>##先科普一下，什么是 <strong>Unix时间戳</strong> 呢？</p><p><strong>Unix时间戳</strong> 是一种时间表示方式，是一个整型值，代表从格林威治时间1970年01月01日00时00分00秒起至现在经过的总秒数。</p><p>##举个栗子：</p><p>一个值为 <strong>1492751843</strong> 的Unix时间戳  ==&gt;<br> 把它转换为 北京时间为 <strong>2017/4/21 13:17:23</strong></p><p>实际上，Pandas中时间用 pandas.datetime() 转换为 pandas.tslib.Timestamp（时间戳） 格式之后，已经变成了整型存储，即 Unix时间戳形式 。</p><p>如果我们需要这个时间戳的整型格式，可以用 <strong>time[0].value</strong> 这个属性把它提取出来。<br><a id="more"></a></p><p>##样例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd<span class="comment"># 导入pandas库</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">'airquality.csv'</span>)<span class="comment"># 读入数据文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.time = pd.to_datetime(data.time)<span class="comment"># 将时间那一列从str转换为时间戳格式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(data.time[<span class="number">0</span>])<span class="comment"># 查看转换之后的格式</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">data</span>.<span class="title">time</span>[0]# 查看第一条数据，默认显示为‘<span class="title">YYYY</span>-<span class="title">MM</span>-<span class="title">DD</span> <span class="title">HH</span>:</span>MM:SS’格式</span><br><span class="line">Timestamp(<span class="string">'2014-05-01 00:00:00'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.time[<span class="number">0</span>].value<span class="comment"># 查看第一条数据的Unix时间戳格式</span></span><br><span class="line"><span class="number">1398902400000000000L</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.time[<span class="number">0</span>].value//<span class="number">10</span>**<span class="number">9</span><span class="comment"># 转换为秒级</span></span><br><span class="line"><span class="number">1398902400L</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = [t.value <span class="keyword">for</span> t <span class="keyword">in</span> data.time]<span class="comment"># 提取整列（纳秒级，即1s = 1,000,000,000 ns）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[:<span class="number">3</span>]<span class="comment"># 显示前三条数据</span></span><br><span class="line">[<span class="number">1398902400000000000L</span>, <span class="number">1398906000000000000L</span>, <span class="number">1398909600000000000L</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t2 = [t.value//<span class="number">10</span>**<span class="number">9</span> <span class="keyword">for</span> t <span class="keyword">in</span> data.time]<span class="comment"># 提取整列（秒级）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t2[:<span class="number">3</span>]<span class="comment"># 显示前三条数据</span></span><br><span class="line">[<span class="number">1398902400L</span>, <span class="number">1398906000L</span>, <span class="number">1398909600L</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = pd.DatetimeIndex(t1)<span class="comment"># 从list列表转换为pandas的DatetimeIndex格式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[:<span class="number">3</span>]<span class="comment"># 显示前三条数据</span></span><br><span class="line">DatetimeIndex([<span class="string">'2014-05-01 00:00:00'</span>, <span class="string">'2014-05-01 01:00:00'</span>,</span><br><span class="line">               <span class="string">'2014-05-01 02:00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t1[<span class="number">0</span>])<span class="comment"># 每条数据为Timestamp格式</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">t1</span>[0].<span class="title">value</span></span></span><br><span class="line"><span class="class">1398902400000000000<span class="title">L</span></span></span><br></pre></td></tr></table></figure></p><p>##参考资料</p><p><a href="http://stackoverflow.com/questions/15203623/convert-pandas-datetimeindex-to-unix-time" target="_blank" rel="noopener">Convert pandas DateTimeIndex to Unix Time? - stackoverflow</a></p><p><a href="http://blog.csdn.net/kevinelstri/article/details/55511448" target="_blank" rel="noopener">【Pandas-Cookbook】08：时间戳处理 - csdn</a></p><p><a href="http://blog.csdn.net/pipisorry/article/details/52209377" target="_blank" rel="noopener">pandas小记：pandas时间序列分析和处理Timeseries - csdn</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/376" target="_blank" rel="noopener">Pandas 默认时间格式转换为 Unix 时间戳</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>《环界》（午夜凶铃）系列读书笔记</title>
      <link href="/2017/04/18/%E3%80%8A%E7%8E%AF%E7%95%8C%E3%80%8B%EF%BC%88%E5%8D%88%E5%A4%9C%E5%87%B6%E9%93%83%EF%BC%89%E7%B3%BB%E5%88%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/04/18/%E3%80%8A%E7%8E%AF%E7%95%8C%E3%80%8B%EF%BC%88%E5%8D%88%E5%A4%9C%E5%87%B6%E9%93%83%EF%BC%89%E7%B3%BB%E5%88%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/4/19dbbf26-8473-4902-8136-6c23702a7432.jpg" alt=""></p><p>标签：科幻、悬疑、恐怖小说</p><p>前段时间集中看书，以一天一本的疯狂速度读完了《环界》系列，其实每一部字数都不算多，加上小说本身紧张的节奏和气氛使其看起来十分爽快，适合作为平静的生活之外的调味剂。</p><p>第一部有点恐怖哦，吓到你了可别怪我~</p><p>读完小记了一下感想~<br><a id="more"></a></p><p>##《环界1·铃》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/0f4eab3c-dafc-47fb-8039-3268bd551715.jpg" alt=""></p><p>《环界》系列于上个世纪被改编成恐怖电影，以《午夜凶铃》之名闻名于全世界，相信从黑白电视机里爬出来的披头散发的贞子形象已不知道深深扎根于多少人的脑中，成为“恐怖”这两个字的代名词。让我们脑中浮现出偏僻安静的角落，狭窄昏暗的空间，老旧的黑白电视机这样的画面时，便不由得想起一度被“贞子”支配的恐惧……</p><p>《环界》系列作者是铃木光司，它本身的定位是科幻小说，作者说很高兴看到这部被严重误读的作品重新以它的原名字“环界”的名字再版。说实话，刚开始知道《午夜凶铃》原著原来是定位于科幻小说的时候我也是一脸懵逼的……具体了解之后，我才知道在荧幕形象之外，“贞子”系列还有作者想表达的、更深层次的意思，以及那之外，更广阔的的世界。</p><p>回到故事本身，《环界》第一部所讲述是一个<strong>“病毒”诞生</strong>的故事，它通过录像带诅咒的方式传播，中了这个诅咒的人一个周之后便会猝死，破解诅咒的方式却被一群青年草率地抹去，于是就有了第一部的故事。主人公为了找到破解诅咒的方法而找寻线索，随着他的努力，真相逐渐逼近……</p><p>整个故事节奏明快、气氛压抑紧张，让人读起来有一种强烈的代入感。第一部的故事中，科幻的元素还没有彰显，但“恐怖”和“悬疑”的气氛渲染地十分的优秀，能拍成闻名世界的恐怖电影得益于作者对恐怖元素的把握。整个故事线只有一条主线，便是<strong>“破解诅咒”</strong>，小说全部的氛围和细节描写全部围绕着这个主题展开，这使得读者可以全情投入到小说的剧情发展中，随着主角的探索而一步步揭露真相，这种如影随形的恐惧感正是恐怖小说的精髓。你可以一口气读完这部不算长的小说而在最后大呼一个“爽”，这正是这本书的魅力所在。</p><p>其实书中描述的诞生于贞子的这个“病毒”或者说“诅咒”，在网友的总结中有一个共同的名称，那就是——<strong>“模因武器”</strong>，它的使用在网文《无限恐怖》中发挥的淋漓尽致，感兴趣的童靴可以看看。</p><p>书中的“贞子诅咒”以录影带为媒介呈病毒式传播，第一部的故事讲述的正是这个诅咒刚刚开始传播的时候发生的故事。<strong>“病毒式传播”</strong>本身是一个令人窒息的传播形式，如果被传播的对象是能取人性命的诅咒，那它造成的恐怖感觉将如浪潮般冲击人的感官。我在文艺作品中看到的类似的以“病毒式传播”营造恐怖气氛的还有伊藤润二的代表作《富江》漫画系列，每一个富江身体的一部分都可以增殖为另一个富江，而每一个被富江迷住的人都想要分尸富江…… 伊藤润二是日本的恐怖漫画大师，他的作品通常充斥着黑暗、压抑、绝望的气氛，气氛渲染是他的一绝，感兴趣的可以去看看他的作品。</p><p>##《环界2·螺旋》</p><p><strong>轻微剧透，慎入！</strong></p><p>和《环界1》不同的是，《环界2》剧情要复杂一些，除了主角安藤的剧情线，同时发展的还有高野舞的剧情线，最后两条线相交，碰撞产生出后期的真相。</p><p>第二部的故事十分玄幻+科幻，如果说第一部还十分矜持，仅将重点放到气氛渲染和破解诅咒追查贞子过去的过程中，那么第二部就是想象力的迸发，围绕着龙司留下的谜题，主角安藤一步步追查，破解出的谜题答案也一个比一个离奇，这是一部没有作者引导你看了开头绝对猜不到结尾的故事。可以说，第二部的“病毒”发展，已经完全跳出了第一部结尾的猜想。如果你在看完第一部之后，长叹“噢，原来是这样”，到了第二部你就会不断惊呼，“咦？这怎么和开始说的不一样！？”究其原因，是因为在第一部中病毒就产生了“突变”，到了第二部它已经不再按常规的方式传播，思维跳跃之大，令人惊叹。</p><p>看我以上的描述，你应该可以了解到第二部的主线是<strong>“解谜”</strong>，谜题的出现十分玄幻，但看到后来似乎又合情合理，毕竟《环界》前两部是建立在“存在超能力”这一前提下，发生什么事都可以用“超能力”来解释，不过“超能力”在解谜过程中和科技的结合倒也是本书的一大看点。</p><p>其实当我看到“超能力”出现在这本以“科幻小说”为定位的小说中时，我是拒绝的，因为这降低了这套小说的科学性，到了第二部，这种玄幻风更加强烈，甚至一度看的我晕头转向，希望第三部的反转具有说服力。</p><p>##《环界3•环》</p><p>《环界3•环》是《环界》系列一个重要的节点，它把一部带有浓厚恐怖气氛的小说成功转换成了一部硬科幻小说。</p><p>第三部的主线是<strong>“破解癌症病毒”</strong>，这里的“癌症”是指从贞子病毒变异而来的传染病，可以感染人类并致死。在这一部中，几乎没有贞子的情节。主角阿馨为了解救自己的亲人，踏上了找寻破解癌症方法的道路，随着越来越接近宿命中的位置，他也得知了令人震惊的真相……</p><p>当阿馨得知自己使命的那一刻，我身为读者也猛然知晓了为什么这部小说能从恐怖小说一下子转换为一部硬科幻小说。那一刻，两个世界的交点被打通，身为读者，体会到了一种奇妙的重叠感和贯通感，这正是这一部的魅力所在。</p><p>总的来说，第三部没有让我失望，作者设定的世界架构在这一部中才真正的铺陈开来，但在这个过程中读者却浑然不知，直到后期才猛然抛出引子，一下子沟通了两个世界。</p><p>##《环界4•新生》</p><p>《环界4•新生》是“环界”系列的最后一部，它没有明确的主题，以多条不相关联的剧情线描写了几个角色的后续发展，想表达的似乎只是<strong>“交代人物结局”</strong>，所以这一部小说与其说是大结局，不如说更像一部“环界”系列的番外。</p><p>总体上说，“环界”系列的最后一部没有前三部出色，它<strong>不恐怖，不科幻，不惊艳</strong>，作者用不愠不火的笔法对过去几部出现的几个人物的结局进行了交代，为“环界”系列画下了一个“低调”的结局。</p><p>##总结</p><p>《环界》四部曲，第一部最有感觉，其次是第二部和第三部，第四部和前三部相差太多，不够出色。</p><p><strong>第一部</strong>是《环界》故事的开端，恐怖气氛渲染出色，情节紧凑，很容易将读者带入其中，引人入胜的感觉十分凸现作者功力。</p><p><strong>第二部</strong>剧情紧随其后，加入了科幻元素，总体上也是以“破解”为主，只不过破解对象从诅咒变为病毒，剧情稍显凌乱，感觉上没有第一部纯粹，总体上说也是一部佳作。</p><p><strong>第三部</strong>相对前两部，前期叙事平缓，不够吸引人，后期打通两个世界的反转才是亮点，功过相抵，把它和第二部并列放在第二位。</p><p><strong>第四部</strong>像是番外，没有明显的主题，只交代几个角色的结局，看点不多。</p><p>总的来说，是一部优质作品，对悬疑、恐怖、科幻题材小说感兴趣的童靴推荐一看，小说本身脑洞也是够大。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/375" target="_blank" rel="noopener">《环界》（午夜凶铃）系列读书笔记</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>为了情怀也要写一个操作系统出来</title>
      <link href="/2017/04/12/%E4%B8%BA%E4%BA%86%E6%83%85%E6%80%80%E4%B9%9F%E8%A6%81%E5%86%99%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%87%BA%E6%9D%A5/"/>
      <url>/2017/04/12/%E4%B8%BA%E4%BA%86%E6%83%85%E6%80%80%E4%B9%9F%E8%A6%81%E5%86%99%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%87%BA%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>不知多少程序员在成长的过程中冒出过“写一个自己的操作系统”的想法，甚至将它作为一个终极目标，我也不例外。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/374" target="_blank" rel="noopener">为了情怀也要写一个操作系统出来<br><a id="more"></a></a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017 年 1~4 月份阅读记录</title>
      <link href="/2017/04/09/2017%20%E5%B9%B4%201~4%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/04/09/2017%20%E5%B9%B4%201~4%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/4/9a314bd0-09c2-4d57-bf8b-cd3b882b7540.jpeg" alt=""></p><p>长篇的笔记另起炉灶，短篇的直接写在这里。<br><a id="more"></a></p><p>##《克苏鲁神话》<br>标签：神话导读、恐怖、克苏鲁</p><p>见链接：<br><a href="http://www.yangyingming.com/article/356/" target="_blank" rel="noopener">谈谈《克苏鲁神话》</a></p><p>##《流浪苍穹》<br>标签：科幻小说、浪漫</p><p>看完郝景芳的《流浪苍穹》，用了一个周，用了这么久时间，也不是没有原因的。</p><p>一方面是这本书有300多页，算是中长篇，另一方面这本书的叙事节奏较慢，情节的整体吸引力相对不大。大高潮没有，叙事平缓细腻，长于描写，虽节奏优美舒缓，但读起来难免困乏，至少我是这样，可能也和个人品味有关。</p><p>之所以看郝景芳的书，是因为她是中国第二位“雨果奖”获得者，这是我读过的她的第二部作品(第一部是《北京折叠》)。说实话，这部小说在我看来，科幻味并不浓厚，它更多的是散文性质的抒情，格调散漫的讲述着一个游离在两个世界的一群孩子们精神上流浪的故事。一个又一个的片段，一个又一个人物身上发生的故事，在火星这个社会还在快速发展变化的背景下，发酵，酝酿，推动着故事的发展。</p><p>总的来说，这其实是一个“流浪”的故事。</p><p>##《三体》2/3部<br>标签：科幻小说</p><p>读书笔记另开了两个新坑：</p><p><a href="http://www.yangyingming.com/article/367/" target="_blank" rel="noopener">刷新世界观的《三体：黑暗森林》</a></p><p><a href="http://www.yangyingming.com/article/369/" target="_blank" rel="noopener">最终的归宿，《三体：死神永生》</a></p><p>##《Mactalk·人生元编程》<br>标签：技术杂谈、Mac</p><p>池建强的这本书早就听闻大名，买回kindle之后才有机会拜读一番。</p><p>总的来说这本书是一本技术和Mac杂谈，也是作者的博客文集。作者以幽默轻松的口吻讲述讲述技术上一些晦涩难懂的问题，所以读起来并不困难，即使你是非IT人员，也可以作为一名科技爱好者读一读这本书。</p><p>另外，这本书成功激起了我买Mac的热情，我只想说，如果你读完也被安利了，别找我。（捂脸）</p><p>##《我兔斯基你》<br>标签：绘本</p><p>兔斯基的作者，王卯卯的新书，每一页兔斯基为你讲述一个人生哲理，有些还挺扎心的。</p><p>为了情怀而买，毕竟是当时用的最多的一款qq表情，还有和同学一起画兔斯基的美好记忆。</p><p>现在画兔斯基的线条还熟练的记得，不知道那位小伙伴还记得不~</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/3f1f7a1d-6f85-49d6-a985-7d1b30e4fac9.png" alt=""></p><p>貌似画歪了……</p><p>##《腾讯传》<br>标签：公司传记</p><p>《腾讯传》，这应该是我看的第一部公司传记，感觉非常不错。作者吴晓波为了写出这本书，走访观察了腾讯公司五年，期间经历过互联网浪潮的多次变迁和事件，比如移动互联网的兴起，3Q大战。可想而知，这本书的思想重心和阐述角度也随着腾讯公司的发展不断的变化。</p><p>通过这本书，可以看到一个中国式的it公司是如何崛起并打败外企逐渐占领国内多个领域的市场的过程，这是一个具有中国特色的创业故事。</p><p>如今的“腾讯帝国”，不仅是马化腾一个人的成功，也是腾讯公司内部无数团队和领导共同奋斗的结果。腾讯内部独特的“赛马机制”，让很多诞生于微末之中的优秀产品有机会繁荣发展。qq秀，qq空间，微信，都不是当时公司规划攻坚的产物，而是起源于某个人某个突发奇想的点子中，是腾讯优秀的土壤让这些点子开花结果，生长成一棵棵参天大树。</p><p>看这本书的过程，不仅让人了解了腾讯这家公司的发展史，也让人通过腾讯这个参照物，纵观了中国it行业的发展轨迹。</p><p>正如吴晓波自己所说，“写作这本书的过程，极大提高了我的互联网智商”。</p><p>##《环界1·铃》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/0f4eab3c-dafc-47fb-8039-3268bd551715.jpg" alt=""></p><p>标签：科幻、悬疑、恐怖小说</p><p>《环界》系列于上个世纪被改编成恐怖电影，以《午夜凶铃》之名闻名于全世界，相信从黑白电视机里爬出来的披头散发的贞子形象已不知道深深扎根于多少人的脑中，成为“恐怖”这两个字的代名词。让我们脑中浮现出偏僻安静的角落，狭窄昏暗的空间，老旧的黑白电视机这样的画面时，便不由得想起一度被“贞子”支配的恐惧……</p><p>《环界》系列作者是铃木光司，它本身的定位是科幻小说，作者说很高兴看到这部被严重误读的作品重新以它的原名字“环界”的名字再版。说实话，刚开始知道《午夜凶铃》原著原来是定位于科幻小说的时候我也是一脸懵逼的……具体了解之后，我才知道在荧幕形象之外，“贞子”系列还有作者想表达的、更深层次的意思，以及那之外，更广阔的的世界。</p><p>回到故事本身，《环界》第一部所讲述是一个<strong>“病毒”诞生</strong>的故事，它通过录像带诅咒的方式传播，中了这个诅咒的人一个周之后便会猝死，破解诅咒的方式却被一群青年草率地抹去，于是就有了第一部的故事。主人公为了找到破解诅咒的方法而找寻线索，随着他的努力，真相逐渐逼近……</p><p>整个故事节奏明快、气氛压抑紧张，让人读起来有一种强烈的代入感。第一部的故事中，科幻的元素还没有彰显，但“恐怖”和“悬疑”的气氛渲染地十分的优秀，能拍成闻名世界的恐怖电影得益于作者对恐怖元素的把握。整个故事线只有一条主线，便是<strong>“破解诅咒”</strong>，小说全部的氛围和细节描写全部围绕着这个主题展开，这使得读者可以全情投入到小说的剧情发展中，随着主角的探索而一步步揭露真相，这种如影随形的恐惧感正是恐怖小说的精髓。你可以一口气读完这部不算长的小说而在最后大呼一个“爽”，这正是这本书的魅力所在。</p><p>其实书中描述的诞生于贞子的这个“病毒”或者说“诅咒”，在网友的总结中有一个共同的名称，那就是——<strong>“模因武器”</strong>，它的使用在网文《无限恐怖》中发挥的淋漓尽致，感兴趣的童靴可以看看。</p><p>书中的“贞子诅咒”以录影带为媒介呈病毒式传播，第一部的故事讲述的正是这个诅咒刚刚开始传播的时候发生的故事。<strong>“病毒式传播”</strong>本身是一个令人窒息的传播形式，如果被传播的对象是能取人性命的诅咒，那它造成的恐怖感觉将如浪潮般冲击人的感官。我在文艺作品中看到的类似的以“病毒式传播”营造恐怖气氛的还有伊藤润二的代表作《富江》漫画系列，每一个富江身体的一部分都可以增殖为另一个富江，而每一个被富江迷住的人都想要分尸富江…… 伊藤润二是日本的恐怖漫画大师，他的作品通常充斥着黑暗、压抑、绝望的气氛，气氛渲染是他的一绝，感兴趣的可以去看看他的作品。</p><p>##《环界2·螺旋》</p><p><strong>轻微剧透，慎入！</strong></p><p>和《环界1》不同的是，《环界2》剧情要复杂一些，除了主角安藤的剧情线，同时发展的还有高野舞的剧情线，最后两条线相交，碰撞产生出后期的真相。</p><p>第二部的故事十分玄幻+科幻，如果说第一部还十分矜持，仅将重点放到气氛渲染和破解诅咒追查贞子过去的过程中，那么第二部就是想象力的迸发，围绕着龙司留下的谜题，主角安藤一步步追查，破解出的谜题答案也一个比一个离奇，这是一部没有作者引导你看了开头绝对猜不到结尾的故事。可以说，第二部的“病毒”发展，已经完全跳出了第一部结尾的猜想。如果你在看完第一部之后，长叹“噢，原来是这样”，到了第二部你就会不断惊呼，“咦？这怎么和开始说的不一样！？”究其原因，是因为在第一部中病毒就产生了“突变”，到了第二部它已经不再按常规的方式传播，思维跳跃之大，令人惊叹。</p><p>看我以上的描述，你应该可以了解到第二部的主线是<strong>“解谜”</strong>，谜题的出现十分玄幻，但看到后来似乎又合情合理，毕竟《环界》前两部是建立在“存在超能力”这一前提下，发生什么事都可以用“超能力”来解释，不过“超能力”在解谜过程中和科技的结合倒也是本书的一大看点。</p><p>其实当我看到“超能力”出现在这本以“科幻小说”为定位的小说中时，我是拒绝的，因为这降低了这套小说的科学性，到了第二部，这种玄幻风更加强烈，甚至一度看的我晕头转向，希望第三部的反转具有说服力。</p><p>##《环界3•环》</p><p>《环界3•环》是《环界》系列一个重要的节点，它把一部带有浓厚恐怖气氛的小说成功转换成了一部硬科幻小说。</p><p>第三部的主线是<strong>“破解癌症病毒”</strong>，这里的“癌症”是指从贞子病毒变异而来的传染病，可以感染人类并致死。在这一部中，几乎没有贞子的情节。主角阿馨为了解救自己的亲人，踏上了找寻破解癌症方法的道路，随着越来越接近宿命中的位置，他也得知了令人震惊的真相……</p><p>当阿馨得知自己使命的那一刻，我身为读者也猛然知晓了为什么这部小说能从恐怖小说一下子转换为一部硬科幻小说。那一刻，两个世界的交点被打通，身为读者，体会到了一种奇妙的重叠感和贯通感，这正是这一部的魅力所在。</p><p>总的来说，第三部没有让我失望，作者设定的世界架构在这一部中才真正的铺陈开来，但在这个过程中读者却浑然不知，直到后期才猛然抛出引子，一下子沟通了两个世界。</p><p>##《环界4•新生》</p><p>《环界4•新生》是“环界”系列的最后一部，它没有明确的主题，以多条不相关联的剧情线描写了几个角色的后续发展，想表达的似乎只是<strong>“交代人物结局”</strong>，所以这一部小说与其说是大结局，不如说更像一部“环界”系列的番外。</p><p>总体上说，“环界”系列的最后一部没有前三部出色，它<strong>不恐怖，不科幻，不惊艳</strong>，作者用不愠不火的笔法对过去几部出现的几个人物的结局进行了交代，为“环界”系列画下了一个“低调”的结局。</p><p>环界总结帖：<a href="http://www.yangyingming.com/article/375/" target="_blank" rel="noopener">《环界》（午夜凶铃）系列读书笔记</a></p><p>##《只是为了好玩》</p><p>标签：人物传记、科技</p><p>这本书是linux之父林纳斯•托瓦兹的自传，是他和一名职业撰稿人合著而成，全书由林纳斯的第一人称口述和合著人的评论组成，讲述了林纳斯的成长经历，linux的创造和发展，以及一些开源运动的看法。</p><p>其实这本书并不合我的口味，甚至可以说是糟糕。这并不仅仅因为前期看它的盗版电子书带给我的破坏性的阅读体验，也是因为其内容并不是真的那么吸引人。可以说除了林纳斯从零开始开发linux操作系统的那一段让我看的入迷，本书的其它章节都十分枯燥无味，大都是一些琐碎及无聊的点，它并不“有趣”。</p><p>这里只说对这本书的看法——它明明可以写的更加有趣——我对林纳斯本人做出的成果是十分崇敬的。林纳斯是个标准的极客，他创造linux的最初动机仅仅是因为好玩，因为亲自动手做出这样的系统对他来说是一件成就感爆表的行动，而他可以为了达成这个目地不考虑时间和金钱的消耗，也不求有什么回报，仅仅为了贪图搭建系统过程中和搭建完成瞬间的极致快感。这样的心态，才是他最终完成linux系统，名留千古的原因。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/373" target="_blank" rel="noopener">第一季度阅读记录</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>“一波三折”的考研调剂之路</title>
      <link href="/2017/04/04/%E2%80%9C%E4%B8%80%E6%B3%A2%E4%B8%89%E6%8A%98%E2%80%9D%E7%9A%84%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%B9%8B%E8%B7%AF/"/>
      <url>/2017/04/04/%E2%80%9C%E4%B8%80%E6%B3%A2%E4%B8%89%E6%8A%98%E2%80%9D%E7%9A%84%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/4/4505fd48-3be0-49b6-a21c-12d81615061d.png" alt=""></p><p><strong>注意：长文预警</strong></p><p>现在是2017年4月4日，外面是初春蒙蒙的细雨，而我刚结束了一个多周的奔波，回到温暖的家中，在笔记本前记录下我颇具故事性的调剂之路。</p><p>在这段时间里，我见到了呼和浩特的三月飞雪，也体会到魔都现代而大气的大都市风貌，最后带着一路风尘回到亲切的家乡，青岛——这里有熟悉而牵挂的人。<br><a id="more"></a></p><p>##中国海洋大学</p><p>我是往届生，今年是第二年考研，一志愿学校是中国海洋大学。之所以报考中国海洋大学（以下简称海大），一方面是以为它足够好考，且离家很近，另一方面是因为女票去年考在了这里。报考的时候我也没有太过思量，报考了和女票一样的专业就开始着手准备租房复习了。</p><p>事实证明，不能小看任何一所985学校。他能在你放松警惕的时候给你当头一棒，要知道任何一所985都可能成为某一年争相报考的对象。而今年，我不小心撞到了海大的铁板上。</p><p>今年的计算机技术专业是海大信院报考最火的一个专业，最后定复试线的时候比去年高了80多分，划到了344。</p><p>从看到复试线的那一刻开始，我就知道我的调剂之路开启了。</p><p>事实上，在复试线出来之前几天，我就知道今年海大基本没戏了。今年3月15号出国家线，出国家线的当天我便来到海大，和女票一起联系了她的导师，打算打听一些内部情况，老师给我的答复是今年一志愿很满，基本没有校内调剂的希望。听到这个消息，我和女票都有些失落，因为这意味着我们要分开了。</p><p>不过我们很快便开始着手联系调剂，在3月17号调剂系统开通的当天，我和女票全天蹲守在电脑前，把有希望的学校的招生办电话挨个打一遍，对方的态度有好有坏，比如福州大学的女老师就比较耐心，而中国地质大学的老师就很烦的样子，不过这个可能也和学校专业的热门程度有关。</p><p>由于调剂系统一次只能填写三个调剂，而且填上了48小时之内不能修改，所以我们填写的时候十分慎重。调剂系统刚刚开通的那个上午系统十分的拥堵，打开一个页面要刷新几十次才行，而且经常无缘无故的需要重新登录，所以上午填写志愿的时候每一个步骤都举步维艰。后来系统终于崩溃，几十分钟后又重新恢复了访问，系统恢复的初期访问速度明显有了改善，我趁这个机会填写上了自己的第一个志愿，<strong>福州大学</strong>。然后不久又填写上了<strong>北京林业大学</strong>，后来证明这是个错误，北京林业大学直到我出发去参加调剂学校的复试志愿也没有被查看。最后在下午五六点钟，我填写上了<strong>内蒙古大学</strong>。</p><p>##内蒙古大学</p><p>填写完初期三个调剂的第二天下午，我就收到了内蒙古大学（以下简称内大）的复试通知，当时是颤抖着手点击了“接受复试”，而女票在旁边小心翼翼生怕碰到鼠标不小心点击到拒绝。</p><p>接受复试通知之后，我就回到家里，开始准备内大的复试。内大复试时间是25-26号，24号要去报道，于是我买了23号的机票，留给我的时间并不多。人生中第一次坐飞机是去往呼和浩特参加复试，这个时候我还不知道自己未来几天的命运将会是怎样，我怀着忐忑而期待的心情坐上了飞机。</p><p><strong>初到呼和浩特（23号）</strong>，是雨夹雪的黑夜。雪花在机场的路灯下飘飞，地上很快聚起了一洼洼的水。我叫了一辆快车，司机困在了停车场，于是我打着伞过去找他。在去学校的路上，我初次感受到了呼和浩特和沿海城市的不同，这里人少，路宽，路牌上用汉语和蒙文双语标注，城市里汉人和蒙古人半对半，整个城市透着一股安静的气息，和沿海城市繁华嘈杂的气氛有很大不同。</p><p>出租小哥也是搞“计算机”的，兼职快车司机。他是做监控设备这方面，我问他内蒙计算机行业如何，他说公司不多，大部分是像他一样搞偏硬件的，做程序开发的并不多。</p><p>到达酒店门口的时候，外面已经开始下起了鹅毛大雪，我踩着之前落下的雨水走进“香江大酒店”，这里金碧辉煌，不像一个150+元住一天的旅馆。即使这两天研究生复试，周围旅馆的涨幅也克制在50元以内。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/b1713dc0-28b8-4a81-800d-b18aa02b6ba9.jpg" alt=""></p><p>由于大床房满了，我的房间换成了一个豪华标准间，房价不变。对我来说都一样，倒是空出来一张床显得有些尴尬。房间很宽敞，设施也比较齐全，在床上休息了一会儿后，我下楼买些东西。走出酒店的门，惊喜地发现外面已是银装素裹，路边和书上都覆满白雪，在昏黄的路灯下泛出莹白的光。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/b8155000-b07f-474f-8240-17b89d686b7d.jpg" alt=""></p><p><strong>第二天，也就是24号</strong>，去学校报到。外面的雪仍没有化，下天桥的时候，大家扶着扶手，生怕脚下一滑，滚下天桥，那样子可难看了。走过街边的天桥之后，就看到内蒙古大学的东门。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/32228b28-730d-485f-bcec-f1d189f7de00.jpg" alt=""></p><p>虽然在网上查过很多次内蒙古大学的地图，甚至我用街景地图已经把校园逛了一遍，但真正身临其境的时候，还是有种神奇的感觉，好像自己曾经来过这里一样。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/db03cb0d-954c-4aa7-a4e7-8c82f0f417b7.jpg" alt=""></p><p>我循着脑中的路线走过桃李湖，路过图书馆，便看到伫立在雪中的计算机学院。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/05416b79-7109-447a-b6ea-f60def481610.jpg" alt=""></p><p>在二楼完成报到之后，我回到旅馆开始准备复试，晚上到学校的综合楼里上自习。</p><p><strong>第三天，也就是25号</strong>，正式迎来了复试。上午笔试，分别是英语和专业课。英语45分钟，20道选择题，1道翻译大题（英译汉），1道作文题。选择题考语法，忘得差不多了，翻译答得还行，作文马马虎虎。专业课90分钟，考了6道编程题，前4道简单，后2道比较麻烦，不过都属于水题范围。考试结束前5分钟答完卷，没时间检查，不过写得程序应该没问题。</p><p>考试结束后松了口气，在考场外面的公告上得知专硕是明天面试，中午跑去网吧呆了一个小时，趁着还有印象，把上午专业课考试的题目回忆了出来，下午和晚上都在综合楼准备面试的内容。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/c72a7084-d92c-4702-b43d-458882acba87.jpg" alt=""></p><p><strong>第四天，也就是26号</strong>，上午我先去校医院完成体检，然后去研究生楼去看看面试的情况。我是我那一组倒数第三个面试的，本来以为会排到下午，结果看时间中午就能到我，于是在外面和大伙一起准备复试。</p><p>等待的时间是紧张的，我一遍一遍的背着自我介绍的英文稿，每出来一个人我们就围上去问这问那。期间了解到排到最后的我们三个人都是报同一个老师的，报考的老师就是这一组的考官之一。</p><p>终于到我了，进去之后，里面有五六位老师，我报考的老师先介绍了面试流程，分两部分，第一部分是英文问答，第二部分是综合水平问答。英文部分先让我自我介绍，我背了准备的英文稿，大概几分钟，然后我报考的老师问了我两个问题，第一个问题是为什么选择报考他，第二个问题是你的研究生期间的计划。第一个问题我简单说了一下老师的研究方向，希望能跟着老师学到更多知识。第二个问题我把plan听成了play，没理解老师的意思，于是狗带。第二部分是综合水平问答，老师问了我是哪个大学毕业的，我说是烟台大学，老师又问烟台大学是哪一年建校的，我：？？？ 好在想起刚刚过了30年校庆，也算答了上来。老师又问了一些大学期间的经历，看我参加acm，就问了些竞赛的问题，我就如实回答。我报考的这个老师问我对概率论的认识，和深度学习有什么关系，我说了我的认识，但是感觉答的不太好。问题比较琐碎，问什么的都有，我知道多少就回答了多少，马马虎虎结束了面试。</p><p>出来之后还是比较轻松的，因为来内大要做的事情已经全部做完了，接下来只要等待结果就好。</p><p>下午逛了逛内大的校园，那天天很晴朗，让我见识到了内蒙古的天高云淡。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/ad9c86d1-d8fa-4d75-ba34-6d8dd8e54a0d.jpg" alt=""></p><p>晚上去网吧把专业课笔试题目的源代码回忆了出来，并发布到了博客上。<a href="http://www.yangyingming.com/article/371/" target="_blank" rel="noopener">2017年内蒙古大学计算机复试笔试题目及源码解析</a></p><p><strong>第五天，也就是27号</strong>，收拾东西准备回家。刚出旅馆，一直在关注内大群动向的我发现有人拍了复试排名的照片发到了群里，我在计算机技术的那张名单里找到了自己，13名。我的初试名次是50名，复试提高了30多名，应该是专业课往上拉了拉分。看到名单上有自己的时候，心情格外激动，这意味着我今年有学上了！心中一块大石头落地，心情也开朗起来，一直以来绷紧的神经也终于能放松一下了。</p><p>在去机场的出租车上，我兴奋的把这个消息告诉了爸妈和女朋友，看着呼和浩特晴朗的天空，心中的透亮了不少。站在呼和浩特白塔机场的二楼检票口处，看着远处白雪皑皑的连绵雪山，雨雪过后的天空格外湛蓝，我放佛呼吸到了草原吹来的泥土芬芳。这一切都是那么美好，那个时候我在想，这就将是我要学习两年的地方。</p><p>在内大复试的这几天，对我来说，是一段神奇而值得回忆的日子，它让我见识到了北国草原之地的城市气息。这里的天很蓝，云很高，一切显得辽阔而静谧。人来人往之中，像是曾遗失在梦中的明珠。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/9a373290-60e0-4b84-aa41-ed650657d263.jpg" alt=""></p><p>然而，命运就是这么的无常，他在我最放松的时候让我的心情重新奔赴前线。在飞机准备起飞之前，我收到了华东师范大学的复试通知。</p><p>##华东师范大学</p><p>其实填写华东师范大学为调剂志愿的时候，我并没有报太大的希望，只是Z老师让我填上试试，我就抱着死马当活马医的心态填上了，毕竟华师也是我去年报考的学校，对那里，我还是存有一丝向往的。</p><p>27号中午收到复试通知的时候，我刚刚登上从呼和浩特飞往家乡青岛的飞机上，当时屁股还没坐热，手机上突然收到一条短信，通知我华师给我发了复试通知。</p><blockquote><p>没有一点点防备<br>也没有一丝顾虑<br>你就这样出现在我的世界里<br>带给我惊喜 情不自已</p></blockquote><p>这几句歌词大概就是我当时的心情吧，趁着飞机还没起飞，通知了爸妈和女票，然后仍不能自已的坐立不安，眼前呼和浩特的机场也放佛变得和上一秒不同了起来。</p><p>内大这边刚刚得知通过了复试，我还要不要去参加华师的复试？即使去参加了，有希望录取吗？华师的复试时间和内大的确认时间冲突了怎么办？</p><p>带着心中纷飞的思绪，飞机冲上云霄。</p><p>虽然收到了华师的通知，但它此时在我心中，不管是距离上还是心理上仍是一个遥远的名词。就像地面上星罗棋布的城市建筑，在穿越云层之后就已变得虚无缥缈。</p><p>华师复试通知的出现彻底打乱了我的心绪，不过没过多久我就决定去尝试一下。不管怎么样，先去上海再说。</p><p>飞机落地在青岛流亭机场，爸妈来接我，在回家的路上，我订上了当天晚上飞往上海的机票。四个小时后，我们又开车回到流亭机场。这一次，我收拾好还在躁动的心情，怀着对未来几天的忐忑，踏上去往上海的路途。</p><p>在去往上海虹桥机场的飞机上，我没有了欣赏景色的心情，和前两次坐飞机不同，这次窗外是漆黑虚无的夜色。机舱中坐满安静而略微疲倦的人们，或沉默的看书，或眯眼休憩，只有乘务员在过道走动的声音。我坐在最后一排，默默等待着飞机降落。</p><p>人生中第一次去上海，心中竟没有多少激动之情。</p><p>27号晚上快11点的时候飞机抵达上海虹桥机场，机场出乎我意料的大，光出站就走了10分钟。我先下到最下面一层，发现地铁已经下班，于是从一个不是出口的出口走出来。在高架桥上随手拦下一辆出租车，司机说现在送往华师要一百多块钱，我说那先送我到附近的旅馆吧，于是他和一个人接了头，那个人把我送到了他们家的旅馆。</p><p>来上海的第一晚，就住在这个家庭旅馆的房间中，并没有来得及窥探一下大上海的繁华。</p><p>这家旅馆一晚上120元，旅馆条件很差，安全性也值得怀疑，我穿着衣服睡了一晚，好在第二天早上房东（就是昨天送我来的那个小哥）把我送回机场，看样子人还不错。</p><p>28号上午在虹桥机场的地铁站买上票，5元钱（好像是）坐到金沙江路站，用了半个小时，出站后往南走了几步就看到了在网上看过的华东师范大学的东门。站在华师古朴的大门前，那种身临其境的感觉又涌上心头，没想到机缘巧合之下还有机会站在这里，可能真的和华师有缘分吧。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/58929f5f-712e-40ee-a34c-338eb7248679.jpg" alt=""></p><p>订的旅馆就在东门对面，我住下之后联系了在华师的J学长，学长很给力，没多久就出现在东门，下午带我去复试的地方踩了下点，然后带我吃了顿晚饭。果然在外还是学长亲啊，眼泪汪汪。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/07cdd96c-ee3f-453a-a997-0cafebbdfa78.jpg" alt=""></p><p>告别了学长之后已经是28号下午5点多，上海的天气已经不复刚来时候的晴朗，天空变得灰暗，似乎有下雨的迹象。在回旅馆的路上，我漫不经心的翻看手机qq里的消息，突然发现内大群里有人说收到了录取确认通知。这个时候天空已经有雨滴落下，我心中一跳，走到路边花园的凉亭里避雨，同时也似乎在默默等待着那个消息的到来。</p><p>果然，在5点46分的时候，我收到了内蒙古大学的录取确认通知，上面说让我明天也就是29号上午8点之前确认录取，否则视为放弃。</p><p>收到这条消息的时候我的心情是崩溃的，华师的复试时间是30号，和内大的确认时间只差一天。</p><p>这个时候我要么放弃华师的复试机会，动身返程，就当来上海玩了一圈；要么放弃辛苦得来的内大录取机会，冒着华师可能复试失败，今年没有学上的风险参加后天的复试，而这个选择我必须在今天晚上做出。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/87dd1d96-c060-412c-888a-36c9f22ea3a4.jpg" alt=""></p><p>挣扎再三之后我还是选择了赌一把华师，如果我放走了眼前的机会，我相信我会后悔的。</p><p>29号一天的时间在准备复试中度过，我在旅馆的小房间里刷题，看复试经验，一直到晚上11点。由于我的房间楼上靠近KTV，所以睡觉的时候格外吵，我去楼下要了一对耳塞，才渐渐进入睡眠。</p><p>30号早上7点多收拾好东西从旅馆出发，简单吃过早饭之后，8点之前来到华师的理科楼。今天的<strong>复试安排</strong>是上午8：00~8：30报道，8：30~11：30三个小时机试，下午1:00开始面试。</p><p>我报道算是早的，结束之后来到机试的机房外，只有我和另外一个同学在这等候。这个时候机房还没开门，因为有一张志愿表需要填写，所以我和这个同学到外面找了个地方填写表格。</p><p>我们重新回到机房的时候发现大家都已经坐好，这个时候离开始机试还有10分钟。我赶紧找到自己的座位，刚开机打开浏览器，比赛已经开始。还好codeblocks我比较熟悉，不怎么需要调试，静下心来之后就开始做题了。</p><p>题目一共有5道，前两道是水题，后三道题稍有难度。第一道题求多个数的最小公倍数，不难，很快Accept；第二道题是求一个由小写字母组成的字符串中的字母可以组成多少个模式串，也不难，但是代码提交之后有一组测试数据没过，考虑了一会无果，暂时略过；第三道题是给你N个长度不一的木棍，问你这些木棍能组成的最大的三角形的面积，应该是DFS+三角形面积公式，可惜忘记海伦公式，暂时放弃这道题；第四道题是给你N个数，求出每个数的哈夫曼编码，有点麻烦，我用数组构建出一棵哈夫曼树，从底向上遍历每个节点后得到哈夫曼编码，解决了一些bug之后，提交AC；第五道题是求凸包周长，计算几何题，正好手头有模板，我也不用费脑子还原了，套上AC。过了一遍题之后回头再看第二道题，发现一个忽略的bug，解决后提交AC。这个时候时间不多了，我只来得及把第三道题的DFS框架敲上，在比赛结束前提交了一下，竟然还过了一组数据。至此，比赛结束，5道题总共AC了4道。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/e475c5a9-4fc1-462d-90ea-0beb4b4b9d8f.png" alt=""></p><p>如果再给我十几分钟，再让我想起来海伦公式，说不定能全部AC，但世界上没有后悔药，尽管机试有遗憾，但做到这一步已经算是我的正常发挥，接下来更重要的是准备下午的面试。</p><p>中午时间很紧张，从11:30机试结束到下午1:00开始面试只有1个半小时时间，另外上午报道的时候才从发的文件上得知每人需要准备一份个人简历，于是我赶紧去打印社打印出7份个人简历，由于看黑白打印的照片不好看，我又重新打印了7份彩色的个人简历。打印完去食堂看了一圈，发现人巨多还不能用现金，于是我决定回到打印社把获奖证书也每人打印一份装订起来，这样给老师看的时候也显得比较正式。证书比较多，打印完挨个分好装订起来已经快到1点，已经没有时间再去吃饭，于是我在超市买了些面包零食之后就提着袋子去面试准备室了。</p><p>去准备室的路上又碰到那个同学，找到准备室之后发现我们俩又是最后两名…… 从老师放映出的安排来看，我这一组一共6个人，我是第4个。还好，时间还算充足，我和老师说了一声后，提着袋子跑出去，拉了张椅子一边吃东西，一边背英文自我介绍。这个时候其实我已经饿过了头，肚子吃不太进去东西，但是时间紧张，为了补充能量，我还是往嘴里硬塞着。果然，过了一会肚子开始不舒服，我拿起纸巾十分别扭地跑去厕所，一进隔间便开始翻江倒海，上吐下泻。把刚才吃过的还没来得及消化的东西都吐了出来，不过肚子汲取了一波养分之后已经不再空虚。走出厕所后我发现再难的也已经不过如此，身体虽然虚弱，但精神上已无所畏惧。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/d0e64e2d-6d07-4725-8daf-11d208563cf7.jpg" alt=""></p><p>回到准备室没多久我就出发去面试的地点，刚到门口我就看到有个人影一闪而过，我还以为我上一个人已经结束了面试，于是我敲门进去，结果发现里面正有一个人在面试，一大波老师也正看向我……我赶忙一脸懵逼的说着sorry慢慢关上门，然后就在门外大脑短路般的准备着一会儿的面试。</p><p>进去面试之后，几位老师都很和蔼，最左边的老师先让我抽取一个英文文献片段和两个专业问题，我分别抽取了第一张和前两张。首先是用英文读一遍文献，然后再翻译出来，我一看我抽到的英文文献正好是毕设时曾接触过的支持向量机（SVM），于是比较顺利的翻译出几个关键的专业词汇。之后右边第二个老师问了我两个关于SVM的问题，第二个实在答不上来，老师也没再为难我。然后是两个专业问题，第一个是数学问题，我不擅长，干脆直接放弃。第二个是无线通信技术的分类有哪些，这是在计算机网络中学过的概念，我只记得GSM和CDMA，坐在最中间的老师问我CDMA中的C是什么，老师说是码分我才回想起来，接着老师问我除了码分还有什么，我想了一会儿说……时分？老师点了点头说时分的英文是什么？我也不知道当时是脑抽了还是怎么的说了个Date，其实应该是Time的……老师说就是TDMA嘛，我才恍然大悟，捂脸无语凝噎……接下来老师又聊天式的问了我几个问题，比如平时有什么兴趣？我说看书，听音乐，看美剧。老师又问喜欢看什么类型的书？我说东野圭吾的侦探悬疑类小说和刘慈欣的科幻小说基本都看过。你做过的让你自豪的事情是什么？我说写过一个编译器前端和操作系统文件系统，老师又问了一下编译器前端的问题。后来老师还根据简历问了一些问题，比如问我你们学校的OJ是怎么搭建的等等。</p><p>面试问到的问题大概就这些了，其实华师的面试主要是前面抽到的题比较随机，可能抽到有难度的题，后面的问题相对就比较轻松了，因为都是自己参与过的，问起来如实回答就可以。</p><p>总体来说，华师的面试气氛是十分Nice的，老师会尽量使面试显得放松，使考生能正常发挥，必要的时候也会引导考生回答问题。其实不管怎么样，面试前充分准备，面试的时候保持放松自然的姿态，如实回答老师的问题，展现出自己的正常水平即可！</p><p>出来之后外面等待的考生说我待得时间挺长，但是我并没有什么感觉，难道面试的时候时间流速真的加快了？是不是有小伙伴和我一样的感觉。</p><p>和这个考生说了面试的情况后，我给老爸老妈女朋友老师挨个打了遍电话，说了下复试的情况，然后去找学长唠了会嗑。</p><p>走出理科楼的时候，外面还是不晴朗的天气，但此时心情已然不同。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/fc7aa17b-f453-43ce-94c6-034106fc9fb2.jpg" alt=""></p><p>考完之后一身轻松，我又体会到内大复试结束之后的感觉，但这次应该没有再让我吃惊的转折，不然我可要扑街了。</p><p>虽然复试算是正常发挥，但是没出结果前内心还是惴惴不安。好在华师办事效率很高，晚上在去找同学玩的公交上收到了华师的录取通知短信，我在公交上按捺住自己激动的心情，但还是忍不住迫不及待的点开调剂系统待录取页面接收了待录取通知。</p><p>接下来几天找同学、学长分别蹭了两顿饭，去上海大学逛了一圈，在异地他乡见到同学和学长格外亲切。</p><p>4月1号乘坐晚上的飞机回到青岛，至此，我的考研调剂之路结束。</p><p>##碎碎念</p><p>复试的这几个地方，多少都和我有一些缘分。</p><p>海大，是在家乡的一所学校，女朋友也在那里。<br>内大，身处有着辽阔草原的内蒙古，是我初中看过《狼图腾》之后，十分向往的地方，那时的梦想，就是去内蒙看看草原辽阔，牛羊成群。没想到有机会在复试的时候去一趟内蒙，也算了了半桩心愿。<br>华师，是我去年的报考学校，去年遗憾落榜，但仍向往着那个曾在网上查了无数次的学校。</p><p>最后记录一下时间，从3月17号调剂系统正式开通开始，到3月30号收到华师的待录取通知结束，总共经过了14天。</p><p>这14天的经历如果用飞机票展示的话，是这样的：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/27a64d9d-e30e-44c7-983b-c839e299808e.jpg" alt=""></p><p>如果用调剂通知来展示的话，是这样的：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/6c66a2c4-648e-4d2f-857f-da141c0fa19d.jpg" alt=""></p><p>不管怎么样，为期一年半的考研最后以戏剧性的方式结束了，这一路要感谢帮助过我的人，亲人、老师、女朋友、同学、学长学姐、实验室的小伙伴，你们的支持和鼓励是我走下去的动力！</p><p>能看到这里的小伙伴是真爱哇~~</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/4/d2caf6a7-0a28-469b-a6bf-d688dcf199ba.jpg" alt=""></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/372" target="_blank" rel="noopener">“一波三折”的考研调剂之路</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2017年内蒙古大学计算机复试笔试题目及源码解析</title>
      <link href="/2017/03/26/2017%E5%B9%B4%E5%86%85%E8%92%99%E5%8F%A4%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/03/26/2017%E5%B9%B4%E5%86%85%E8%92%99%E5%8F%A4%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>题目是考完了去网吧回忆出来的，除了一些细节，大体意思基本和原题一样。如果你看着没毛病，那说明我语言描述能力还行，哈哈。</p><p>代码也是我在网吧现敲出来的，由于源码在网吧 vc++6.0 和 codeblocks 以及 dev c 等IDE环境中编译运行有问题（可能网吧做了限制？百思不得姐），所以用 ssh 远程连接了我的 VPS，在 linux 环境下用 g++ 编译运行测试的。</p><p>以下输入输出测试样例均在 g++ 编译器下测试成功。<br><a id="more"></a></p><p>##第一题</p><p><strong>题目</strong></p><p>输入一组由正整数组成的数字序列，序列大小不超过500，遇到-1结束输入，判断这个数字序列是否是升序。如果是升序，输出“YES”，如果不是升序，输出“NO”。</p><p><strong>源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">600</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">600</span>;i++)&#123;<span class="comment">//输入数字序列</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">600</span>;i++)&#123;<span class="comment">//判断是否升序</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[i]==<span class="number">-1</span>)<span class="comment">//输出判断结果</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">7</span> <span class="number">10</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure></p><p><strong>注：每组样例请分开测试，即一次只运行一组。下同。</strong></p><p>##第二题<br><strong>题目</strong></p><p>输入一个正整数n，判断不超过n的所有数中与7有关的数有多少个。如果某个数是7或者是7的倍数，或者这个数的某一位是7，那么这个数便与7有关。举个例子，如果输入的n是20，那么20以内与7有关的数便是：7、14、17，最终输出结果是3。</p><p><strong>源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span> n)</span><span class="comment">//计算与7有关的数字个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//循环n以内的所有数</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">7</span>==<span class="number">0</span>)<span class="comment">//如果当前数是7的倍数，计数+1</span></span><br><span class="line">            cnt++;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> t = i;</span><br><span class="line">            <span class="keyword">while</span>(t)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t%<span class="number">10</span>==<span class="number">7</span>)&#123;<span class="comment">//如果当前数的某一位是7，计数+1</span></span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t/=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;getAnswer(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>##第三题<br><strong>题目</strong></p><p>输入一个正整数，判断这个数是否是“回文数”。所谓“回文数”，便是正着念和反着念都一样的数。比如，1、11、121、1221、12321，都是回文数。如果这个输入的数是回文数，那么输出“YES”，如果不是回文数，输出“NO”。</p><p><strong>源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isHuiwen</span><span class="params">(<span class="keyword">char</span> num[])</span><span class="comment">//判断是否是回文数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,len = <span class="built_in">strlen</span>(num);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)<span class="comment">//前后依次对比每一位数字，遇到不相等的情况，退出循环</span></span><br><span class="line">        <span class="keyword">if</span>(num[i]!=num[len-i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;len)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> num[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">if</span>(isHuiwen(num))<span class="comment">//输出判断结果</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">121</span></span><br><span class="line"><span class="number">1221</span></span><br><span class="line"><span class="number">12321</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1313</span></span><br><span class="line"><span class="number">123456789876543210</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure></p><p>##第四题<br><strong>题目</strong></p><p>输入两个字符串，str1 和 str2，将字符串 str2 逆序之后连接到字符串 str1 后面，最后输出str1。举个例子，如果输入的字符串 str1 是”abc”, 字符串 str2 是”123”，那么逆序连接之后，输出的结果为”abc321”。</p><p><strong>源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mycat</span><span class="params">(<span class="keyword">char</span> str1[],<span class="keyword">char</span> str2[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">strlen</span>(str2)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--)<span class="comment">//逆序连接</span></span><br><span class="line">        str1[j++] = str2[i];</span><br><span class="line">    str1[j] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">1100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> str2[<span class="number">1100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str1;<span class="comment">//输入两个字符串</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str2;</span><br><span class="line">    mycat(str1,str2);<span class="comment">//逆序连接</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;str1&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出连接后的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc <span class="number">123</span></span><br><span class="line"><span class="number">12345</span> <span class="number">12345</span></span><br><span class="line"><span class="comment">/*** /***</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc321</span><br><span class="line"><span class="number">1234554321</span></span><br><span class="line"><span class="comment">/******/</span></span><br></pre></td></tr></table></figure></p><p>##第五题<br><strong>题目</strong></p><p>首先输入两个正整数，m(2&lt;=m&lt;=36)和n(2&lt;=m&lt;=36)，然后输入一个m进制的数字串，将这个数字串转换为n进制并输出。如果进制超过9，那么用小写字母’a’到’z’依次表示10~35的数字。（假设数字串对应的十进制数用int存储不溢出）</p><p><strong>源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toTen</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">char</span> s[])</span><span class="comment">//将m进制的数字串转换为十进制并返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,d = <span class="number">1</span>,num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="built_in">strlen</span>(s)<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//循环该数字串，将每一位上的位值和位权相乘，累加结果便为对应的十进制数</span></span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'a'</span>&lt;=s[i] &amp;&amp; s[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">            t = <span class="keyword">int</span>(s[i]-<span class="string">'a'</span>+<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t = <span class="keyword">int</span>(s[i]-<span class="string">'0'</span>);</span><br><span class="line">        num+=t*d;</span><br><span class="line">        d*=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toN</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> n,<span class="keyword">char</span> ans[])</span><span class="comment">//将十进制数num转换为n进制数，并存储在ans数组中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">1100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;<span class="comment">//辗转相除法</span></span><br><span class="line">        <span class="keyword">int</span> yu = num%n;</span><br><span class="line">        num/=n;</span><br><span class="line">        <span class="keyword">if</span>(yu&gt;<span class="number">9</span>)</span><br><span class="line">            temp[i++] = <span class="keyword">char</span>(yu<span class="number">-10</span>+<span class="string">'a'</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[i++] = <span class="keyword">char</span>(yu+<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = i;</span><br><span class="line">    <span class="keyword">for</span>(i=i<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        ans[len-i<span class="number">-1</span>] = temp[i];</span><br><span class="line">    ans[len] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">1100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ans[<span class="number">1100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;<span class="comment">//输入m和n，以及m进制的数字串</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> num = toTen(m,s);<span class="comment">//将m进制的数字串转换为十进制数</span></span><br><span class="line">    toN(num,n,ans);<span class="comment">//将十进制数转换为n进制数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出转换后的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">1024</span></span><br><span class="line"><span class="number">16</span> <span class="number">2</span></span><br><span class="line">ffff</span><br><span class="line"><span class="number">16</span> <span class="number">8</span></span><br><span class="line">ffff</span><br><span class="line"><span class="number">16</span> <span class="number">10</span></span><br><span class="line">ffff</span><br><span class="line"><span class="number">20</span> <span class="number">10</span></span><br><span class="line">g</span><br></pre></td></tr></table></figure></p><p><strong>输出样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">1000000</span></span><br><span class="line"><span class="number">10000000000</span></span><br><span class="line"><span class="number">1111111111111111</span></span><br><span class="line"><span class="number">177777</span></span><br><span class="line"><span class="number">65535</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>##第六题<br><strong>题目</strong></p><p>输入一个正整数n(n&lt;=30)，输出n所对应的蛇形矩阵。举两个例子：</p><p>n=10时，蛇形矩阵为：<br>10 9 5 4<br> 8 6 3<br> 7 2<br> 1 </p><p>n=9时，蛇形矩阵为：<br> 9 8 4 3<br> 7 5 2<br> 6 1  </p><p>具体的蛇形矩阵变化路径见下图：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/34aa4fd4-e8e0-4f56-886f-a46ec69e4fd0.png" alt=""></p><p>所以只要根据路径的变化规律依次生成蛇形矩阵中的数字，然后输出矩阵就可以了。</p><p>生成矩阵的主要 <strong>思路</strong> 是按顺序将递减的数字依次填到相应的位置，解题的关键是如何确认下一步的矩阵位置。在我的算法里，我用变量 s 控制路径拐弯之后到下一次拐角之间的路径长度，变量 i 控制下一个位置的行号，s-i 控制下一个位置的列号，d 控制路径方向（向下走还是向上走），n 控制下一个要填的数字。有了下一个矩阵的位置和数字，将数字递减到 1 即可生成蛇形矩阵。</p><p>一个 <strong>小窍门</strong> 是在矩阵中标出每个位置的行号和列号 (i,j) ，然后观察 i 和 j 的变化规律，想出办法用几个变量去控制这个规律即可。</p><p><strong>源码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a[][<span class="number">10</span>])</span><span class="comment">//输出n对应的蛇形矩阵</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s =<span class="number">0</span>,i=<span class="number">0</span>,d=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">1</span>)&#123;<span class="comment">//生成蛇形矩阵，存储在a[][10]数组中</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;=s)&#123;</span><br><span class="line">            a[i][s-i] = n--;</span><br><span class="line">            cnt++;</span><br><span class="line">            i+=d;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">        d = -d;</span><br><span class="line">        i = d&gt;<span class="number">0</span>?<span class="number">0</span>:s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;<span class="comment">//输出n对应的蛇形矩阵</span></span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>]&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]&gt;<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">10</span>][<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    display(n,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">9</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">30</span> <span class="number">29</span> <span class="number">25</span> <span class="number">24</span> <span class="number">16</span> <span class="number">15</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">28</span> <span class="number">26</span> <span class="number">23</span> <span class="number">17</span> <span class="number">14</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">27</span> <span class="number">22</span> <span class="number">18</span> <span class="number">13</span> <span class="number">5</span></span><br><span class="line"><span class="number">21</span> <span class="number">19</span> <span class="number">12</span> <span class="number">6</span></span><br><span class="line"><span class="number">20</span> <span class="number">11</span> <span class="number">7</span></span><br><span class="line"><span class="number">10</span> <span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/371" target="_blank" rel="noopener">2017年内蒙古大学计算机复试笔试题目及源码解析</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>爬取知乎百万用户数据！</title>
      <link href="/2017/03/14/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8E%E7%99%BE%E4%B8%87%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%EF%BC%81/"/>
      <url>/2017/03/14/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8E%E7%99%BE%E4%B8%87%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%EF%BC%81/</url>
      <content type="html"><![CDATA[<h2 id="并发限制"><a href="#并发限制" class="headerlink" title="并发限制"></a>并发限制</h2><p>因为我的vps是一核的小水管，为了防止爬虫占用太多cpu资源，影响网站的访问，所以我将爬虫的线程最大并发数限制为20在，这样cpu的资源占用率就可以保持在15%以下。（有money了一定去换个高配vps……）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/adafa505-d1c2-4cc0-8800-97a5e9dc347b.png" alt=""></p><p>##tmux</p><p>我在vps上运行的爬虫的时候遇到一个问题：</p><p><strong>如果我在vps上运行爬虫，那么我关掉ssh连接之后，下次要怎么查看爬虫的运行状态呢？</strong></p><p>要知道ssh连接关掉之后，工作状态就丢失了啊！</p><p>然后我只能在 top 或 ps -aux 命令中找到爬虫还在运行的证据…… 但是我想看爬虫的输出信息啊…… </p><p>这个时候我灵光一现，想起《MacTalk 人生元编程》中提到的一款终端管理神器——<strong>tmux</strong>。它不就是用来保存工作状态的嘛！</p><p>于是我查了查tmux的用法，在vps上安装好，简单的尝试了一下，发现可以使用。每次用ssh连接上vps之后，只要在终端中输入一条命令就可以进入之前保存的工作区中！而工作的状态还保存在tmux的session中！</p><p>也就是说，我在一个tmux创建的终端中运行爬虫，爬虫持续的输出爬取的状态信息，当我关掉ssh连接下次重新登陆的时候，只要输入<strong>tmux a -t 1</strong>（我的爬虫工作区为1） 就可以重新看到爬虫的输出信息了！</p><p>这就是tmux的作用。</p><p>它的<strong>安装过程</strong>也十分简单，在ubuntu下用 apt-get 安装即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install tmux</span><br></pre></td></tr></table></figure></p><p><strong>常用命令</strong>：</p><p>进入指定工作区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t target_session</span><br></pre></td></tr></table></figure><p>删除指定工作区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t target_session</span><br></pre></td></tr></table></figure><p>妈妈再也不用担心我的工作状态找不到了！</p><p>##完成<br>最后形成的样子就是这样：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/b96359ed-dbe9-4bff-95a9-aa0cd11bf8be.png" alt=""></p><p>左边在tmux终端（优点是可以持续性的保存工作状态）中运行爬虫，右边用top监控爬虫的资源占用情况。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/370" target="_blank" rel="noopener">爬取知乎百万用户数据！<br><a id="more"></a></a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>最终的归宿，《三体：死神永生》</title>
      <link href="/2017/03/09/%E6%9C%80%E7%BB%88%E7%9A%84%E5%BD%92%E5%AE%BF%EF%BC%8C%E3%80%8A%E4%B8%89%E4%BD%93%EF%BC%9A%E6%AD%BB%E7%A5%9E%E6%B0%B8%E7%94%9F%E3%80%8B/"/>
      <url>/2017/03/09/%E6%9C%80%E7%BB%88%E7%9A%84%E5%BD%92%E5%AE%BF%EF%BC%8C%E3%80%8A%E4%B8%89%E4%BD%93%EF%BC%9A%E6%AD%BB%E7%A5%9E%E6%B0%B8%E7%94%9F%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/3/86fce541-3fef-4f88-a031-9ed1ccef24e1.jpg" alt=""></p><p><strong>本文涉及《三体：死神永生》剧透，谨慎入内！</strong></p><p>这两天大部分时间都用来用kindle看书，今天一鼓作气把《三体》系列最后一部《死神永生》看完。</p><p>与第二部相比，这一部带给我的震撼也不小，但和前两部不同，它带给读者的是更大的宇宙尺度甚至时间尺度上的宏伟。</p><p>说它是中国科幻界的一部史诗确实不为过。<br><a id="more"></a></p><p>从宇宙尺度上说：</p><ul><li>第一部局限于地球之内，人类的科技远远没有发展到足够飞出地球的地步。</li><li>第二部开始飞出地球，进行初步的太空航行，但范围基本局限在太阳系之内。</li><li>第三部的跨度呈几何上升，人类造出了光速飞船，并殖民到了宇宙各地，虽然书中并没有明说，但银河系人类的种子还是扩散开来。</li></ul><p>从时间尺度上说：</p><ul><li>第一部从文革开始讲起，而《三体》的故事也从这一次人类历史的创伤之中开始，他讲述的是“过去”。</li><li>第二部讲述了人类在整个危机纪元的挣扎，横跨几百年，直到人类掌握钥匙，进入威慑纪元。</li><li>第三部时间跨度最大，连续跨越近十个纪元，每个纪元长短不一，它们的名称分别代表着这一时期人类世界的主旋律。到人类文明的最后一个时期，已经过去了千万年。听起来有些玄幻，大刘却通过之前的伏笔将这个长长的故事讲述的浪漫又合理。</li></ul><p>##云天明</p><p>《三体：死神永生》从一个男孩将一颗星星作为礼物送给一名女孩的浪漫故事开始，而这个男孩，就是云天明。</p><p>初一看到这个名字，我还以为是哪一部网络小说里的主角穿越到大刘的科幻世界中来了，结果就是这么一个名字，深刻影响了《三体》故事中威慑纪元之后的人类历史。</p><p>他的命运也不像他这常出现于网络小说中主角的名字一样充满幸运，相反，他之前的人生是平凡的，甚至有些平庸。</p><p>和很多现实生活中的屌丝一样，他默默喜欢着一个女孩，却不敢开口表达爱意。就这样蹉跎时光，直到他被检查出患上癌症。</p><p>他其实是一个充满创造力的男孩，随便一个想法，便让同学创造了上亿的财富，他也因此而获得了一笔“知识产权”的金钱。</p><p>云天明看着这笔横来之财，听到联合国推出的“群星计划”，于是他买了一颗远在数百光年的恒星，送给了他暗恋的女孩——程心。</p><p>他却不曾想到，一个将死之人的无心之举，却撬动了人类命运的杠杆。</p><p>##程心<br>看完《三体：死神永生》之后，其实最想说的角色还是程心，关于她的评价，网上褒贬不一，又说她是圣母心的，也有说她是人类文明的道德的坚守者。</p><p>虽然从某种程度上说，程心在当时做出的选择符合人类的道德，也是出于一种母性的、慈祥的爱心。</p><p>但她的行为，以及这个选择造成的后果，让我突然开始重新慎重而又惊恐的审视“爱”这个字，它真的像外表显示的那样绝对无私和正确吗？</p><p>在《三体：死神永生》中，程心有两次重大选择的机会，这两次机会都决定着人类的命运，但她都做出了“错误”的决定，最终导致了地球人类一步一步走向深渊。</p><p>程心爱人类，但她的爱毁灭了人类。</p><p>书中的人物似乎都对程心有着一种莫名的宽容，无论她犯下的罪有多么重大，始终很少有人对她恶语相向和指责。这让我不禁有些怀疑，这难道是读者无法设身处地去思考的原因吗？人类对以“爱”为初衷做出的行为都是谅解的吗？而不论这个行为最终造成了什么后果？</p><p>书中在人类的态度对程心的态度上，实在有些难以理解。</p><p>##罗辑<br>没想到罗辑活到了二百多岁，他的行为在三体故事中都是正确而又果决的。</p><p>时间的洗礼在他身上留下的是成熟和坚定，第三部里罗辑的形象分为两部分：一是沉默坚守五十年的执剑人形象，一是洒脱、恢复玩世不恭性格的守墓人形象。</p><p>如果说程心是一个又一个责任的被动承担者，那么罗辑，他才是真正承担起人类责任的人。</p><p>拯救人类的责任，威慑三体文明的责任，守护人类遗产的责任。</p><p>也许书中对罗辑的评价更加准确：他是<strong>面壁者、执剑人以及人类文明的守墓人</strong>。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/369" target="_blank" rel="noopener">最终的归宿，《三体：死神永生》</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>基于Django、WeRoBot的微信公众平台开发（二） - 后续</title>
      <link href="/2017/03/08/%E5%9F%BA%E4%BA%8EDjango%E3%80%81WeRoBot%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%E5%90%8E%E7%BB%AD/"/>
      <url>/2017/03/08/%E5%9F%BA%E4%BA%8EDjango%E3%80%81WeRoBot%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20%E5%90%8E%E7%BB%AD/</url>
      <content type="html"><![CDATA[<p>这里是 <a href="http://www.yangyingming.com/article/364/" target="_blank" rel="noopener">基于Django、WeRoBot的微信公众平台开发（二） </a> 的后续，主要记录其它功能的开发。<br><a id="more"></a></p><p>##“优美诗句”功能<br><strong>原理</strong>：爬取优美诗句，存入数据库，封装接口，调用接口</p><p><strong>作用</strong>：在公众号里回复“来个优美的句子”或者“来句诗”，它便会回复给你一条优美的诗句。</p><p><strong>过程</strong>：</p><p>实现过程和“讲个笑话”功能类似。</p><p>###1、创建数据库表<br><strong>作用</strong>：在数据库(mysql)中创建用于存储诗句的表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table `poetrys` ( </span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">  `content` varchar(1024) NOT NULL</span><br><span class="line">) DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>###2、编写段子抓取脚本<br><strong>作用</strong>：抓取 <a href="http://www.juzimi.com/album/1572107" target="_blank" rel="noopener">句子迷</a>中“句集：小明”中的句子，存储在数据库中（只存储之前没出现过的诗句，避免重复）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line">timeout=<span class="number">5</span>                                   <span class="comment"># 超时时间</span></span><br><span class="line">host = <span class="string">'http://www.juzimi.com'</span>     <span class="comment"># 句子迷主页面</span></span><br><span class="line">target = <span class="string">'album/1572107'</span>             <span class="comment"># 句子迷“句集：小明”栏目</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url,timeout=None)</span>:</span></span><br><span class="line">    <span class="comment"># 获取指定url的html源码</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>  &#125;</span><br><span class="line">        request = urllib2.Request(url,headers=headers)</span><br><span class="line">        response = urllib2.urlopen(request,timeout=timeout)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">'[Error] get_html()获取源码失败\n'</span> + e</span><br><span class="line">    <span class="keyword">return</span> response.read()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connectMySQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接mysql数据库</span></span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'YOUR_USERNAME'</span>,</span><br><span class="line">        passwd=<span class="string">'YOUR_PASSWORD'</span>,</span><br><span class="line">        db=<span class="string">'blog'</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPoetry</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 抓取诗句</span></span><br><span class="line">    <span class="comment"># 获取总页数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pagesum = <span class="number">7</span></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    poetry_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始爬取</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>,pagesum):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'当前页数：'</span>,page</span><br><span class="line">        url = <span class="string">'%s/%s?page=%d'</span>%(host,target,page)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = get_html(url,timeout).decode(<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'抓取出错，跳过第%s页'</span>%page</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'正在匹配……'</span></span><br><span class="line">        pattern = re.compile(<span class="string">"&lt;div id=\"bdshare\" class=\"bdshare_t bds_tools get-codes-bdshare\" data=\"&#123;'text':'.*?','desc':'(.*?)','url':'.*?','pic':'.*?'&#125;\"&gt;"</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,html)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 匹配到诗句</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">print</span> item</span><br><span class="line">            poetry_list.append(item)</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> poetry_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save2mysql</span><span class="params">(poetry_list)</span>:</span></span><br><span class="line">    <span class="comment"># 将抓取的段子存入数据库</span></span><br><span class="line">    conn = connectMySQL()</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    <span class="keyword">for</span> i,poetry <span class="keyword">in</span> enumerate(poetry_list):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'正在插入第%d句诗……'</span>%(i+<span class="number">1</span>)</span><br><span class="line">        sql = <span class="string">'select 1 from poetrys where content = "%s" limit 1; '</span>%(poetry)</span><br><span class="line">        isExist = cur.execute(sql)</span><br><span class="line">        <span class="keyword">if</span> isExist==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'-&gt; 该诗句已存在于数据库！放弃插入！'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = <span class="string">'insert into poetrys (`content`) values ("%s")'</span>%( poetry )</span><br><span class="line">            cur.execute(sql)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提交以上所有操作……'</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#  主程序</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poetry_list = getPoetry()</span><br><span class="line">        save2mysql(poetry_list)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>###3、接口函数实现</p><p><strong>作用</strong>：每次调用，从数据库中随机取出一条诗句，以json的格式返回。</p><p><strong>前言</strong>：代码集成在django中，不想在django中使用的可以适当修改代码。</p><p><strong>代码</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共部分</span></span><br><span class="line"><span class="comment"># 数据库设置</span></span><br><span class="line">username = <span class="string">'YOUR_USERNAME'</span><span class="comment"># 你的数据库用户名</span></span><br><span class="line">password = <span class="string">'YOUR_PASSWORD'</span><span class="comment"># 你的数据库密码</span></span><br><span class="line">dbname = <span class="string">'YOUR_DB'</span><span class="comment"># 你创建的表所在的数据库</span></span><br><span class="line">dbport = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connectMySQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接mysql数据库</span></span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=dbport,</span><br><span class="line">        user=username,</span><br><span class="line">        passwd=password,</span><br><span class="line">        db=dbname,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接口部分</span></span><br><span class="line"><span class="comment"># 返回一条诗句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_poetry</span><span class="params">(request)</span>:</span></span><br><span class="line">    response = <span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 连接数据库</span></span><br><span class="line">        conn = connectMySQL()</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="comment"># 生成随机抓取id</span></span><br><span class="line">        sql = <span class="string">'select count(*) from poetrys'</span></span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        poetry_sum = cur.fetchone()[<span class="number">0</span>]</span><br><span class="line">        poetry_idx = random.randint(<span class="number">1</span>,poetry_sum)</span><br><span class="line">        <span class="comment"># 抓取该id的段子数据</span></span><br><span class="line">        sql = <span class="string">'select * from poetrys where id=%d'</span>%poetry_idx</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        poetry = &#123;&#125;</span><br><span class="line">        poetry[<span class="string">'id'</span>],poetry[<span class="string">'content'</span>] = cur.fetchone()</span><br><span class="line">        response = json.dumps(poetry,ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="comment"># 关闭数据库连接</span></span><br><span class="line">        cur.close()</span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line">        logger.error(e)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response)</span><br></pre></td></tr></table></figure></p><p>前端接口封装好之后，可以在浏览器中输入以下url测试这个接口：</p><p><a href="http://www.yangyingming.com/api/get_poetry/" target="_blank" rel="noopener">http://www.yangyingming.com/api/get_poetry/</a></p><p>每次刷新都会返回不同的诗句。</p><p>###4、集成在微信机器人中</p><p><strong>作用</strong>：将“优美诗句”功能集成到微信机器人的聊天功能中，用户在聊天窗口发送“来个句子”类似的消息时，随机回复一条诗句。</p><p><strong>代码</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@robot.text</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> re.compile(<span class="string">".*?诗.*?"</span>).match(msg) <span class="keyword">or</span>\</span><br><span class="line">       re.compile(<span class="string">".*?句.*?"</span>).match(msg):</span><br><span class="line">        apiurl = <span class="string">"http://www.yangyingming.com/api/get_poetry"</span></span><br><span class="line">        response = get_html(apiurl,timeout=timeout)</span><br><span class="line">        joke = json.loads(response)</span><br><span class="line">        <span class="keyword">return</span> joke[<span class="string">'content'</span>].encode(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure></p><p>运行效果：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/37fed7e9-10c4-43b0-9829-1090ed047269.jpg" alt=""></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/368" target="_blank" rel="noopener">基于Django、WeRoBot的微信公众平台开发（二） - 后续</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>刷新世界观的《三体：黑暗森林》</title>
      <link href="/2017/03/05/%E5%88%B7%E6%96%B0%E4%B8%96%E7%95%8C%E8%A7%82%E7%9A%84%E3%80%8A%E4%B8%89%E4%BD%93%EF%BC%9A%E9%BB%91%E6%9A%97%E6%A3%AE%E6%9E%97%E3%80%8B/"/>
      <url>/2017/03/05/%E5%88%B7%E6%96%B0%E4%B8%96%E7%95%8C%E8%A7%82%E7%9A%84%E3%80%8A%E4%B8%89%E4%BD%93%EF%BC%9A%E9%BB%91%E6%9A%97%E6%A3%AE%E6%9E%97%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/3/fa69912f-e45e-4fce-b498-94be61722d74.jpg" alt=""></p><p><strong>本文涉及三体 第一部 和 第二部 的中级剧透，渗入。</strong></p><p>前段时间刚刚入手kindle，于是续读《三体：黑暗森林》，最近刚读完。</p><p>关于三体第二部，虽然其中没有出现像第一部中“人力计算机”这样让我脑洞大开的idea（这真是工科男才想得出来的设定），但是这并不影响我对这部作品如黄河之水滔滔不绝的敬仰之情……</p><p>咳，其实大刘已经不是第一次震撼我，从《球状闪电》的宏原子，到《诗云》那藏于天空的绝对优美的诗歌，再到《朝闻道》中面向终极问题的探求渴望，这些以科幻为载体带给我的想象力领域的头脑风暴，真是让我读起大刘作品来欲罢不能。再加上大刘也是工科出身，又是一名计算机工程师，更是让我在读他的文字时，感受到相似的思考方式和思维角度，反映在读书时的状态就是——身心舒畅。<br><a id="more"></a></p><p>在这部三体（二）中，有很多设定带着笔直的理性思维超过了正常的人情界限，比如“面壁计划”的设置，就是带着冷酷而不容置疑的态度，在三体文明侵略的危机压力下做出的非常人的决定；“黑暗森林”的提出也是基于一种绝对理想的猜想，而现实也很可能是这样，在生存的压力下，面对未知的存在，我们最容易做出的是对自己最有利的决策。</p><p>##三体人</p><p>看到最后三体人和罗辑的对话，似乎也有些同情三体人，同时也觉得他们有些可爱，坦诚的“人”通常会让人觉得可爱，不是吗？</p><p>最后的对话也是经典的：</p><blockquote><p>“我有一个梦，也许有一天，灿烂的阳光能照进黑暗森林。”<br>  太阳快落下去了，你们的孩子居然不害怕？<br>“当然不害怕，她知道明天太阳还会升起来的。”</p></blockquote><p>##叶文洁</p><p>她是一部的主人公，是在我眼中谜一样的一个人，她的身上贯穿着“反人类”，“理性”，“救赎”等等复杂而又矛盾的标签。</p><p>是她，给人类带来了三体危机，也恰恰是她，给人类留下了希望的火种。</p><p>##罗辑</p><p>罗辑是第二部的主人公。</p><p>如果说叶文洁留下的是希望的火种，那么罗辑就是希望的践行者。</p><p>罗辑其实是一个随遇而安的人，虽然我不排斥这样性格的人，但他确实不适合担任太大的责任。但偏偏是他肩负起了拯救人类的重任，这种矛盾为小说添加了不少戏剧性。</p><p>其实在在那个冰原的晚上，他就悟出了三体人想杀他的原因，也悟出了拯救人类的钥匙。他虽然还不是很确定，但我们读者已经意识到人类反击的关键已经出现，接下来发展却没有像我们想象的那样顺利，在罗辑醒来之后，整个人类世界的气氛却已经从绝望变成了轻视——人类已经不在乎三体人了。因为在罗辑冬眠的百年里，人类的科技出乎意料的发展的非常快，一切都似乎很梦幻。自己发出的“咒语”也没有生效，这让罗辑意识到了自己那时领悟的东西似乎只是一个笑话。</p><p>然而这一切却只是大刘设下的陷阱，他为读者设了一个套，使本平静的剧情发展又变的波澜壮阔起来——却有那么合情合理。他制造了人类舰队在水滴攻击下全军覆没的惨剧，让人类虚幻的美梦破碎，也让罗辑在一个最惨烈的情况下和三体人直面对决。</p><p>他活到了大决战的最后，他以两个世界的未来和自己的生命震慑住了三体文明。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/94785a1c-f3f6-41d3-93ec-5e70510e7dcb.jpg" alt=""></p><p>##后记</p><p>如果说三体第一部带给我的是层出不穷的新奇感觉，那么第二部就是在太阳系尺度上带给我的一个又一个惊奇的感觉，那是一种更加宏大的想象力的洗礼。</p><p>期待第三部带给我更多意想不到的脑洞。</p><p>ps：大刘似乎还有一个坑没有填，那就是“钢印族”的去向？难道要留在第三部里填吗，猜测。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/367" target="_blank" rel="noopener">刷新世界观的《三体：黑暗森林》</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Navicat远程连接阿里云上的mysql</title>
      <link href="/2017/03/03/Navicat%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E7%9A%84mysql/"/>
      <url>/2017/03/03/Navicat%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E7%9A%84mysql/</url>
      <content type="html"><![CDATA[<p>由于用ssh远程连接服务器查看mysql数据库不<br><a id="more"></a><br>太直观，于是我开始查找在本地远程登录mysql的方法。</p><p>网上教程很多，在这里总结一下设置的步骤，以及一个小坑。</p><p>##设置步骤</p><ul><li><p>ssh登录服务器</p></li><li><p>连接mysql  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li></ul><p>输入你的mysql密码，回车。</p><ul><li>在mysql中输入命令，开启远程连接权限。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;YOUR_PASSWORD&apos; with grant option;</span><br></pre></td></tr></table></figure></li></ul><p><strong>YOUR_PASSWORD</strong> 替换成你的mysql连接密码。</p><p>该命令的具体意思可见阿里云官方说法：<a href="https://help.aliyun.com/knowledge_detail/40792.html" target="_blank" rel="noopener">mysql数据库设置远程连接权限</a></p><ul><li><p>刷新权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>退出mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>重启mysql服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></li></ul><p>在服务器中做完这些设置，你再在本地打开 Navicat。</p><ul><li>创建新连接</li></ul><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/47a9a1f3-bf7b-4c01-a738-4c77a3fb4543.png" alt=""></p><ul><li>填写服务器中mysql信息</li></ul><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/642e832b-fcea-4921-8256-81917a2a99f6.png" alt=""></p><ul><li>点击确定，双击你的创建的连接名</li></ul><p>ok，大功告成，这个时候可以在navicat中查看你在服务器上的数据库了。</p><p>##一个小坑<br>如果你发现还不能在navicat中远程登陆mysql，并报这个错误：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/023f31fa-6441-4162-8d10-5e12b13e5f40.png" alt=""></p><p>如果出现了这种情况，你需要编辑一下mysql的配置文件 my.cnf。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure><p>将接受地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address       = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address       = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p><p>然后再重启一下mysql服务<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></p><p>现在再试一下，是不是可以远程登陆mysql了呢？</p><p>##参考资料</p><p><a href="http://blog.csdn.net/Kansas_Jason/article/details/52840664?locationNum=14&amp;fps=1" target="_blank" rel="noopener">关于如何连接阿里云服务器上的MySQL数据库的解答</a></p><p><a href="http://blog.csdn.net/yuan882696yan/article/details/46740019" target="_blank" rel="noopener">Navicat for mysql 远程连接 mySql数据库10061错误问题</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/366" target="_blank" rel="noopener">Navicat远程连接阿里云上的mysql</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>记录安装 mysql5.7 过程中遇到的两个坑</title>
      <link href="/2017/03/02/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%20mysql5.7%20%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9D%91/"/>
      <url>/2017/03/02/%E8%AE%B0%E5%BD%95%E5%AE%89%E8%A3%85%20mysql5.7%20%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>最近在windows下安装了一下 <strong>mysql5.7解压版（64位）</strong>，因为官方更新了不少东西，所以和5.6的安装过程大有区别。因为这些不知道的坑，折腾了一个晚上，在这里记录一下。</p><p>下载的mysql5.7解压版（64位）就是这货：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/01fa61a2-9e27-47b2-b20e-98d2ae7c2e54.png" alt=""></p><p>注意：安装环境为windows</p><p>安装的过程中主要遇到两个坑（和之前的版本安装不同的地方）：</p><ul><li>启动mysql服务之前需要手动初始化data目录（<strong>第5步</strong>）</li><li>root 用户登陆初始密码为一个随机密码，而不是空密码（<strong>第7步</strong>）</li></ul><p>下面在安装过程中介绍这两个坑。<br><a id="more"></a></p><p>##安装过程<br>mysql5.7前面的安装过程和5.6一样：</p><ol><li><p>解压</p></li><li><p>配置环境变量</p></li><li><p>修改配置文件 my-default.ini<br>添加 basedir、datadir、port 设置。</p></li><li><p>安装服务<br>在命令行中运行 <figure class="highlight plain"><figcaption><span>--install```  </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">**注意**：一定要在mysql安装目录下的bin目录中运行该命令，否则服务启动路径会出错，启动服务的时候报错。</span><br><span class="line"></span><br><span class="line">5. 手动初始化（**从这一步开始不同，第一个坑**）  </span><br><span class="line">在命令行中运行 ```mysqld --initialize --user=mysql --console``` 初始化data目录  </span><br><span class="line">如果不运行这条命令，服务会无法启动  </span><br><span class="line">这里是 **第一个坑**，和之前的版本不同，mysql5.7解压之后默认不再带有data文件夹，需要你手动初始化生成它。  </span><br><span class="line">运行之后mysql安装目录下会多出一个data文件夹，里面存储有数据库的初始数据，包括登陆信息。  </span><br><span class="line">**注意**：这里先不要关命令行！登陆密码就藏在输出的日志中。  </span><br><span class="line"></span><br><span class="line">5. 启动服务  </span><br><span class="line">```net start mysql</span><br></pre></td></tr></table></figure></p></li><li><p>登陆mysql（<strong>这里是第二个坑</strong>）<br><strong>说在前面</strong>：Oracle为了一些安全策略上的考虑，在5.7中 <strong>不再以空密码来作为安装完成之后的初始密码，而是在初始化的时候生成一个随机密码作为代替</strong>。<br>从第5步输出的日志信息最后可以找到一组随机密码，这就是mysql root用户登陆的初始密码。<br>找到这个随机密码，在命令行中运行命令：mysql -uroot -p ，然后输入这个随机密码，回车。<br>如果出现了mysql的欢迎界面，那么恭喜你，你跳过了第二个坑，成功登录进了mysq5.7。</p></li><li><p>修改root用户密码  （<strong>小坑一个</strong>）<br>登陆进mysql之后，还没完。<br>第一次登录进mysql5.7，他会反复提示你修改登录密码。<br>运行命令：<code>use mysql;</code>    选中mysql数据库<br>运行命令：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;mysql&#39;;</code><br>运行命令：<code>update user set authentication\_string=&quot;YOUR\_PASSWORD&quot; where user=&quot;root&quot;;</code>     更新root用户密码，YOUR_PASSWORD是你要设置的密码。<br>运行命令：<code>SET PASSWORD = PASSWORD(&#39;YOUR\_PASSWORD&#39;);</code>    再设置一遍密码（好麻烦）<br>运行命令：<code>flush privileges;</code>    让以上命令立刻生效  </p></li><li><p>退出，重新登录<br>好了，到了这一步，基本已经完成了。<br>我们只要重新登录，验证我们新的密码即可。<br>5.7的安装过程也就告一段落。<br>你可以欢乐的使用它了。  </p></li></ol><p>（完结撒花）</p><p>##后记<br>吐槽一下Oracle，收购了mysql之后，感觉把mysql怎么难用就怎么改。</p><p>它的官网也很强大，不是有经验的人第一次进入一定很懵逼，恩……大公司眼花缭乱的官方网站，这很Oracle。</p><p>##参考资料<br>研究登陆的时候这篇博文给了我很大帮助：<a href="http://blog.csdn.net/hyl963254113/article/details/50117455" target="_blank" rel="noopener">MySQL 5.7.9 （64位）解压版正确修改默认密码</a></p><p>Initialize的官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/data-directory-initialization-mysqld.html" target="_blank" rel="noopener">2.10.1.1 Initializing the Data Directory Manually Using mysqld - 官方文档</a></p><p><a href="http://blog.csdn.net/mhmyqn/article/details/17043921" target="_blank" rel="noopener">mysql安装常见问题（系统找不到指定的文件、发生系统错误 1067 进程意外终止）</a></p><p><a href="http://www.cnblogs.com/rainheader/p/4574097.html" target="_blank" rel="noopener">如何安装zip格式的MySQL</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/365" target="_blank" rel="noopener">记录安装 mysql5.7 过程中遇到的两个坑</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>基于Django、WeRoBot的微信公众平台开发（二）</title>
      <link href="/2017/03/01/%E5%9F%BA%E4%BA%8EDjango%E3%80%81WeRoBot%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017/03/01/%E5%9F%BA%E4%BA%8EDjango%E3%80%81WeRoBot%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>上一节，我在一个Django项目中集成了 <strong>基于WeRoBot的微信公众号后台</strong>，成功与服务器完成了对接，并且可以对用户的任意消息做出响应（回复一个“hello”），简单来说，就是搭建起了一个开发框架。</p><p>这一节中，我将继续用 <strong>WeRoBot</strong> 在这个开发框架上扩展一些功能，让公众号的交互丰富起来，思来想去，我挑了三个相对简单的功能进行实现：<strong>简单的聊天功能，天气查询，讲笑话</strong>。</p><p>下面是实现这三个功能的过程和心得记录，分享给大家。<br><a id="more"></a></p><p>##简单的聊天机器人<br><strong>原理</strong>：文本匹配</p><p><strong>WeRoBot</strong> 也有微信机器人的意思，你可以使用它定制公众号的响应。</p><p>WeRoBot中有这么一个消息处理函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@robot.text</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> message.content</span><br></pre></td></tr></table></figure></p><p>他只能响应用户发送过来的 <strong>文本消息</strong>。</p><p>文本消息存储在参数 <strong>message</strong> 变量中，我们可以通过 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">（详情见官方文档：[WeRoBot官方文档](https://werobot.readthedocs.io/zh_CN/latest/index.html)）</span><br><span class="line"></span><br><span class="line">而通过对消息文本```msg```进行匹配，我们可以为公众号加入简单的聊天功能。</span><br><span class="line"></span><br><span class="line">机器人代码如下：</span><br><span class="line">```python</span><br><span class="line">@robot.text</span><br><span class="line">def echo(message):</span><br><span class="line">    try:</span><br><span class="line">        # 提取消息</span><br><span class="line">        msg = message.content.strip().lower().encode(&apos;utf8&apos;)</span><br><span class="line">        # 解析消息</span><br><span class="line">        if  re.compile(&quot;.*?你好.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?嗨.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?哈喽.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?hello.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?hi.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?who are you.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?你是谁.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?你的名字.*?&quot;).match(msg) or\</span><br><span class="line">            re.compile(&quot;.*?什么名字.*?&quot;).match(msg) :</span><br><span class="line">            return &quot;你好~\n我是呓语的管家机器人，主人还没给我起名字 T_T\n有什么能帮您的吗？（绅士脸）&quot;</span><br><span class="line">        elif re.compile(&quot;.*?厉害.*?&quot;).match(msg):</span><br><span class="line">            return &apos;承让承让 (๑•̀ㅂ•́)ﻭ✧&apos;</span><br><span class="line">        elif re.compile(&quot;.*?想你.*?&quot;).match(msg):</span><br><span class="line">            return &apos;我也想你&apos;</span><br><span class="line">        elif re.compile(&quot;.*?miss you.*?&quot;).match(msg):</span><br><span class="line">            return &apos;I miss you,too&apos;</span><br><span class="line">        elif re.compile(&quot;.*?我爱你.*?&quot;).match(msg):</span><br><span class="line">            return &apos;我也爱你&apos;</span><br><span class="line">        elif re.compile(&quot;.*?love you.*?&quot;).match(msg):</span><br><span class="line">            return &apos;I love you,too&apos;</span><br><span class="line">        elif re.compile(&quot;.*?美女.*?&quot;).match(msg):</span><br><span class="line">            return &apos;我是男生哦♂&apos;</span><br><span class="line">        elif re.compile(&quot;.*?帅哥.*?&quot;).match(msg):</span><br><span class="line">            return &apos;谢谢夸奖 (๑•̀ㅂ•́)ﻭ✧&apos;</span><br><span class="line">        elif re.compile(&quot;.*?傻逼.*?&quot;).match(msg):</span><br><span class="line">            return &apos;爸爸不想理你&apos;</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print e</span><br></pre></td></tr></table></figure></p><p>运行效果：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/0ca0fa2a-9d64-4c36-82d4-886edfe35850.jpg" alt=""></p><p>##“天气查询” 功能实现<br><strong>原理</strong>：封装城市解析接口，调用百度天气API</p><p>要实现天气查询功能其实比较简单，网上不少现成的API，不过到底选哪一家的API是个值得商榷的问题，因为我们选取的API最好要 <strong>稳定、信息丰富、免费、准确</strong>。</p><ul><li>接口的<strong>稳定性</strong>毋庸置疑，如果用着用着接口提供方突然不提供服务，你还要临时换接口，维护成本高。</li><li>使用的天气接口最好能提供比较<strong>丰富</strong>的天气信息，比如最高温、最低温、实时温度、未来X天的温度、PM2.5值、风力风向、天气情况等等，这样展示给用户的信息会比较全面。</li><li><strong>免费</strong>更不用说，刚开始维护公众号能找到免费的优质服务就不掏腰包，毕竟够用就行。</li><li>接口提供的天气信息一定要<strong>准确</strong>，如果信息不准确，这个服务也就没有了价值。</li></ul><p>秉承着以上原则筛选网上的天气API，下面分享几个我尝试过的：</p><ul><li><strong>中国天气网</strong>的API是中国气象局提供的，应该是最官方的，但是用起来有各种问题，提供的天气信息也不够丰富，不推荐使用。</li><li><strong>心知天气</strong> 专业提供天气服务的公司，网站界面高大上，文档详细，服务稳定，使用舒服，唯一的缺点是免费版只提供全国地级市的天气查询，像我们这儿一个小小县城就没法查询 _(:3」∠)_。</li><li><strong>百度天气API</strong>，目前在使用的，以上条件基本都符合，稳定性待观察，刚开始用。需要申请AccessKey，我直接用了一个博客上分享的（因为自己的ak使用有问题，无法正确请求到天气信息，论坛上很多人反映这个问题），博客链接见：<a href="http://www.jianshu.com/p/84fc2258c277" target="_blank" rel="noopener">百度天气接口api - 简书</a>。<strong>【来自后期的提示：该AK已过期】</strong></li></ul><p>顺便贴上知乎上关于天气API的讨论：<a href="https://www.zhihu.com/question/20575288" target="_blank" rel="noopener">网上的天气 API 哪一个更加可靠？</a></p><p>我封装了<strong>“解析消息中包含的城市”</strong>接口，由于代码太长，就不在这里帖出来了，感兴趣的，可以在浏览器中输入这段url 或者直接点击尝试：</p><p><a href="http://www.yangyingming.com/api/parse_city/?msg=http://www.yangyingming.com/api/parse_city/?msg=蒋介石预见到中央红军的意图，在红军前往湘西的必经之路上集结大量兵力组成四道封锁线。10月21日晚，中央红军在赣县王母渡至信丰县一带突破国民革命军第一道封锁线，25日全部渡过信丰河，携大量辎重沿粤赣、湘粤、湘桂边缓慢西行。1934年11月5日至8日，突破了广东城口与湖南汝城之间的第二道封锁线。13日至15日，在郴县、良田、宜章、乐昌之间突破第三道封锁线。25日，中央红军决定从兴安、全州之间西渡湘江。中央红军面对国民革命军全面进攻，于1934年11月27日至12月1日历时5天，从广西兴安县至全州县间，才渡过湘江，突破第四道封锁线。湘江战役之后，出发时的八万余中央红军仅剩下3万余人。" target="_blank" rel="noopener">http://www.yangyingming.com/api/parse_city/?msg=蒋介石预见到中央红军的意图，在红军前往湘西的必经之路上集结大量兵力组成四道封锁线。10月21日晚，中央红军在赣县王母渡至信丰县一带突破国民革命军第一道封锁线，25日全部渡过信丰河，携大量辎重沿粤赣、湘粤、湘桂边缓慢西行。1934年11月5日至8日，突破了广东城口与湖南汝城之间的第二道封锁线。13日至15日，在郴县、良田、宜章、乐昌之间突破第三道封锁线。25日，中央红军决定从兴安、全州之间西渡湘江。中央红军面对国民革命军全面进攻，于1934年11月27日至12月1日历时5天，从广西兴安县至全州县间，才渡过湘江，突破第四道封锁线。湘江战役之后，出发时的八万余中央红军仅剩下3万余人。</a></p><p>它会返回msg参数中包含的所有城市名称。</p><p>我将它集成到了天气查询功能中，使其显得更加智能。</p><p>下面是天气查询的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> werobot <span class="keyword">import</span> WeRoBot</span><br><span class="line"><span class="keyword">from</span> werobot.replies <span class="keyword">import</span> WeChatReply, TextReply, ImageReply, MusicReply</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib,urllib2</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">timeout=<span class="number">30</span>                               <span class="comment"># 超时时间</span></span><br><span class="line">bdkey = <span class="string">'FK9mkfdQsloEngodbFl4FeY3'</span>      <span class="comment"># 百度天气ak</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_citys_in_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="comment"># 获取消息中包含的城市</span></span><br><span class="line">    api_url = <span class="string">'http://www.yangyingming.com/api/parse_city?%s'</span>%(urllib.urlencode(&#123;<span class="string">'msg'</span>:msg&#125;))</span><br><span class="line">    citys = get_html(api_url,timeout=timeout)</span><br><span class="line">    <span class="keyword">return</span> citys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weather</span><span class="params">(city)</span>:</span></span><br><span class="line">    <span class="comment"># 获取天气数据</span></span><br><span class="line">    url = <span class="string">'http://api.map.baidu.com/telematics/v3/weather'</span></span><br><span class="line">    param = urllib.urlencode(&#123;</span><br><span class="line">        <span class="string">'location'</span>:city,</span><br><span class="line">        <span class="string">'ak'</span>:bdkey,</span><br><span class="line">        <span class="string">'output'</span>:<span class="string">'json'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    api_url = <span class="string">'%s?%s'</span>%(url,param)</span><br><span class="line">    wdata = get_html(api_url,timeout=timeout)</span><br><span class="line">    <span class="keyword">return</span> wdata</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.text</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> re.compile(<span class="string">".*?天气.*?"</span>).match(msg):</span><br><span class="line">        res_msg = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 取出该消息中包含的所有城市</span></span><br><span class="line">        citys = get_citys_in_msg(msg).split(<span class="string">','</span>)</span><br><span class="line">        <span class="comment"># 获得每一座城市的天气状况</span></span><br><span class="line">        <span class="keyword">if</span> citys[<span class="number">0</span>]==<span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'亲爱的，你想知道哪座城市的天气呢？'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> city <span class="keyword">in</span> citys:</span><br><span class="line">                <span class="keyword">if</span> res_msg!=<span class="string">''</span>:</span><br><span class="line">                    res_msg += <span class="string">'\n\n'</span></span><br><span class="line">                wdata = get_weather(city)</span><br><span class="line">                wdata = json.loads(wdata)</span><br><span class="line">                <span class="keyword">if</span> wdata[<span class="string">'status'</span>]==<span class="string">'success'</span>:</span><br><span class="line">                    index = wdata[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'index'</span>]</span><br><span class="line">                    pm25 = wdata[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'pm25'</span>]</span><br><span class="line">                    w = wdata[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'weather_data'</span>]</span><br><span class="line">                    today = w[<span class="number">0</span>]</span><br><span class="line">                    future = w[<span class="number">1</span>:]  <span class="comment"># 未来几天的预报</span></span><br><span class="line">                    res_msg += <span class="string">'【%s】\n☀ 今天 %s\n当日温度：%s\n天气情况：%s\n风向风力：%s\nPM2.5：%s'</span>%\</span><br><span class="line">                    (city,today[<span class="string">'date'</span>].encode(<span class="string">'utf8'</span>),today[<span class="string">'temperature'</span>].encode(<span class="string">'utf8'</span>),today[<span class="string">'weather'</span>].encode(<span class="string">'utf8'</span>),today[<span class="string">'wind'</span>].encode(<span class="string">'utf8'</span>),pm25.encode(<span class="string">'utf8'</span>))</span><br><span class="line">                    <span class="keyword">for</span> today <span class="keyword">in</span> future:</span><br><span class="line">                        res_msg += <span class="string">'\n☀ %s\n当日温度：%s\n天气情况：%s\n风向风力：%s'</span>%\</span><br><span class="line">                        (today[<span class="string">'date'</span>].encode(<span class="string">'utf8'</span>),today[<span class="string">'temperature'</span>].encode(<span class="string">'utf8'</span>),today[<span class="string">'weather'</span>].encode(<span class="string">'utf8'</span>),today[<span class="string">'wind'</span>].encode(<span class="string">'utf8'</span>))</span><br><span class="line">                    res_msg += <span class="string">'\n【温馨提示】'</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">                        res_msg += <span class="string">'\n❤ %s：%s\n%s'</span>%\</span><br><span class="line">                        (i[<span class="string">'tipt'</span>].encode(<span class="string">'utf8'</span>),i[<span class="string">'zs'</span>].encode(<span class="string">'utf8'</span>),i[<span class="string">'des'</span>].encode(<span class="string">'utf8'</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res_msg += <span class="string">'没有找到%s的天气信息'</span>%city</span><br><span class="line">            <span class="keyword">return</span> res_msg</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/a929199f-7b47-4f93-8913-f41d8376ba57.jpg" alt=""></p><p>##“讲个段子” 功能实现</p><p>“讲个段子”<strong>应用场景</strong>是这样的：在你烦心的时候，在公众号中输入“xxx，讲个段子”，它便会机智的回复一个段子给你，让你在愁眉紧锁之余也能轻松一下。</p><p>实现这个功能大体需要两个步骤：<strong>接口实现</strong> 和 <strong>微信后台调用逻辑</strong>。</p><p>和天气查询不同，我打算自己实现这个接口，<strong>原理</strong>是编写一个脚本定期抓取糗事百科上的段子，存储在服务器的数据库中，再编写接口函数，用于从数据库中随机抽取段子并返回。</p><p>以下是实现这个功能的<strong>步骤</strong>：</p><p>###1、创建数据库表</p><p><strong>作用</strong>：在数据库(mysql)中创建用于存储段子的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`qiushi_joke`</span> ( </span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`content`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`laugh_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`comment_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`imgurl`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>###2、编写段子抓取脚本  </p><p><strong>作用</strong>：抓取糗事百科官网“文本”栏目下所有页面的段子，存储在数据库中（只存储之前没出现过的段子，避免重复）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">timeout=<span class="number">5</span><span class="comment"># 超时时间</span></span><br><span class="line">host = <span class="string">'http://www.qiushibaike.com'</span>     <span class="comment"># 糗事百科主页面</span></span><br><span class="line">target = <span class="string">'text'</span>                          <span class="comment"># 糗事百科的"文字"栏目</span></span><br><span class="line">min_laugh_num = <span class="number">500</span>                     <span class="comment"># 好笑数低于该值，不保留</span></span><br><span class="line">min_joke_num = <span class="number">10</span>                       <span class="comment"># 一次性最少抓到的笑话个数</span></span><br><span class="line"><span class="comment"># 数据库设置</span></span><br><span class="line">username = <span class="string">'YOUR_USERNAME'</span><span class="comment"># 你的数据库用户名</span></span><br><span class="line">password = <span class="string">'YOUR_PASSWORD'</span><span class="comment"># 你的数据库密码</span></span><br><span class="line">dbname = <span class="string">'YOUR_DB'</span><span class="comment"># 你创建的表所在的数据库</span></span><br><span class="line">dbport = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url,timeout=None)</span>:</span></span><br><span class="line">    <span class="comment"># 获取指定url的html源码</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>  &#125;</span><br><span class="line">        request = urllib2.Request(url,headers=headers)</span><br><span class="line">        response = urllib2.urlopen(request,timeout=timeout)</span><br><span class="line">    <span class="keyword">except</span> urllib2.HTTPError,e:</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line">        <span class="keyword">raise</span> Exception,<span class="string">'[Error] 遇到HTTP 503 错误，程序休眠了一下……'</span></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">raise</span> Exception,<span class="string">'[Error] get_html()获取源码失败\n%s'</span>%e</span><br><span class="line">    <span class="keyword">return</span> response.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPagesum</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取总页数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">'%s/%s'</span>%(host,target)</span><br><span class="line">        html = get_html(url,timeout)</span><br><span class="line">        pattern = re.compile(<span class="string">r'&lt;span class="page-numbers"&gt;(.*?)&lt;/span&gt;.*?&lt;/a&gt;.*?&lt;/li&gt;'</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">raise</span> Exception,<span class="string">'[Error] getPagesum()获取总页数失败\n%s'</span>%e</span><br><span class="line">    <span class="keyword">return</span> int(items[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connectMySQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接mysql数据库</span></span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=dbport,</span><br><span class="line">        user=username,</span><br><span class="line">        passwd=password,</span><br><span class="line">        db=dbname,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJokes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 抓取糗事百科的段子</span></span><br><span class="line">    <span class="comment"># 获取总页数</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'开始抓取……'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pagesum = getPagesum()</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    joke_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始爬取</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,pagesum+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'当前页数：'</span>,page</span><br><span class="line">        url = <span class="string">'%s/%s/page/%d/'</span>%(host,target,page)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = get_html(url,timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'抓取出错，跳过第%s页'</span>%page</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'正在匹配……'</span></span><br><span class="line">        pattern = re.compile(<span class="string">'&lt;div.*?author clearfix"&gt;.*?&lt;h2&gt;(.*?)&lt;/h2&gt;.*?&lt;div class="content"&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;.*?&lt;/div&gt;(.*?)&lt;i class="number"&gt;(.*?)&lt;/i&gt;.*?&lt;i class="number"&gt;(.*?)&lt;/i&gt;'</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,html)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 匹配到段子</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            joke = &#123;&#125;</span><br><span class="line">            joke[<span class="string">'username'</span>] = item[<span class="number">0</span>].strip()</span><br><span class="line">            joke[<span class="string">'content'</span>] = item[<span class="number">1</span>].strip().replace(<span class="string">'&lt;br/&gt;'</span>,<span class="string">'\n'</span>).replace(<span class="string">'&amp;quot;'</span>,<span class="string">'\"'</span>)</span><br><span class="line">            joke[<span class="string">'imgsrc'</span>] = re.findall(<span class="string">'&lt;img.*?src="(.*?)".*?'</span>,item[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">if</span> len(joke[<span class="string">'imgsrc'</span>])==<span class="number">0</span>:</span><br><span class="line">                joke[<span class="string">'imgsrc'</span>] =  <span class="string">''</span></span><br><span class="line">            joke[<span class="string">'laugh_num'</span>]= int(item[<span class="number">3</span>].strip())</span><br><span class="line">            joke[<span class="string">'comment_num'</span>] = int(item[<span class="number">4</span>].strip())</span><br><span class="line"></span><br><span class="line">            info = <span class="string">'用户名：%s\n内容：\n%s\n图片地址：%s\n好笑数：%d\n评论数：%d\n'</span>%\</span><br><span class="line">                   ( joke[<span class="string">'username'</span>] , joke[<span class="string">'content'</span>] , joke[<span class="string">'imgsrc'</span>] , joke[<span class="string">'laugh_num'</span>] , joke[<span class="string">'comment_num'</span>] )</span><br><span class="line">            <span class="keyword">if</span> joke[<span class="string">'imgsrc'</span>]==<span class="string">''</span> <span class="keyword">and</span> joke[<span class="string">'laugh_num'</span>] &gt; min_laugh_num:</span><br><span class="line">                <span class="keyword">print</span> len(joke_list)</span><br><span class="line">                <span class="keyword">print</span> info</span><br><span class="line">                joke_list.append(joke)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> joke_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save2mysql</span><span class="params">(joke_list)</span>:</span></span><br><span class="line">    <span class="comment"># 将抓取的段子存入数据库</span></span><br><span class="line">    conn = connectMySQL()</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    <span class="keyword">for</span> i,joke <span class="keyword">in</span> enumerate(joke_list):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'正在插入第%d条段子……'</span>%(i+<span class="number">1</span>)</span><br><span class="line">        sql = <span class="string">'select 1 from qiushi_joke where content = "%s" limit 1; '</span>%(joke[<span class="string">'content'</span>])</span><br><span class="line">        isExist = cur.execute(sql)</span><br><span class="line">        <span class="keyword">if</span> isExist==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'-&gt; 该段子已存在于数据库！放弃插入！'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = <span class="string">'insert into qiushi_joke (`username`,`content`,`laugh_num`,`comment_num`,`imgurl`) values ("%s","%s","%d",</span></span><br><span class="line"><span class="string">"%d","%s")'</span>%\</span><br><span class="line">                  ( joke[<span class="string">'username'</span>] , joke[<span class="string">'content'</span>] , joke[<span class="string">'laugh_num'</span>] , joke[<span class="string">'comment_num'</span>] , joke[<span class="string">'imgsrc'</span>] )</span><br><span class="line">            cur.execute(sql)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提交以上所有操作……'</span></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#  主程序</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            joke_list = getJokes()</span><br><span class="line">            <span class="keyword">if</span> len(joke_list)&gt;=min_joke_num:   <span class="comment"># 抓取到至少min_joke_num条笑话才行</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        save2mysql(joke_list)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/318519bf-f4d5-47b5-b56b-fb5eb8223438.png" alt=""></p><p>###3、cron定期运行脚本</p><p><strong>作用</strong>：定期抓取优质段子，存入数据库</p><p><strong>步骤</strong>：</p><p>在命令行中运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在编辑页面加入新的计划任务<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/<span class="number">10</span>  * * * *    /root/workspace/BLOG_VENV/bin/python /root/workspace/crawler/craw_jokes.py</span><br></pre></td></tr></table></figure></p><p>这里解释一下上面这条命令的意思：</p><ul><li><p><strong>*/10  <em> </em> <em> </em></strong> —-&gt; 代表每10分钟执行一次后面的命令。五个“*”分别代表“分 时 日 月 周”，如果在第一个“*”后面加上除号/和一个数字N，代表每N分钟执行一次后面的命令。以上是crontab计划任务时间控制的格式。</p></li><li><p><strong>/root/workspace/BLOG_VENV/bin/python</strong> —-&gt; 这个是我的python解释器的地址</p></li><li><p><strong>/root/workspace/crawler/craw_jokes.py</strong> —-&gt; 这是我们上一节所写的脚本的存放地址</p></li></ul><p>以上命令合起来就是：<strong>每十分钟抓取糗事百科，将优质段子存入数据库</strong>。</p><p>好了，段子我们有了，接下来我们只要写一个接口函数，每次调用便从数据库中随机取出一条段子，并以json的格式返回（json是一种表示和存储数据的形式，和字典类似）。</p><p>###4、接口函数实现</p><p><strong>作用</strong>：每次调用，从数据库中随机取出一条段子，以json的格式返回。</p><p><strong>前言</strong>：代码集成在django中，不想在django中使用的可以适当修改代码。</p><p><strong>代码</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共部分</span></span><br><span class="line"><span class="comment"># 数据库设置</span></span><br><span class="line">username = <span class="string">'YOUR_USERNAME'</span><span class="comment"># 你的数据库用户名</span></span><br><span class="line">password = <span class="string">'YOUR_PASSWORD'</span><span class="comment"># 你的数据库密码</span></span><br><span class="line">dbname = <span class="string">'YOUR_DB'</span><span class="comment"># 你创建的表所在的数据库</span></span><br><span class="line">dbport = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connectMySQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接mysql数据库</span></span><br><span class="line">    conn = MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=dbport,</span><br><span class="line">        user=username,</span><br><span class="line">        passwd=password,</span><br><span class="line">        db=dbname,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接口部分</span></span><br><span class="line"><span class="comment"># 返回一条糗事百科上的段子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_joke</span><span class="params">(request)</span>:</span></span><br><span class="line">    response = <span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 连接数据库</span></span><br><span class="line">        conn = connectMySQL()</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="comment"># 生成随机抓取id</span></span><br><span class="line">        sql = <span class="string">'select count(*) from qiushi_joke'</span></span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        joke_sum = cur.fetchone()[<span class="number">0</span>]</span><br><span class="line">        joke_idx = random.randint(<span class="number">1</span>,joke_sum)</span><br><span class="line">        <span class="comment"># 抓取该id的段子数据</span></span><br><span class="line">        sql = <span class="string">'select * from qiushi_joke where id=%d'</span>%joke_idx</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        joke = &#123;&#125;</span><br><span class="line">joke[<span class="string">'id'</span>],joke[<span class="string">'username'</span>],joke[<span class="string">'content'</span>],joke[<span class="string">'laugh_num'</span>],joke[<span class="string">'comment_num'</span>],joke[<span class="string">'imgurl'</span>] = cur.fetchone()</span><br><span class="line">        response = json.dumps(joke,ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        <span class="comment"># 关闭数据库连接</span></span><br><span class="line">        cur.close()</span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response)</span><br></pre></td></tr></table></figure></p><p>前端接口封装好之后，可以在浏览器中输入以下url测试这个接口：</p><p><a href="http://www.yangyingming.com/api/get_joke/" target="_blank" rel="noopener">http://www.yangyingming.com/api/get_joke/</a></p><p>每次刷新都会返回不同的段子。</p><p>###5、集成在微信机器人中</p><p><strong>作用</strong>：将“讲个段子”功能集成到微信机器人的聊天功能中，用户在聊天窗口发送“讲个段子”类似的消息时，随机回复一条段子。</p><p><strong>代码</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@robot.text</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>  re.compile(<span class="string">".*?笑话.*?"</span>).match(msg) <span class="keyword">or</span>\</span><br><span class="line">     re.compile(<span class="string">".*?段子.*?"</span>).match(msg):</span><br><span class="line">        apiurl = <span class="string">"http://www.yangyingming.com/api/get_joke"</span></span><br><span class="line">        response = get_html(apiurl,timeout=timeout)</span><br><span class="line">        joke = json.loads(response)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s\n搞笑指数：%d'</span>%(joke[<span class="string">'content'</span>].encode(<span class="string">'utf8'</span>),joke[<span class="string">'laugh_num'</span>])</span><br></pre></td></tr></table></figure></p><p>运行效果：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/3/af56e3eb-1de3-4eff-bb1b-617a85be7993.jpg" alt=""></p><p>以上，就是我的微信公众号开发中 <strong>简单的聊天功能，天气查询，讲笑话</strong> 三个功能的实现过程，在这里分享给大家，欢迎吐槽！</p><p>##后续<br><a href="http://www.yangyingming.com/article/368/" target="_blank" rel="noopener">基于Django、WeRoBot的微信公众平台开发（二） - 后续</a></p><p>##参考资料</p><p><a href="http://www.cnblogs.com/fatcat132006/p/4081576.html" target="_blank" rel="noopener">python中cursor操作数据库</a></p><p><a href="http://www.cnblogs.com/yd1227/archive/2011/03/18/1988015.html" target="_blank" rel="noopener">Python中的random模块</a>转载请注明：</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>什么是《轻量级Django》？</title>
      <link href="/2017/02/27/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8A%E8%BD%BB%E9%87%8F%E7%BA%A7Django%E3%80%8B%EF%BC%9F/"/>
      <url>/2017/02/27/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8A%E8%BD%BB%E9%87%8F%E7%BA%A7Django%E3%80%8B%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>##这本书讲了什么？<br>一句话概括<br><a id="more"></a></p><p>##这本书想让读者学到什么？<br>或者说想让读者能够达到什么目的</p><p>##这本书适合什么人看？<br>貌似是Django中级用户，了解Django和JavaScript。</p><p>##这本书中讲了什么奇技淫巧？</p><ul><li>单文件（setting、url、view都集成在一个文件中，没有model和template）运行一个简单的Django</li><li>用环境变量控制不同环境中的setting（传参）</li></ul><p>##对这本书的评价如何？<br>翻译有些烂，有些地方中文读起来不流畅。<br>书不是很厚，200+页，很快就能读完。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/363" target="_blank" rel="noopener">什么是《轻量级Django》？</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>基于Django、WeRoBot的微信公众平台开发（一）</title>
      <link href="/2017/02/23/%E5%9F%BA%E4%BA%8EDjango%E3%80%81WeRoBot%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017/02/23/%E5%9F%BA%E4%BA%8EDjango%E3%80%81WeRoBot%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>* 该教程基于第三方微信公众号开发框架 <a href="https://github.com/whtsky/WeRoBot" target="_blank" rel="noopener">WeRoBot</a><br>* 该教程在已有Django项目上开发，即在一个已上线网站项目中集成微信公众平台后台<br>* 你需要有一个VPS/云服务器</p><p>今天突发奇想，打算申请一个微信公众账号玩玩，以便同步博客上的一些文章。</p><p>由于在学python，于是打算用Python来开发微信公众号的后台。</p><p>为了方便开发，我在github上寻找微信公众号开发的框架，最后锁定了 <a href="https://github.com/whtsky/WeRoBot" target="_blank" rel="noopener">WeRoBot</a>。</p><p>下面我将使用WeRoBot搭建一个简单的微信公众号后台，并集成在一个已上线的Django网站项目中。</p><p>废话不多说了，我们开始吧！<br><a id="more"></a></p><p>##注册一个微信公众账号</p><p>首先我们要有一个微信公众号，申请过程很简单。</p><p>注册位置：<a href="https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN" target="_blank" rel="noopener">微信公众账号 - 注册</a></p><p>注册一个 <strong>订阅号/个人</strong> ，填写 <strong>公众号名称</strong>，具体注册过程这里不赘述。</p><p>注册成功之后，可进入微信公众号后台：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/aa170133-2bab-45b6-8a66-aae38aff0d34.png" alt=""></p><p>##配置开发者页面</p><p>点击 <strong>开发 -&gt; 基本配置</strong>，进入开发者页面</p><p>首先在 <strong>开发者ID</strong> 栏目中生成你的 <strong>AppSecret(应用密钥)</strong>，记下你的AppID和AppSecret，后面验证身份的时候会用到。</p><p>然后修改你的 <strong>服务器配置</strong>，点击后面的 <strong>修改配置</strong>，填写你的服务器配置。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/7832a412-a2ec-47d7-87a3-71639029919e.png" alt=""></p><p>这里你需要自定义你的 <strong>URL</strong> 和 <strong>Token</strong>。</p><ul><li><p>URL是你的微信公众号后台地址，客户端所有的请求都会发到这个地址上，你需要编写后台程序响应这些请求。</p></li><li><p>Token是用来验证你的开发者身份的，只有通过了身份验证，后台程序才能生效。</p></li></ul><p>注意：URL一栏中 <figure class="highlight plain"><figcaption><span>不要写成 ```/robot```，否则会无响应。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">配置好之后先不要点击提交，因为我们还没有写后台程序。</span><br><span class="line"></span><br><span class="line">接下来我们就要请出WeRoBot来协助我们开发微信公众号的后台。</span><br><span class="line"></span><br><span class="line">##安装WeRoBot</span><br><span class="line"></span><br><span class="line">执行代码  </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">pip install werobot</span><br></pre></td></tr></table></figure></p><p>安装过程</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/d82566a1-cc08-4217-be1c-66225a4787e3.png" alt=""></p><p>##在Django中集成基于WeRoBot的微信公众号后台</p><p>在Django中添加robot.py文件，负责响应微信客户端请求</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/7024b0e4-4d1f-4bfa-9a59-c68ce57fc1f6.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#coding=utf8</span></span><br><span class="line"> <span class="number">2</span> <span class="keyword">from</span> werobot <span class="keyword">import</span> WeRoBot</span><br><span class="line"> <span class="number">3</span></span><br><span class="line"> <span class="number">4</span> robot = WeRoBot(enable_session=<span class="keyword">False</span>,</span><br><span class="line"> <span class="number">5</span>                 token=<span class="string">'yourtoken'</span>,</span><br><span class="line"> <span class="number">6</span>                 APP_ID=<span class="string">'yourappid'</span>,</span><br><span class="line"> <span class="number">7</span>                 APP_SECRET=<span class="string">'yourappsecret'</span>)</span><br><span class="line"> <span class="number">8</span></span><br><span class="line"> <span class="number">9</span> @robot.handler</span><br><span class="line"><span class="number">10</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(message)</span>:</span></span><br><span class="line"><span class="number">11</span>     <span class="keyword">return</span> <span class="string">'Hello world'</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>@robot.handler表示对任何消息都做回复，这里的代码表示所有请求都回复“hello world”。</p><p>在Django中修改url.py文件，将微信客户端的请求指向到robot.py</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/f2bd8b4f-dff2-4d6f-b5c6-e4d988cb97ae.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span> <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</span><br><span class="line"><span class="number">17</span> <span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">from</span> blog.views <span class="keyword">import</span> index,archive,category,tag,article,search,board,about</span><br><span class="line"><span class="number">20</span> <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="number">21</span> <span class="keyword">from</span> blog.upload <span class="keyword">import</span> upload_image</span><br><span class="line"><span class="number">22</span> <span class="keyword">from</span> werobot.contrib.django <span class="keyword">import</span> make_view</span><br><span class="line"><span class="number">23</span> <span class="keyword">from</span> robot <span class="keyword">import</span> robot</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span> urlpatterns = [</span><br><span class="line"><span class="number">26</span>     <span class="comment"># 微信公众号响应页面</span></span><br><span class="line"><span class="number">27</span>     url(<span class="string">r'^robot/'</span>,make_view(robot)),</span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><p>##微信后台提交修改</p><p>微信后台的代码我们已经写好了，回到后台的服务器配置页面，点击 <strong>提交</strong>。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/6b640bc8-8ea1-44c0-a369-052ad145329c.png" alt=""></p><p>若token验证成功，会提示“提交成功”</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/9cba591c-af84-4f1a-a1bf-fb1abd1ab312.png" alt=""></p><p>##启动服务器配置</p><p>启动配置</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/0a44fcc2-0d21-4b06-965d-2315f9362c63.png" alt=""></p><p>启动成功</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/0f0f9f3e-144d-4f77-a8ca-ad87e8c46bdd.png" alt=""></p><p>##手机端验证</p><p>打开手机微信客户端，关注公众号，并回复任意消息。若收到 “hello world”，证明微信公众号后台已搭建成功。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/6a4a0ed9-6cc2-4410-8830-a1733a64d0b3.jpg" alt=""></p><p>##下一篇<br><a href="http://www.yangyingming.com/article/364/" target="_blank" rel="noopener">基于Django、WeRoBot的微信公众平台开发（二）</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/361" target="_blank" rel="noopener">基于Django、WeRoBot的微信公众平台开发（一）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>修改博客系统的第三方库</title>
      <link href="/2017/02/22/%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
      <url>/2017/02/22/%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>博客系统的运行环境由Django、markdownx、markdown-deux、markdown2等第三方库组成。</p><p>在写博客系统的过程中，为了实现自己的意图，我修改了一些第三方库的源代码。</p><p>为了以后方便部署，在这里记录一下我修改的地方。<br><a id="more"></a></p><p>##修改markdown_deux<br>markdown_deux用于渲染markdown文本</p><p>作用：关闭渲染的安全模式，以便正常渲染HTML<br>修改 BLOG_VENV/lib/python2.7/site-packages/markdown_deux/conf/settings.py  12行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">8</span> MARKDOWN_DEUX_DEFAULT_STYLE = &#123;</span><br><span class="line"> <span class="number">9</span>     <span class="string">"extras"</span>: &#123;</span><br><span class="line"><span class="number">10</span>         <span class="string">"code-friendly"</span>: <span class="keyword">None</span>,</span><br><span class="line"><span class="number">11</span>     &#125;,</span><br><span class="line"><span class="number">12</span>     <span class="string">"safe_mode"</span>: <span class="string">"escape"</span>,</span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure></p><p>为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">8</span> MARKDOWN_DEUX_DEFAULT_STYLE = &#123;</span><br><span class="line"> <span class="number">9</span>     <span class="string">"extras"</span>: &#123;</span><br><span class="line"><span class="number">10</span>         <span class="string">"code-friendly"</span>: <span class="keyword">None</span>,</span><br><span class="line"><span class="number">11</span>     &#125;,</span><br><span class="line"><span class="number">12</span>     <span class="comment">#"safe_mode": "escape",</span></span><br><span class="line"><span class="number">13</span>     <span class="string">"safe_mode"</span>: <span class="keyword">False</span>,</span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure></p><p>##修改markdownx<br>markdownx是一款markdown编辑器，支持所见即所得（预览）。</p><p>作用：使markdownx编辑器可以拖曳上传gif动图文件<br>修改 BLOG_VENV/lib/python2.7/site-packages/markdownx/forms.py 71行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">71</span>         <span class="keyword">if</span> content_type.lower() != self._SVG_TYPE:</span><br><span class="line"><span class="number">72</span>             <span class="comment"># Processing the raster graphic image:</span></span><br><span class="line"><span class="number">73</span>             image = self._process_raster(image, image_extension)</span><br><span class="line"><span class="number">74</span>             image_size = image.tell()</span><br></pre></td></tr></table></figure></p><p>为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">71</span>         <span class="keyword">if</span> content_type.lower() != self._SVG_TYPE <span class="keyword">and</span> content_type.lower() != <span class="string">'image/gif'</span>:</span><br><span class="line"><span class="number">72</span>             <span class="comment"># Processing the raster graphic image:</span></span><br><span class="line"><span class="number">73</span>             image = self._process_raster(image, image_extension)</span><br><span class="line"><span class="number">74</span>             image_size = image.tell()</span><br></pre></td></tr></table></figure></p><p>作用：修改markdownx编辑器预览页的css显示样式<br>修改 BLOG_VENV/lib/python2.7/site-packages/markdownx/static/markdownx/admin/css/markdownx.css 第7、10行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 4 <span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-editor</span>,</span><br><span class="line"> 5 <span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> &#123;</span><br><span class="line"> 6     margin-left: 0;</span><br><span class="line"> 7     <span class="selector-tag">width</span>: 610<span class="selector-tag">px</span>;</span><br><span class="line"> 8 &#125;</span><br><span class="line"> 9 <span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> &#123;</span><br><span class="line">10     overflow-y: scroll;</span><br><span class="line">11     <span class="selector-tag">-webkit-text-size-adjust</span>: 100%;</span><br><span class="line">12     <span class="selector-tag">-ms-text-size-adjust</span>: 100%;</span><br><span class="line">13     <span class="selector-tag">font-size</span>: 100%;</span><br><span class="line">14     <span class="selector-tag">font-size</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line">15     <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5em</span>;</span><br><span class="line">16 &#125;</span><br></pre></td></tr></table></figure></p><p>为<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 7 <span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-editor</span>,</span><br><span class="line"> 8 <span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> &#123;</span><br><span class="line"> 9     margin-left: 0;</span><br><span class="line">10     <span class="selector-tag">width</span>: 600<span class="selector-tag">px</span>;</span><br><span class="line">11 &#125;</span><br><span class="line">12 <span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> &#123;</span><br><span class="line">13     /*overflow-y: scroll;*/</span><br><span class="line">14     <span class="selector-tag">border</span>: <span class="selector-tag">double</span> ;</span><br><span class="line">15     <span class="selector-tag">-webkit-text-size-adjust</span>: 100%;</span><br><span class="line">16     <span class="selector-tag">-ms-text-size-adjust</span>: 100%;</span><br><span class="line">17     <span class="selector-tag">font-size</span>: 100%;</span><br><span class="line">18     <span class="selector-tag">font-size</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line">19     <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5em</span>;</span><br><span class="line">20</span><br><span class="line">21     <span class="selector-tag">margin-left</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">22     <span class="selector-tag">padding-top</span><span class="selector-pseudo">:0px</span>;</span><br><span class="line">23 &#125;</span><br></pre></td></tr></table></figure></p><p>作用：修改css，使markdownx编辑页和预览页并排显示<br>修改 BLOG_VENV/lib/python2.7/site-packages/markdownx/templates/markdownx/widget.html 全部代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"markdownx"</span>&gt;</span></span><br><span class="line">2     &#123;&#123; markdownx_editor &#125;&#125;</span><br><span class="line">3     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"markdownx-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 1 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"markdownx row"</span> &gt;</span></span><br><span class="line"> 2     <span class="comment">&lt;!--style="margin-left: -350px;margin-top:50px;"&gt;--&gt;</span></span><br><span class="line"> 3     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line"> 4         &#123;&#123; markdownx_editor &#125;&#125;</span><br><span class="line"> 5     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> 6     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span> &gt;</span></span><br><span class="line"> 7         <span class="comment">&lt;!--style="padding-left: 50px;"&gt;--&gt;</span></span><br><span class="line"> 8         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"markdownx-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> 9     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">10 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>作用：修改默认markdownx渲染引擎 markdown 为 markdown2<br>修改 BLOG_VENV/lib/python2.7/site-packages/markdownx/utils.py 第1行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> markdown</span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> <span class="number">4</span></span><br><span class="line"> <span class="number">5</span> <span class="keyword">from</span> .settings <span class="keyword">import</span> MARKDOWNX_MARKDOWN_EXTENSIONS, MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line"> <span class="number">6</span></span><br><span class="line"> <span class="number">7</span></span><br><span class="line"> <span class="number">8</span> <span class="function"><span class="keyword">def</span> <span class="title">markdownify</span><span class="params">(content)</span>:</span></span><br><span class="line"> <span class="number">9</span>     <span class="keyword">return</span> markdown.markdown(</span><br><span class="line"><span class="number">10</span>                         content,</span><br><span class="line"><span class="number">11</span>                         extensions=MARKDOWNX_MARKDOWN_EXTENSIONS,</span><br><span class="line"><span class="number">12</span>                         extension_configs=MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line"><span class="number">13</span>     )</span><br></pre></td></tr></table></figure></p><p>为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> markdown</span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> markdown2</span><br><span class="line"> <span class="number">5</span> <span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"> <span class="number">6</span> <span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> force_text</span><br><span class="line"> <span class="number">7</span> <span class="keyword">from</span> django.template.defaultfilters <span class="keyword">import</span> stringfilter</span><br><span class="line"> <span class="number">8</span></span><br><span class="line"> <span class="number">9</span> <span class="keyword">from</span> .settings <span class="keyword">import</span> MARKDOWNX_MARKDOWN_EXTENSIONS, MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span> <span class="function"><span class="keyword">def</span> <span class="title">markdownify</span><span class="params">(content)</span>:</span></span><br><span class="line"><span class="number">13</span>     <span class="keyword">return</span> markdown2.markdown(</span><br><span class="line"><span class="number">14</span>         content,extras=MARKDOWNX_MARKDOWN_EXTENSIONS</span><br><span class="line"><span class="number">15</span>     )</span><br></pre></td></tr></table></figure></p><p>##尾记<br>当时部署网站的时候，我先将项目源代码复制到了vps中，接下来需要安装项目的运行环境，比如Django、markdown2等。</p><p>通过requirements.txt 安装了依赖的第三方工具之后，发现我改动的内容并没有同步过来。这意味着我运行项目之后，有些地方的效果并不能和我意图相同，比如markdownx编辑器的编辑页和预览页不能并排显示。</p><p>为了找回同步的内容，我用diff对比了 <strong>修改过的运行环境</strong> 和 <strong>原生运行环境</strong>，得到对比结果之后总结出以上内容。</p><p>以下是diff的原对比结果，也放在这里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/markdown_deux/conf/settings.py BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/markdown_deux/conf/settings. </span><br><span class="line">py</span><br><span class="line"><span class="number">12</span>,<span class="number">13</span>c</span><br><span class="line">    <span class="string">"safe_mode"</span>: <span class="string">"escape"</span>,</span><br><span class="line">.</span><br><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/markdownx/forms.py BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/markdownx/forms.py</span><br><span class="line"><span class="number">71</span>c</span><br><span class="line">        <span class="keyword">if</span> content_type.lower() != self._SVG_TYPE:</span><br><span class="line">.</span><br><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/markdownx/static/markdownx/admin/css/markdownx.css BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/</span><br><span class="line">markdownx/static/markdownx/admin/css/markdownx.css</span><br><span class="line"><span class="number">135</span>,<span class="number">166</span>d</span><br><span class="line"><span class="number">112</span>d</span><br><span class="line"><span class="number">22</span>,<span class="number">24</span>d</span><br><span class="line"><span class="number">15</span>,<span class="number">16</span>c</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">.</span><br><span class="line"><span class="number">12</span>,<span class="number">13</span>d</span><br><span class="line"><span class="number">10</span>c</span><br><span class="line">    width: <span class="number">610</span>px;</span><br><span class="line">.</span><br><span class="line"><span class="number">3</span>,<span class="number">5</span>d</span><br><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/markdownx/templates/markdownx/widget.html BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/markdownx/    </span><br><span class="line">templates/markdownx/widget.html</span><br><span class="line"><span class="number">1</span>,<span class="number">9</span>c</span><br><span class="line">&lt;div class="markdownx"&gt;</span><br><span class="line">    &#123;&#123; markdownx_editor &#125;&#125;</span><br><span class="line">    &lt;div class="markdownx-preview"&gt;&lt;/div&gt;</span><br><span class="line">.</span><br><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/markdownx/utils.py BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/markdownx/utils.py</span><br><span class="line"><span class="number">16</span>,<span class="number">22</span>d</span><br><span class="line"><span class="number">13</span>,<span class="number">14</span>c</span><br><span class="line">    <span class="keyword">return</span> markdown.markdown(</span><br><span class="line">                        content,</span><br><span class="line">                        extensions=MARKDOWNX_MARKDOWN_EXTENSIONS,</span><br><span class="line">                        extension_configs=MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line">.</span><br><span class="line"><span class="number">4</span>,<span class="number">7</span>d</span><br><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/pkg_resources/__init__.py BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/pkg_resources/__init__.py</span><br><span class="line"><span class="number">1958</span>a</span><br><span class="line">        <span class="keyword">elif</span> subitem.lower().endswith(<span class="string">'.dist-info'</span>):</span><br><span class="line">            subpath = os.path.join(path_item, subitem)</span><br><span class="line">            submeta = EggMetadata(zipimport.zipimporter(subpath))</span><br><span class="line">            submeta.egg_info = subpath</span><br><span class="line">            <span class="keyword">yield</span> Distribution.from_location(path_item, subitem, submeta)</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">diff -x <span class="string">'*.pyc'</span> -ed -r BLOG_VENV/lib/python2<span class="number">.7</span>/site-packages/setuptools/command/__init__.py BLOG_VENV_nav/lib/python2<span class="number">.7</span>/site-packages/setuptools/command/__init__. </span><br><span class="line">py</span><br><span class="line"><span class="number">5</span>c</span><br><span class="line">    <span class="string">'register'</span>, <span class="string">'bdist_wininst'</span>, <span class="string">'upload_docs'</span>, <span class="string">'upload'</span>, <span class="string">'build_clib'</span>,</span><br><span class="line">.</span><br></pre></td></tr></table></figure></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/360" target="_blank" rel="noopener">修改博客系统的第三方库</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搭建网站自动备份机制（crontab+mysqldump+tar+oss）</title>
      <link href="/2017/02/20/%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E6%9C%BA%E5%88%B6%EF%BC%88crontab+mysqldump+tar+oss%EF%BC%89/"/>
      <url>/2017/02/20/%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E6%9C%BA%E5%88%B6%EF%BC%88crontab+mysqldump+tar+oss%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/2/8a79aeae-cf79-4929-be3d-787f87d110ba.jpg" alt=""></p><p>个人网站在云服务器上部署好了之后，为了防止数据丢失，我们往往需要定期的备份网站的数据。</p><p>每次手动去备份太麻烦，我们可以使用 <strong>Linux+Python</strong> 搭建一个 <strong>网站自动备份机制</strong> 来自动化、定时的去完成备份工作。</p><p>简单来说这个机制可以 <strong>定时备份网站数据，并自动将备份文件上传到云上</strong>。<br><a id="more"></a></p><p>##前言<br>首先我们要清楚需要备份的网站数据有哪些，对我自己的网站来说，主要是以下两个部分：</p><ul><li>网站项目源代码</li><li>mysql数据库中的数据</li></ul><p>这两部分是动态变化的，特别是mysql数据库中的数据，几乎每天都会更新。</p><p>为了加强备份，我的 <strong>网站自动备份机制</strong> 主要完成两个功能：</p><ul><li>定时生成备份文件（.sql 和 .tar）</li><li>将备份文件上传到OSS中</li></ul><p>如此相当于有了双重保险，云服务器端和OSS都存有备份文件。</p><p>涉及到的工具主要有：</p><ul><li>crontab：linux的计划任务功能，可以定时运行程序</li><li>mysqldump：mysql的备份工具</li><li>tar：linux的打包工具，用于备份项目源码</li><li>oss：阿里云的对象存储服务，相当于一个网盘</li></ul><p>##搭建步骤<br>下面开始搭建 <strong>网站自动备份机制</strong>：</p><ul><li><p>在工作目录创建备份文件夹 <strong>Backup</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir Backup</span><br></pre></td></tr></table></figure></li><li><p>创建两个shell脚本文件：<strong>MingBlog_mysql_backup.sh</strong> 和 <strong>MingBlog_src_backup.sh</strong>（MingBlog是我的项目名）<br>它们功能分别是：<br>1.使用mysqldump创建mysql备份文件，并上传到oss中<br>2.使用tar打包当前项目源码，并上传到oss中<br>此时目录结构为：</p></li></ul><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/9abaf9ee-fce0-4141-b27f-669d5cbf9a35.png" alt=""></p><ul><li>修改mysql配置文件 <strong>/etc/mysql/my.cnf</strong>，设置mysqldump的默认user和password，否则会提示“密码不能写在命令中”的warnning：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqldump]</span></span><br><span class="line">quick</span><br><span class="line">quote-names</span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">1</span>G</span><br><span class="line"><span class="attr">user</span>=your_mysql_user</span><br><span class="line"><span class="attr">password</span>=your_mysql_password</span><br></pre></td></tr></table></figure><ul><li>编写<strong>MingBlog_mysql_backup.sh</strong> 和 <strong>MingBlog_src_backup.sh</strong> shell代码（设置了my.cnf，sh中使用mysqldump时就不用user和password了）：</li></ul><p>MingBlog_mysql_backup.sh<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Database info</span></span><br><span class="line">DBNAME=<span class="string">"blog"</span></span><br><span class="line">BINDIR=<span class="string">"/usr/bin"</span></span><br><span class="line">BCKDIR=<span class="string">"/root/workspace/Backup/MingBlog_mysql_backup"</span></span><br><span class="line">DATE=`date +%Y%m%d_%H%M%S`</span><br><span class="line">FILENAME=mysql_$&#123;DBNAME&#125;_bak.$DATE.sql.gz</span><br><span class="line">FILEPATH=$BCKDIR/$FILENAME</span><br><span class="line"><span class="comment"># TODO</span></span><br><span class="line">$BINDIR/mysqldump $DBNAME | gzip &gt; $FILEPATH</span><br><span class="line">/usr/local/sbin/put_oss_backup $FILEPATH Backup/MingBlog_mysql_backup/$FILENAME</span><br></pre></td></tr></table></figure></p><p>MingBlog_src_backup.sh<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">PRONAME=<span class="string">"MingBlog"</span></span><br><span class="line">PROPATH=<span class="string">"/root/workspace/MingBlog"</span></span><br><span class="line">DATE=`date +%Y%m%d_%H%M%S`</span><br><span class="line">FILENAME=$&#123;PRONAME&#125;_bak.$DATE.tar</span><br><span class="line">FILEPATH=/root/workspace/Backup/MingBlog_src_backup/$FILENAME</span><br><span class="line"><span class="comment"># TODO</span></span><br><span class="line">tar czvf $FILEPATH $PROPATH</span><br><span class="line">/usr/local/sbin/put_oss_backup $FILEPATH Backup/MingBlog_src_backup/$FILENAME</span><br></pre></td></tr></table></figure></p><ul><li>创建oss上传脚本 <strong>put_oss_backup.py</strong> ，编写代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="comment"># linux环境oss上传程序</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">percentage</span><span class="params">(consumed_bytes, total_bytes)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> total_bytes:</span><br><span class="line">        rate = int(<span class="number">100</span> * (float(consumed_bytes) / float(total_bytes)))</span><br><span class="line">        print(<span class="string">'\r&#123;0&#125;% '</span>.format(rate), end=<span class="string">''</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(topath,filedata)</span>:</span></span><br><span class="line">    auth = oss2.Auth(<span class="string">'your_access_id'</span>, <span class="string">'your_access_key'</span>)</span><br><span class="line">    bucket = oss2.Bucket(auth, <span class="string">'your_endpoint'</span>, <span class="string">'your_bucket_name'</span>)</span><br><span class="line">    bucket.put_object(topath, filedata, progress_callback=percentage)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(filename,topath)</span>:</span></span><br><span class="line">    curdir_list = os.listdir(<span class="string">'.'</span>)</span><br><span class="line">    print(<span class="string">'\033[1;36;40m'</span>,end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'start uploading [%s]......'</span>%filename)</span><br><span class="line">    print(<span class="string">'\033[0m'</span>,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 上传文件在当前目录下</span></span><br><span class="line">        fp = open(filename,<span class="string">'r'</span>)</span><br><span class="line">        data = fp.read()</span><br><span class="line">        fp.close()</span><br><span class="line">        upload(topath,data)</span><br><span class="line">        print(<span class="string">'\033[0;32;40m'</span>,end=<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">'Upload success.'</span>)</span><br><span class="line">        print(<span class="string">'\033[0m'</span>,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">raise</span> Exception,<span class="string">'%s is not in the current directory,can\'t upload.'</span>%filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 获取下载列表</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv)==<span class="number">1</span>:</span><br><span class="line">        files = raw_input(<span class="string">'Please input upload filename : '</span>)</span><br><span class="line">        files = files.strip().split()</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv)&gt;=<span class="number">2</span>:</span><br><span class="line">        files = sys.argv[<span class="number">1</span>:]</span><br><span class="line">        filename = files[<span class="number">0</span>]</span><br><span class="line">        topath = files[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'\033[1;36;40m'</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"[1]"</span>,end=<span class="string">' '</span>)</span><br><span class="line">        print(<span class="string">'\033[0m'</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            start(filename,topath)</span><br><span class="line">        <span class="keyword">except</span> Exception,e:</span><br><span class="line">            print(<span class="string">'\033[0;31;40m'</span>,end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">'Upload failed.'</span>)</span><br><span class="line">            print(<span class="string">'[ERROR]:%s'</span>%e)</span><br><span class="line">            print(<span class="string">'\033[0m'</span>,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></li></ul><p>代码写完之后，我们运行<figure class="highlight plain"><figcaption><span>put_oss_backup.py</span><a href="/usr/local/sbin/put_oss_backup```将脚本安装到默认搜索路径下，这样不管在什么目录下都可以运行该脚本。">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同时，进入阿里云的OSS后台，创建 **Backup** 一级目录，并在其中创建两个二级目录 **MingBlog\_mysql\_backup** 和 **MingBlog\_src\_backup**，分别放置mysql和项目源码的备份文件。</span><br><span class="line"></span><br><span class="line">* 使用crontab设置定时任务，运行```crontab -e```添加新任务：</span><br><span class="line">```python</span><br><span class="line">0    3 * * *    ~/workspace/Backup/MingBlog_mysql_backup.sh &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">0    4 * * *    ~/workspace/Backup/MingBlog_src_backup.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>好了，到这里整个 <strong>网站自动备份机制</strong> 已经基本上搭建完成，以上操作主要写了三个脚本，互相搭配使用，它们之间的逻辑关系为：  </p><p>crontab每天凌晨3点和4点定时执行两个shell脚本，<strong>MingBlog_mysql_backup.sh</strong> 备份mysql数据并上传到oss，<strong>MingBlog_src_backup.sh</strong> 打包项目源码并上传到oss。两个sh脚本都使用了 <strong>put_oss_backup.py</strong> 上传文件到oss。</p><p>##使用截图<br>运行MingBlog_mysql_backup.sh  </p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/6ca4227e-f344-40d0-a024-4d6f439e83cd.png" alt=""></p><p>运行MingBlog_src_backup.sh  </p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/d9305def-ea89-4556-b53c-8da14c6fb42d.png" alt=""></p><p>运行备份脚本之后的目录结构</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/2c15935f-7fe6-4fe7-bb3d-205e6422d615.png" alt=""></p><p>阿里云OSS后台  </p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/5d305199-912e-444a-a3d2-372e31a974ae.png" alt=""></p><p>mysql备份  </p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/5c32562c-a074-46df-b7e9-062769799338.png" alt=""></p><p>项目源码备份  </p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/86ba406d-0c8b-47c2-9625-be64fa0127c5.png" alt=""></p><p>##后记<br>当然网站备份的方式有很多，在这里我只利用手头的工具定期备份了网站的数据库和源码，还有很多可以改进的地方，比如将备份方式改成增量备份，可以节省很多空间。不过对我来说，目前够用就可以。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/359" target="_blank" rel="noopener">搭建网站自动备份机制（crontab+mysqldump+tar+oss）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>【翻译】Django1.8 中文文档</title>
      <link href="/2017/02/14/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91Django1.8%20%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
      <url>/2017/02/14/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91Django1.8%20%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="https://docs.djangoproject.com/en/1.8/" target="_blank" rel="noopener">Django documentation</a></p><p>关于Django你需要知道的一些事情。<br><a id="more"></a></p><p>##开始你的第一步<br>你是第一次接触Django或者……编程吗？那就从这里开始吧！</p><ul><li>从零开始：概览 | 安装</li><li>教程：第一章: 模型 | 第二章: 用admin管理站点 | 第三章: 视图和模板 | 第四章: 表单和通用视图 | 第五章: 测试你的网站 | 第六章: 静态文件</li><li>高级教程：怎样写一个复用性强的应用 | 编写你的第一个Django补丁</li></ul><p>##模型层</p><p>为了构建和操作你的网站应用数据，Django提供了一个抽象层（即“模型层”）。继续读你可以学习到更多关于模型层的知识：</p><ul><li>模型：什么是模型？ |  字段类型 | 元选项 | 模型类</li><li>QuerySets：执行查询 | QuerySet API参考 | 查找表达式</li><li>模型的实例：实例方法 | 访问关联对象</li><li>迁移：什么是迁移？ | 迁移 API参考 | 模式编辑器 | 编写迁移脚本</li><li>高级篇：管理器 | 执行原始SQL语句 | 事务 | 聚合 | 自定义字段 | 多数据库 | 自定义查找 | 查询表达式 | 条件表达式 | 数据库函数</li><li>其它：支持的数据库 | 其它数据库 | 提供初始数据 | 优化数据库访问 | PostgreSQL特殊特征</li></ul><p>##视图层</p><p>Django具有“视图”的概念，以便更好的封装用户的请求以及返回响应这一逻辑过程。通过以下链接你可以找到你想了解的内容：</p><ul><li>基础：URL设置 | 视图函数 | 快捷函数 | 装饰器</li><li>参考：内建的视图 | 请求/响应对象 | 模板响应对象</li><li>文件上传：概览 | 文件对象 | 存储API | 管理文件 | 自定义存储</li><li>基于类的视图：概览 | 内建展示视图 | 内建编辑视图 | 使用Mixins | API参考 | 各种视图的分类</li><li>高级：生成 CSV | 生成 PDF</li><li>中间件：概览 | 内建中间件类</li></ul><p>##模板层</p><p>模型层提供设计友好的语法来渲染用户要请求的信息。设计师可以学习它的语法，程序员可以学习如何扩展它：</p><ul><li>基础：概览</li><li>面向设计师：语法概览 | 内建标签和过滤器 | 人性化</li><li>面向程序员：模板API | 自定义标签和过滤器</li></ul><p>##表单</p><p>Django提供一个多功能的框架来便捷的创建表单和操作表单数据。</p><ul><li>基础：概览 | 表单 API | 内建字段 | 内建Widget</li><li>高级：表单和模型 | 整合媒体文件 | 表单集 | 自定义验证</li></ul><p>##开发流程</p><p>学习多种组件和工具帮助你开发和测试你的Django应用：</p><ul><li>设置：概览 | 设置清单</li><li>应用：概览</li><li>异常：概览</li><li>django-admin 和 manage.py：概览 | 添加自定义命令</li><li>测试：简介 | 编写并运行测试脚本 | 包含的测试工具 | 高级主题</li><li>部署：概览 | WSGI 服务 | 部署静态文件 | 通过email追踪代码错误</li></ul><p>##Admin界面</p><p>自动生成admin管理界面的接口是Django中最受欢迎的功能之一：</p><ul><li>admin管理界面</li><li>admin管理操作</li><li>admin文档生成器</li></ul><p>##安全</p><p>安全是web开发领域中一项至关重要的话题，Django提供多种保护网站的工具和机制。</p><ul><li>安全概览</li><li>Django中公开的安全问题</li><li>点击劫持保护</li><li>伪造跨站请求保护</li><li>加密签名</li><li>安全中间件</li></ul><p>##国际化和本地化</p><p>Django提供一种健壮的国际化和本地化框架来协助你开发跨多种语言和地区的应用。</p><ul><li>概览 | 国际化 | 本地化 | 本地化Web UI格式化和表单输入</li><li>时区</li></ul><p>##性能和优化</p><p>Django提供多种技术和工具使你的代码更有效的运行、获得更快的速度，以及更好的使用系统资源。</p><ul><li>性能和优化概览</li></ul><p>##Python的兼容性</p><p>Django的目标是兼容不同的python版本和特性：</p><ul><li>关于Jython支持</li><li>关于Python 3 的兼容性</li></ul><p>##Geographic框架</p><p>GeoDjango旨在成为一个世界级的地理框架。它的目标是尽可能简单的建立GIS地理信息网站应用，以及更好的利用可用的空间数据。</p><p>##常用的Web应用工具</p><p>Django提供多种常用的工具帮助你开发Web应用：</p><ul><li>认证：概览 | 使用认证系统 | 密码管理 | 自定义认证 | API 参考</li><li>缓存</li><li>日志</li><li>发送邮件</li><li>聚合内容（RSS/Atom）</li><li>分页</li><li>消息框架</li><li>序列化</li><li>会话</li><li>站点地图</li><li>静态文件管理</li><li>数据验证</li></ul><p>##其它核心功能</p><p>学习Django框架的其它核心功能：</p><ul><li>条件内容处理</li><li>内容类型和泛型的关系</li><li>Flatpages数据浏览</li><li>重定向</li><li>信号</li><li>系统检查框架</li><li>“sites”框架</li><li>Django中的unicode编码</li></ul><p>##Django开源项目</p><p>了解Django项目的开发进度，以及如何贡献你的力量：</p><ul><li>社区：如何成为社区的一员？ | 发布流程 | 团队组织 | 约见团队 | 当前角色 | Django源码库 | 安全策略 | 邮件列表</li><li>设计理念：概览</li><li>文档：关于该文档</li><li>第三方发行：概览</li><li>Django路线图：API 兼容性 | Release 与 Upgrade | 废弃用法</li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/358" target="_blank" rel="noopener">【翻译】Django1.8 中文文档</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>【IJCAI-17 口碑商家客流量预测】使用Pandas计算商家平均客流量</title>
      <link href="/2017/02/14/%E3%80%90IJCAI-17%20%E5%8F%A3%E7%A2%91%E5%95%86%E5%AE%B6%E5%AE%A2%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B%E3%80%91%E4%BD%BF%E7%94%A8Pandas%E8%AE%A1%E7%AE%97%E5%95%86%E5%AE%B6%E5%B9%B3%E5%9D%87%E5%AE%A2%E6%B5%81%E9%87%8F/"/>
      <url>/2017/02/14/%E3%80%90IJCAI-17%20%E5%8F%A3%E7%A2%91%E5%95%86%E5%AE%B6%E5%AE%A2%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B%E3%80%91%E4%BD%BF%E7%94%A8Pandas%E8%AE%A1%E7%AE%97%E5%95%86%E5%AE%B6%E5%B9%B3%E5%9D%87%E5%AE%A2%E6%B5%81%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/2/039dd99e-d59c-4841-a1a4-995e71c58cf5.png" alt=""></p><p>这段时间参加了天池的 <strong>IJCAI-17 口碑商家客流量预测</strong> 大数据竞赛，初次参加此类竞赛，也是第一次使用pandas，折腾了许久，记录下自己的心得。<strong>代码很粗糙，仅作个人记录用。参考价值不大，大神勿喷。</strong></p><p>下面出现的代码已经提交检验通过，第一次提交混上了排行榜，400+左右的位置，第二次修改了一下混到了200+的位置，真是没有想到这么水的算法也能上排行榜……<br><a id="more"></a></p><p>这场比赛 <strong>题目大意</strong> 是：<br>给你提供2000家商家的店铺信息，以及他们的历史支付记录（大概7000w条）和浏览记录（大概500w条），你需要预测每个商家未来14天每天的客流量，每家店铺的客流量是指“单位时间内在商家使用支付宝消费的用户人次”，即每天这家店铺的支付次数。</p><p>##第一次提交</p><p>一般来说，这种“预测”问题，需要用到机器学习或者数据挖掘等算法，但由于我是新手，所以打算采用最简单的办法先尝试一下。</p><p>最简单的 <strong>思路</strong> 是：<br>统计每个商家每周的客流量均值，即统计这个商家每周一、周二、周三……平均每天有多少客流量。</p><p>那么解决问题的 <strong>步骤</strong> 是：<br>1、统计每个商家历史日期每天的客流量。<br>2、计算每个商家历史日期分别对应的星期数，累加客流量和出现次数。<br>3、计算每个商家每周的客流量均值。</p><p><strong>代码</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line">user_pay = pandas.read_csv(<span class="string">r'.\dataset\dataset\user_pay.txt'</span>,header=<span class="keyword">None</span>,names=[<span class="string">'user_id'</span>,<span class="string">'shop_id'</span>,<span class="string">'time_stamp'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组操作</span></span><br><span class="line">grouped = user_pay.groupby( [user_pay[<span class="string">'shop_id'</span>],user_pay[<span class="string">'time_stamp'</span>]] )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到每个商家历史日期每天的客流量</span></span><br><span class="line">groupcnt = grouped.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将每个商家每天的客流量写入到csv文件中</span></span><br><span class="line">fp = open(<span class="string">'user_pay_3.csv'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> grouped:</span><br><span class="line">    fp.write(<span class="string">'%s,%s,%d\n'</span>%(i[<span class="number">0</span>],i[<span class="number">1</span>],j.count()[<span class="string">'shop_id'</span>]))</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取每位商家的客流量csv文件</span></span><br><span class="line">shop_cnt = pandas.read_csv(<span class="string">r'user_pay_3.csv'</span>, iterator=<span class="keyword">True</span>,chunksize=<span class="number">1</span>,header=<span class="keyword">None</span>,names=[<span class="string">'shop_id'</span>,<span class="string">'date'</span>,<span class="string">'cnt'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个商家一个星期每天的总客流量 和 每天的计数</span></span><br><span class="line"><span class="comment"># shop_cnt是迭代的方式</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">num_week = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">7</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">2000</span>)]</span><br><span class="line">ave_week = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">7</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">2000</span>)]</span><br><span class="line"><span class="keyword">for</span> shop <span class="keyword">in</span> shop_cnt:</span><br><span class="line">    <span class="comment">#print shop</span></span><br><span class="line">    shop_id = shop.values[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    date = shop.values[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    cnt = shop.values[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">print</span> shop_id</span><br><span class="line">    w = int(time.strftime(<span class="string">'%w'</span>,time.strptime(date,<span class="string">'%Y-%m-%d'</span>)))</span><br><span class="line">    ave_week[shop_id<span class="number">-1</span>][w] += cnt</span><br><span class="line">    num_week[shop_id<span class="number">-1</span>][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">print</span> i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        ave_week[i][j] = int( ave_week[i][j] / num_week[i][j] )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出为结果csv</span></span><br><span class="line">fp = open(<span class="string">'answer.csv'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">print</span> i+<span class="number">1</span></span><br><span class="line">    fp.write(<span class="string">'%d'</span>%(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">7</span>):</span><br><span class="line">        fp.write(<span class="string">',%d'</span>%(ave_week[i][j]))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        fp.write(<span class="string">',%d'</span>%(ave_week[i][j]))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">7</span>):</span><br><span class="line">        fp.write(<span class="string">',%d'</span>%(ave_week[i][j]))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        fp.write(<span class="string">',%d'</span>%(ave_week[i][j]))</span><br><span class="line">    fp.write(<span class="string">'\n'</span>)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure></p><p>##第二次提交<br>以上代码提交之后，Loss值是0.16，排名400+，和当时排名第一的0.07相差甚远。我思考了一下，发现其实不必计算全局的均值，<strong>只取后四周的均值</strong> 可能更接近实际结果。</p><p>于是我改进了一下算法，把统计总客流量那里的代码改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非迭代方式读取</span></span><br><span class="line">shop_cnt = pandas.read_csv(<span class="string">r'user_pay_3.csv'</span>,header=<span class="keyword">None</span>,names=[<span class="string">'shop_id'</span>,<span class="string">'date'</span>,<span class="string">'cnt'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个商家一个星期每天的总客流量 和 每天的计数</span></span><br><span class="line"><span class="comment"># shop_cnt是列表</span></span><br><span class="line">num_week = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">7</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">2000</span>)]</span><br><span class="line">ave_week = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">7</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">2000</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shop_cnt)):</span><br><span class="line">    shop_id = shop_cnt[i:i+<span class="number">1</span>].values[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    date = shop_cnt[i:i+<span class="number">1</span>].values[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    cnt = shop_cnt[i:i+<span class="number">1</span>].values[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">print</span> shop_id,date,cnt</span><br><span class="line">    w = int(time.strftime(<span class="string">'%w'</span>,time.strptime(date,<span class="string">'%Y-%m-%d'</span>)))</span><br><span class="line">    <span class="keyword">if</span> sum(num_week[shop_id<span class="number">-1</span>]) &lt; <span class="number">28</span>:</span><br><span class="line">        ave_week[shop_id<span class="number">-1</span>][w] += cnt</span><br><span class="line">        num_week[shop_id<span class="number">-1</span>][w] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> sum(num_week[shop_id<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>这次提交之后，Loss值变成了0.96，排名提高到了200+。</p><p>##总结<br>虽然算法很简单，但也算是我第一次参加大数据比赛的经历。第一次处理这么大规模的数据，虽然和生产环境相比，这点数据还是小儿科，但对我来说，是一笔宝贵的经验。7000w条数据，可能一条语句就会处理半天，所以使用更好的工具——比如pandas效率就很高——就变得尤为重要；处理时的策略也一定要想清楚，否则就是在浪费时间。</p><p>其实接触这个比赛才没几天，但已经给我打开了一扇关于数据处理的新的大门。相信继续研究下去会很有意思。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://my.oschina.net/lionets/blog/280332" target="_blank" rel="noopener">pandas 数据分组运算</a></p><p><a href="http://blog.csdn.net/leonis_v/article/details/51832916" target="_blank" rel="noopener">pandas聚合和分组运算之groupby</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/357" target="_blank" rel="noopener">【IJCAI-17 口碑商家客流量预测】使用Pandas计算商家平均客流量</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>谈谈《克苏鲁神话》</title>
      <link href="/2017/02/12/%E8%B0%88%E8%B0%88%E3%80%8A%E5%85%8B%E8%8B%8F%E9%B2%81%E7%A5%9E%E8%AF%9D%E3%80%8B/"/>
      <url>/2017/02/12/%E8%B0%88%E8%B0%88%E3%80%8A%E5%85%8B%E8%8B%8F%E9%B2%81%E7%A5%9E%E8%AF%9D%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/2/1b1d6da8-71f0-4c35-8c61-074b28c163cb.jpg" alt=""></p><p>《克苏鲁神话》是美国作家霍华德·菲利普·洛夫克拉夫特原作，姚向辉翻译、整理出版的一本导读类作品。<br><a id="more"></a></p><p>这本书所导读的——“克苏鲁神话”是上个世纪美国作家洛夫克拉夫特所创作的架空神话传说体系，洛夫克拉夫特英文名是Lovecraft，被克苏鲁迷们戏称为“爱手艺大神”。洛夫克拉夫特一生坎坷，性格怪异，也许正是他偏执的精神状态，才造就了后世影响深远的克苏鲁神话体系。</p><p>也许你没听过“克苏鲁神话”，但是以下出现在一些电影、小说、游戏中的克苏鲁神话元素，你一定有所耳闻甚至深有体会：</p><ul><li>《魔兽世界》中的上古之神<br>艾泽拉斯世界中和泰坦对立的另一方势力，隶属于“虚空领主”，潜藏在地底，等待复苏的机会。</li><li>《辐射》中的敦威治大楼<br>游戏《辐射4》中的场景——敦威治大楼，来源于洛夫克拉夫特的小说《敦威治恐怖事件》，也是这本书收录的最后一篇小说。</li><li>《蝙蝠侠》中的阿卡姆疯人院<br>阿卡姆（Arkham）这个名字来源于克苏鲁神话作品《印斯茅斯的阴影》中的小镇，同时也来源于洛夫克拉夫特当时出版小说的出版社——阿卡姆社。</li><li>《沙耶之歌》中的沙耶<br>女主角沙耶原型为外神纱布·尼古拉丝的子嗣。</li><li>《血源诅咒》的游戏背景<br>游戏中浓浓的克苏鲁风格，全部都是。</li><li>《加勒比海盗》中的戴维船长<br>章鱼脸的船长……完全照抄克苏鲁形象。</li><li>《迷雾》中的神秘异世界<br>克苏鲁式的恐怖气氛烘托手法，恐怖小说大师史蒂芬金一直深受克苏鲁文化的影响，他笔下的作品很多都蒙着一层“神秘”、“未知”的面纱，比如《闪灵》、《神秘窗》等。而迷雾中的怪物是什么并不重要，重要的是它在人群中制造的极度恐怖的气氛。</li><li>《潜行吧！奈亚子》中的奈亚子<br>克苏鲁神话系列中的 奈亚拉托提普 的拟人化形象（娘化）</li><li>《星界边境》中的各大boss<br>游戏《星界边境》故事开始就是克苏鲁毁灭了地球，在星际漂流中，主角了解到泰坦古代文明同克苏鲁之间的战斗，克苏鲁被封印在时空之门后面。</li><li>《迪迦奥特曼》的故事背景<br>《迪迦奥特曼》的背景和剧情中加入了大量克苏鲁神话元素，最终的boss加坦杰厄毁灭了超古代文明，其原型就是邪神加塔诺托亚。</li><li>《泰拉瑞亚》的游戏背景<br>游戏《泰拉瑞亚》中很多boss都有浓厚的克苏鲁风格，比如有一个BOSS叫潮汐之月，这个BOSS就像旧日支配者克苏鲁。<br>……<br>……</li></ul><p>看过这些，是不是对克苏鲁神话多少有些了解了呢？</p><p>总结这些出现在电影、小说、游戏中的克苏鲁神话元素，你会发现一些共通点：<strong>恐怖、不可名状、神秘</strong>，那是一种你想起来就会不由自主内心战栗的恐怖气氛。可以说，克苏鲁神话元素，已经渗透进我们所接触到的现代恐怖元素的方方面面。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/8ff17ebf-2aab-4b1e-bc39-ec50b14cdb9c.jpg" alt=""></p><p>”人类最古老而又最强烈的情感是恐惧，而最古老又最强烈的恐惧是未知。”  ——洛夫克拉夫特</p><p>克苏鲁神话的成功之处，在于成功利用了人类对于未知的恐惧，在小说中，爱手艺大神很善于营造恐怖的气氛，它吸引着你随着主人公的步伐探索未知的神秘之地，并在恐怖即将降临之际戛然而止，留下令人不安的空白让人去想象。在探索的过程中，往往能触及黑暗背后细微的可怕真相，而这种似有若无的压抑气氛，更能展现一种混沌的、不可名状的恐怖。</p><p>克苏鲁神话中有一个重要的概念是“人类是渺小的”、“宇宙本身对人类的存在漠不关心”，这种无情的、现实的理念，在当时充满YY幻想的美国流行小说界并不被认可，一度被认为是“非主流文学”，被大众排斥。实际上我们现在仔细思考一下这个理念，会发现它是十分理性和讽刺的，人类在宇宙中的地位，不正是如同蝼蚁一般，渺小而无力，如果将眼界放到整个宇宙之上，又有谁会在意一个小小的地球呢？</p><p>克苏鲁神话相关介绍：</p><p><a href="https://zhuanlan.zhihu.com/p/24419311" target="_blank" rel="noopener">十部克苏鲁内核电影</a></p><p><a href="https://www.zhihu.com/question/20076916" target="_blank" rel="noopener">克苏鲁神话究竟有什么特别之处，能被后世广泛扩展到很多游戏和小说中？ - 知乎</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/356" target="_blank" rel="noopener">谈谈《克苏鲁神话》</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Pandas读取csv表格数据 &amp;&amp; 存入数据库</title>
      <link href="/2017/02/10/Pandas%E8%AF%BB%E5%8F%96csv%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%20&amp;&amp;%20%E5%AD%98%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2017/02/10/Pandas%E8%AF%BB%E5%8F%96csv%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%20&amp;&amp;%20%E5%AD%98%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>作为一只萌新报名参加了阿里的天池大数据比赛，参加的这场比赛的题目是 <strong>预测商家未来14天的客流量</strong> 。由于第一次做ML/DM方面的比赛，所以上手需要学习不少新知识，比如读取数据这方面。</p><p>Pandas是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的，经常用于数据分析和科学计算领域。</p><p>不管参加天池大数据比赛或者是Kaggle，首先要做得都是从比赛提供的数据文件中将数据提取出来，即 <strong>提取数据</strong>。</p><p>为了更好的提取数据我不可避免的用到了Pandas，在这里我把用pandas提取csv表格数据的心得记录下来。<br><a id="more"></a></p><p>比赛地址：<a href="https://tianchi.shuju.aliyun.com/competition/information.htm?spm=5176.100069.5678.2.9a1AC5&amp;raceId=231591" target="_blank" rel="noopener">IJCAI-17 口碑商家客流量预测</a></p><h2 id="提取过程"><a href="#提取过程" class="headerlink" title="提取过程"></a>提取过程</h2><p>这一节里先不考虑导入数据库，只探讨如何用pandas提取数据。</p><p>1.数据文件</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/37a27ecd-0987-42f4-a3be-0328884dec8a.png" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/d90ac373-1b23-4124-9465-891f7c952420.png" alt=""></p><p>2.提取代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提取商家数据……'</span></span><br><span class="line">    shop_info = pandas.read_csv(<span class="string">r'.\dataset\dataset\shop_info.txt'</span>,header=<span class="keyword">None</span>,names=[<span class="string">'shop_id'</span>,<span class="string">'city_name'</span>,<span class="string">'location_id'</span>,<span class="string">'per_pay'</span>,<span class="string">'score'</span>,<span class="string">'comment_cnt'</span>,<span class="string">'shop_level'</span>,<span class="string">'cate_1_name'</span>,<span class="string">'cate_2_name'</span>,<span class="string">'cate_3_name'</span>])</span><br><span class="line">    <span class="keyword">print</span> shop_info.head(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提取支付数据……'</span></span><br><span class="line">    user_pay = pandas.read_csv(<span class="string">r'.\dataset\dataset\user_pay.txt'</span>, iterator=<span class="keyword">True</span>,header=<span class="keyword">None</span>,names=[<span class="string">'user_id'</span>,<span class="string">'shop_id'</span>,<span class="string">'time_stamp'</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        df = user_pay.get_chunk(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Iteration is stopped."</span></span><br><span class="line">    <span class="keyword">print</span> df</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提取浏览数据……'</span></span><br><span class="line">    user_view = pandas.read_csv(<span class="string">r'.\dataset\dataset\user_view.txt'</span>,header=<span class="keyword">None</span>,names=[<span class="string">'user_id'</span>,<span class="string">'shop_id'</span>,<span class="string">'time_stamp'</span>])</span><br><span class="line">    <span class="keyword">print</span> user_view.head(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    Init()</span><br></pre></td></tr></table></figure></p><p>pandas.read_csv()的参数说明：  </p><p><strong>header</strong>：指定某一行为列名，默认header=0，即指定第一行的所有元素名对应为每一列的列名。若header=None，则不指定列名行。</p><p><strong>names</strong>：与header配合使用，若header=None，则可以使用该参数手动指定列名。</p><p><strong>iterator</strong>：返回一个TextFileReader 对象，以便逐块处理文件。默认值为False。</p><p>3.运行结果</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/2/4c4338f8-189e-4cce-8e17-ddc35033dc4d.png" alt=""></p><h2 id="存入数据库"><a href="#存入数据库" class="headerlink" title="存入数据库"></a>存入数据库</h2><p>上一节探讨了如何提取数据，这一节我们探讨如何将数据导入到mysql数据库中。</p><p>观察上一节提取代码，你会发现user_pay的数据提取我使用了<strong>迭代</strong>提取的办法，这是因为user_pay的csv文件有2G大小。我使用的windows 32bit python，内存有限制，无法一次性读取这么大的数据集（会提示MemoryError）。</p><p>在这一节里，我要把数据都存入数据库，所以干脆都采用了迭代的方式，迭代的过程中执行sql将数据插入表中。</p><p><strong>完整代码</strong>如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接数据库</span></span><br><span class="line">    conn= MySQLdb.connect(</span><br><span class="line">            host=<span class="string">'localhost'</span>,</span><br><span class="line">            port = <span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">'root'</span>,</span><br><span class="line">            passwd=<span class="string">'1234'</span>,</span><br><span class="line">            db =<span class="string">'tianchi_1'</span>,</span><br><span class="line">            charset = <span class="string">'utf8'</span>,       <span class="comment"># 不声明编码导入的数据会显示出错</span></span><br><span class="line">            )</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提取商家数据……'</span></span><br><span class="line">    shop_info = pandas.read_csv(<span class="string">r'.\dataset\dataset\shop_info.txt'</span>, iterator=<span class="keyword">True</span>,chunksize=<span class="number">1</span>,header=<span class="keyword">None</span>,names=[<span class="string">'shop_id'</span>,<span class="string">'city_name'</span>,<span class="string">'location_id'</span>,<span class="string">'per_pay'</span>,<span class="string">'score'</span>,<span class="string">'comment_cnt'</span>,<span class="string">'shop_level'</span>,<span class="string">'cate_1_name'</span>,<span class="string">'cate_2_name'</span>,<span class="string">'cate_3_name'</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在将数据导入到数据库……'</span></span><br><span class="line">    <span class="keyword">for</span> i,shop <span class="keyword">in</span> enumerate(shop_info):</span><br><span class="line">        <span class="comment"># 用-1或者''代替空值NAN</span></span><br><span class="line">        shop = shop.fillna(&#123;<span class="string">'cate_1_name'</span>:<span class="string">''</span>,<span class="string">'cate_2_name'</span>:<span class="string">''</span>,<span class="string">'cate_3_name'</span>:<span class="string">''</span>&#125;)      <span class="comment"># 替换字符串空值</span></span><br><span class="line">        shop = shop.fillna(<span class="number">-1</span>)      <span class="comment"># 替换整数空值</span></span><br><span class="line">        shop = shop.values[<span class="number">0</span>]   <span class="comment"># Series类型转换成列表类型</span></span><br><span class="line">        <span class="comment">#print shop</span></span><br><span class="line">        sql =<span class="string">"insert into shop_info (`shop_id`,`city_name`,`location_id`,`per_pay`,`score`,`comment_cnt`,`shop_level`,`cate_1_name`,`cate_2_name`,`cate_3_name`) values('%d','%s','%d','%d','%d','%d','%d','%s','%s','%s')"</span>\</span><br><span class="line">              %(shop[<span class="number">0</span>],shop[<span class="number">1</span>],shop[<span class="number">2</span>],shop[<span class="number">3</span>],shop[<span class="number">4</span>],shop[<span class="number">5</span>],shop[<span class="number">6</span>],shop[<span class="number">7</span>],shop[<span class="number">8</span>],shop[<span class="number">9</span>])</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%d / 2000'</span>%(i+<span class="number">1</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提取支付数据……'</span></span><br><span class="line">    user_pay = pandas.read_csv(<span class="string">r'.\dataset\dataset\user_pay.txt'</span>, iterator=<span class="keyword">True</span>,chunksize=<span class="number">1</span>,header=<span class="keyword">None</span>,names=[<span class="string">'user_id'</span>,<span class="string">'shop_id'</span>,<span class="string">'time_stamp'</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在将数据导入到数据库……'</span></span><br><span class="line">    <span class="keyword">for</span> i,user <span class="keyword">in</span> enumerate(user_pay):</span><br><span class="line">        <span class="comment"># 用-1代替空值NAN</span></span><br><span class="line">        user = user.fillna(<span class="number">-1</span>)      <span class="comment"># 替换整数空值</span></span><br><span class="line">        user = user.values[<span class="number">0</span>]   <span class="comment"># Series类型转换成列表类型</span></span><br><span class="line">        <span class="comment">#print user</span></span><br><span class="line">        sql =<span class="string">"insert into user_pay (`user_id`,`shop_id`,`time_stamp`) values('%d','%d','%s')"</span>\</span><br><span class="line">              %(user[<span class="number">0</span>],user[<span class="number">1</span>],user[<span class="number">2</span>])</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%d'</span>%(i+<span class="number">1</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在提取浏览数据……'</span></span><br><span class="line">    user_view = pandas.read_csv(<span class="string">r'.\dataset\dataset\user_view.txt'</span>, iterator=<span class="keyword">True</span>,chunksize=<span class="number">1</span>,header=<span class="keyword">None</span>,names=[<span class="string">'user_id'</span>,<span class="string">'shop_id'</span>,<span class="string">'time_stamp'</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'正在将数据导入到数据库……'</span></span><br><span class="line">    <span class="keyword">for</span> i,user <span class="keyword">in</span> enumerate(user_view):</span><br><span class="line">        <span class="comment"># 用-1代替空值NAN</span></span><br><span class="line">        user = user.fillna(<span class="number">-1</span>)      <span class="comment"># 替换整数空值</span></span><br><span class="line">        user = user.values[<span class="number">0</span>]   <span class="comment"># Series类型转换成列表类型</span></span><br><span class="line">        <span class="comment">#print user</span></span><br><span class="line">        sql =<span class="string">"insert into user_view (`user_id`,`shop_id`,`time_stamp`) values('%d','%d','%s')"</span>\</span><br><span class="line">              %(user[<span class="number">0</span>],user[<span class="number">1</span>],user[<span class="number">2</span>])</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%d'</span>%(i+<span class="number">1</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    Init()</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/datablog/p/6127000.html" target="_blank" rel="noopener">pandas.read_csv参数详解</a></p><p><a href="http://blog.csdn.net/chuanda112233/article/details/51707386" target="_blank" rel="noopener">使用Python Pandas处理亿级数</a></p><p><a href="http://www.cnblogs.com/chaosimple/p/4153083.html" target="_blank" rel="noopener">【原】十分钟搞定pandas</a></p><p><a href="http://jingyan.baidu.com/article/93f9803fe29aece0e46f55cb.html" target="_blank" rel="noopener">pandas教程：[22]填充缺失值</a></p><p><a href="http://blog.sina.com.cn/s/blog_c8bffac20102wj14.html" target="_blank" rel="noopener">pandas入门之查询和分析数据</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/355" target="_blank" rel="noopener">Pandas读取csv表格数据 &amp;&amp; 存入数据库</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django网站搭建心得汇总</title>
      <link href="/2017/02/02/Django%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%BF%83%E5%BE%97%E6%B1%87%E6%80%BB/"/>
      <url>/2017/02/02/Django%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%BF%83%E5%BE%97%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/2/ed8eb5b9-9aed-4076-bf22-783b6034bc88.jpg" alt=""></p><p>搭建该网站过程中的心得汇总。<br><a id="more"></a></p><p>网站采用Django web框架开发，完全从0开始搭建。之所以不采用wordpress，主要是嫌它有些臃肿，另一方面也是为了学习一下Django，总之各有所好吧。</p><p>一开始是一边学教程一边搭建，到后来发现我想实现的功能教程里根本没有提及，于是渐渐的开始抛开教程自己边查文档边改进。到后期基本是自己在瞎捣鼓研究，往往一个简单问题要花费半天时间才能解决，过后再回头看，发现走了不少冤枉路。不过捣鼓网站这段时间，前端和后端方面确实都有所提高。</p><p>在这里将搭建网站期间的心得做一下汇总，短的直接写在这篇博文里，长的我写在了新博文里，在这里只汇总链接。</p><h2 id="Django-markdownx-配置"><a href="#Django-markdownx-配置" class="headerlink" title="Django-markdownx 配置"></a>Django-markdownx 配置</h2><p>Django-markdownx是一款轻量级的Markdown编辑器，主要用于后台编辑文章。</p><p>以下是Django-markdownx的配置心得：</p><p><a href="http://www.yangyingming.com/article/12/" target="_blank" rel="noopener">Django-markdownx 支持gif动态图片上传</a></p><p>[Django-markdownx 修改默认渲染引擎，支持GFM的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Django-markdownx 修改预览页默认CSS样式](http://www.yangyingming.com/article/351/)</span><br><span class="line"></span><br><span class="line">## Django-admin 相关</span><br><span class="line"></span><br><span class="line">Django-admin是网站的后台应用，写文章、添加用户、添加分类/标签 等常用操作都在这里。</span><br><span class="line"></span><br><span class="line">以下是与 Django-admin 相关的心得：</span><br><span class="line"></span><br><span class="line">[Django 后台添加more标签识别（自动截取文章简介）](http://www.yangyingming.com/article/350/)</span><br><span class="line"></span><br><span class="line">[Django admin 自定义Choice_field](http://www.yangyingming.com/article/14/)</span><br><span class="line"></span><br><span class="line">## 数据库相关</span><br><span class="line"></span><br><span class="line">[博客园文章迁移脚本(xml.sax+mysqldb)](http://www.yangyingming.com/article/352/)</span><br><span class="line"></span><br><span class="line">## Nginx和uWSGI 配置</span><br><span class="line"></span><br><span class="line">Nginx是一款服务器程序，与apache相比，它更轻量和快速。</span><br><span class="line"></span><br><span class="line">uWSGI是一款符合WSGI规范的服务器程序，由于nginx无法直接和Django通信，所以需要用它来做消息中转。</span><br><span class="line"></span><br><span class="line">部署Django网站的时候nginx和uWSGI的配置是主要难点。</span><br><span class="line"></span><br><span class="line">参考自：  </span><br><span class="line">[如何理解Nginx, WSGI, Flask之间的关系](http://blog.csdn.net/lihao21/article/details/52304119)  </span><br><span class="line">[Ubuntu上通过nginx部署Django笔记 - j_hao104](http://www.cnblogs.com/jhao/p/6071790.html)  </span><br><span class="line">[通过Nginx部署Django（基于ubuntu) - 虫师](http://www.cnblogs.com/fnng/p/5268633.html)  </span><br><span class="line">[uwsgi初始配置问题 - segmentsfault](https://segmentfault.com/q/1010000002523354)  </span><br><span class="line">[如何将django项目用Nginx部署到服务器? - 知乎](https://www.zhihu.com/question/22850801)</span><br><span class="line"></span><br><span class="line">## 修改博客系统的第三方库</span><br><span class="line">部署好nginx和uWSGI后，运行博客系统就要先搭建运行环境。</span><br><span class="line"></span><br><span class="line">博客系统的运行环境由Django、markdownx、markdown-deux、markdown2等第三方库组成。</span><br><span class="line"></span><br><span class="line">在写博客系统的过程中，为了实现自己的意图，我修改了一些第三方库的源代码。</span><br><span class="line"></span><br><span class="line">为了以后方便部署，在这里记录一下我修改的地方。</span><br><span class="line"></span><br><span class="line">详情见博文：[修改博客系统的第三方库](http://www.yangyingming.com/article/360/)</span><br><span class="line"></span><br><span class="line">## uWSGI 启动/关闭/重启脚本</span><br><span class="line"></span><br><span class="line">部署Django网站的时候经常需要重启uWSGI服务，每次操作都很麻烦，于是参考别人的代码整理了一个uWSGI启动/关闭/重启的脚本。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">#!/bin/bash</span><br><span class="line">if [ ! -n &quot;$1&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;Usages: sh uwsgiserver.sh [start|stop|restart]&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $1 = start ]</span><br><span class="line">then</span><br><span class="line">    psid=`ps aux | grep &quot;uwsgi&quot; | grep -v &quot;grep&quot; | wc -l`</span><br><span class="line">    if [ $psid -gt 5 ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;uwsgi is running!&quot;</span><br><span class="line">        exit 0</span><br><span class="line">    else</span><br><span class="line">        /root/workspace/BLOG_VENV/bin/uwsgi --ini uwsgi.ini --daemonize log/uwsgi.log</span><br><span class="line">        echo &quot;Start uwsgi service [OK]&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elif [ $1 = stop ];then</span><br><span class="line">    killall -9 uwsgi</span><br><span class="line">    echo &quot;Stop uwsgi service [OK]&quot;</span><br><span class="line">elif [ $1 = restart ];then</span><br><span class="line">    killall -9 uwsgi</span><br><span class="line">    echo &quot;Stop uwsgi service [OK]&quot;</span><br><span class="line">    /root/workspace/BLOG_VENV/bin/uwsgi --ini uwsgi.ini --daemonize log/uwsgi.log</span><br><span class="line">    echo &quot;Start uwsgi service [OK]&quot;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">    echo &quot;Usages: sh uwsgiserver.sh [start|stop|restart]&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>支持uWSGI后台运行。</p><p>使用步骤：</p><ol><li><p>在项目下创建一个脚本文件 <strong>uwsgiserver.sh</strong>，将代码复制进去。</p></li><li><p>执行命令 <figure class="highlight plain"><figcaption><span>+x uwsgiserver.sh```， 添加脚本的执行权限。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 执行命令 ```./uwsgiserver.sh start```，启动uWSGI。</span><br><span class="line"></span><br><span class="line">参考自：[uwsgi启动和停止脚本](http://www.gowhich.com/blog/116)</span><br><span class="line"></span><br><span class="line">##搭建网站自动备份机制</span><br><span class="line">![](http://yangyingming.com/uploads/markdownx/2017/2/8a79aeae-cf79-4929-be3d-787f87d110ba.jpg)</span><br><span class="line"></span><br><span class="line">个人网站在云服务器上部署好了之后，为了防止数据丢失，我们往往需要定期的备份网站的数据。</span><br><span class="line"></span><br><span class="line">每次手动去备份太麻烦，我们可以使用 **Linux+Python** 搭建一个 **网站自动备份机制** 来自动化、定时的去完成备份工作。</span><br><span class="line"></span><br><span class="line">简单来说这个机制可以 **定时备份网站数据，并自动将备份文件上传到云上**。</span><br><span class="line"></span><br><span class="line">详见博文：[搭建网站自动备份机制（crontab+mysqldump+tar+oss）](http://www.yangyingming.com/article/359/)</span><br><span class="line"></span><br><span class="line">##网站CSS样式</span><br><span class="line">网站中使用的一些CSS样式：</span><br><span class="line">[网站CSS样式](http://www.yangyingming.com/article/24/)</span><br><span class="line"></span><br><span class="line">##uWSGI 优化</span><br><span class="line">###1. 开启 disable-logging，不记录请求信息的日志</span><br><span class="line"></span><br><span class="line">logging 会产生大量请求信息的日志，这是一种低效率的做法，不适合在生产环境中使用。如果不开启这项，那么你的日志中会大量出现这种记录：</span><br><span class="line">[pid: 347|app: 0|req: 106/367] 117.116.122.172 () &#123;52 vars in 961 bytes&#125; [Thu Jul  7 19:20:56 2016] POST /post =&gt; generated 65 bytes in 6 msecs (HTTP/1.1 200) 2 headers in 88 bytes (1 switches on core 0)</span><br><span class="line"></span><br><span class="line">开启方法：修改 ini 配置文件，添加一行：</span><br><span class="line">```python</span><br><span class="line">disable-logging=true</span><br></pre></td></tr></table></figure></p></li></ol><p>或者在 uWSGI 启动命令里添加 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">参考资料：</span><br><span class="line"></span><br><span class="line">[uWSGI的安装与配置（官网摘录）](http://blog.csdn.net/chenggong2dm/article/details/43937433)</span><br><span class="line"></span><br><span class="line">[python uwsgi 部署以及优化](http://www.cnblogs.com/sky20081816/p/3398864.html)</span><br><span class="line"></span><br><span class="line">[uWSGI参考资料（1.0版本的配置选项列表）](http://blog.csdn.net/kevin6216/article/details/15378617)</span><br><span class="line"></span><br><span class="line">###2. 配置 evil-reload-on-as 和 evil-reload-on-rss 自动释放内存</span><br><span class="line"></span><br><span class="line">网站运行了几个月之后发现，uwsgi 不会主动释放内存，导致开启的几个进程占用了不少内存资源。</span><br><span class="line"></span><br><span class="line">![](http://yangyingming.com/uploads/markdownx/2017/6/93a56f0c-4639-46e8-84e2-ba5c05059e6f.png)</span><br><span class="line"></span><br><span class="line">这个时候有两个办法：1.定期手动重启uwsgi  2.修改配置文件让它以后自动重启</span><br><span class="line"></span><br><span class="line">我首先手动重启了 uwsgi ，结果内存一下子释放了 500+M，爽。</span><br><span class="line"></span><br><span class="line">但是每次手动重启也不是办法，我们要想办法把一切变得自动化，于是采用第二个方法，解决方案就是：**修改配置文件，添加 evil-reload-on-as 和 evil-reload-on-rss 的设置**。</span><br><span class="line">```python</span><br><span class="line">evil-reload-on-as = 100</span><br><span class="line">evil-reload-on-rss = 100</span><br></pre></td></tr></table></figure></p><p>这两行代码的意思分别是当 <strong>虚拟内存 / 物理内存</strong> 使用超过100M时，重启对应的 uwsgi 工作进程。</p><p>as 对应虚拟内存、 rss 对应物理内存。</p><p>参考资料：</p><p><a href="http://blog.csdn.net/kevin6216/article/details/15378521" target="_blank" rel="noopener">UWSGI关于内存释放问题</a></p><p><a href="http://blog.csdn.net/kevin6216/article/details/15378617" target="_blank" rel="noopener">uWSGI参考资料（1.0版本的配置选项列表）</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/353" target="_blank" rel="noopener">Django网站搭建心得汇总</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>博客园文章迁移脚本(xml.sax+mysqldb)</title>
      <link href="/2017/01/28/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB%E8%84%9A%E6%9C%AC(xml.sax+mysqldb)/"/>
      <url>/2017/01/28/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB%E8%84%9A%E6%9C%AC(xml.sax+mysqldb)/</url>
      <content type="html"><![CDATA[<p>写博客系统的后期需要把之前的文章导入过来，我之前的文章都在博客园上，但是博客园只提供博文导入到有限的第三方博客系统中，这里面肯定不包括我自己写的博客系统，所以我需要自己写一个文章迁移程序。</p><p>好在博客园提供博文备份功能，导出的备份文件是 <strong>xml格式</strong>。  </p><p>所以文章迁移程序要完成两个步骤：  </p><ol><li>解析xml文件</li><li>执行sql导入文章<a id="more"></a></li></ol><h2 id="1-解析xml文件"><a href="#1-解析xml文件" class="headerlink" title="1.解析xml文件"></a>1.解析xml文件</h2><p>这一步需要从xml文件中解析出每一篇文章的 <strong>标题、发布时间、文章内容、作者</strong> 这些信息。</p><p>Python中常用的xml解析库有 <strong>xml.dom</strong> 和 <strong>xml.sax</strong>，他们的主要<strong>区别</strong>是xml.dom一次性读取整个文档，将解析出来的元素树保存在内存中；xml.sax则是动态解析xml文件，一边读取一边解析。相对来说，在读取大文件的时候，sax更加节省内存。在这里我选择使用 <strong>xml.sax</strong>。</p><p>xml.sax的使用方法可以看这里：<a href="http://www.cnblogs.com/hongfei/p/python-xml-sax.html" target="_blank" rel="noopener">Python：使用基于事件驱动的SAX解析XML</a></p><h2 id="2-执行sql导入文章"><a href="#2-执行sql导入文章" class="headerlink" title="2.执行sql导入文章"></a>2.执行sql导入文章</h2><p>这一步很简单，Python中操作mysql数据库的教程很多，随便搜一篇就可以了。</p><p>连接数据库方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line">conn= MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port = <span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'your_username'</span>,</span><br><span class="line">        passwd=<span class="string">'your_password'</span>,</span><br><span class="line">        db =<span class="string">'blog'</span>,</span><br><span class="line">        charset = <span class="string">'utf8'</span>,       <span class="comment"># 不声明编码导入的数据会显示出错</span></span><br><span class="line">        )</span><br><span class="line">cur = conn.cursor()</span><br></pre></td></tr></table></figure></p><p>导入数据库部分代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql =<span class="string">"insert into blog_article (`title`,`desc`,`content`,`click_count`,`is_recommend`,`date_publish`,`category_id`,`user_id`,`comment_cnt`) values('%s','%s','%s','%d','%d','%s','%d','%d','%d')"</span>%(MySQLdb.escape_string(self.title.encode(<span class="string">'utf8'</span>)),MySQLdb.escape_string(self.title.encode(<span class="string">'utf8'</span>)),MySQLdb.escape_string(self.description.encode(<span class="string">'utf8'</span>)),<span class="number">0</span>,<span class="number">0</span>,str(pubDate),<span class="number">11</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(sql)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure></p><h2 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/1/aa0dd621-b524-4fc0-9b29-6955252a0603.png" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面是文章迁移程序的全部代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.sax</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">conn= MySQLdb.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port = <span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'your_username'</span>,</span><br><span class="line">        passwd=<span class="string">'your_password'</span>,</span><br><span class="line">        db =<span class="string">'blog'</span>,</span><br><span class="line">        charset = <span class="string">'utf8'</span>,       <span class="comment"># 不声明编码导入的数据会显示出错</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'正在连接数据库……'</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieHandler</span><span class="params">(xml.sax.ContentHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cnt = <span class="number">1</span></span><br><span class="line">        self.CurrentData = <span class="string">""</span></span><br><span class="line">        self.title = <span class="string">""</span></span><br><span class="line">        self.link = <span class="string">""</span></span><br><span class="line">        self.creator = <span class="string">""</span></span><br><span class="line">        self.author = <span class="string">""</span></span><br><span class="line">        self.pubDate = <span class="string">""</span></span><br><span class="line">        self.guid = <span class="string">""</span></span><br><span class="line">        self.description = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 元素开始事件处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startElement</span><span class="params">(self, tag, attributes)</span>:</span></span><br><span class="line">        self.CurrentData = tag</span><br><span class="line">        <span class="keyword">if</span> tag == <span class="string">"item"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"*****Article*****"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 元素结束事件处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">endElement</span><span class="params">(self, tag)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.CurrentData == <span class="string">"title"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Title:"</span>, self.title</span><br><span class="line">            self.CurrentData = <span class="string">""</span></span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"link"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Link:"</span>, self.link</span><br><span class="line">            self.CurrentData = <span class="string">""</span></span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"dc:creator"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Dc:creator:"</span>, self.creator</span><br><span class="line">            self.CurrentData = <span class="string">""</span></span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"author"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Author:"</span>, self.author</span><br><span class="line">            self.CurrentData = <span class="string">""</span></span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"pubDate"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"PubDate:"</span>, self.pubDate</span><br><span class="line">            self.CurrentData = <span class="string">""</span></span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"guid"</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Guid:"</span>, self.guid</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"description"</span>:</span><br><span class="line">            <span class="comment"># 文章末尾</span></span><br><span class="line">            <span class="comment"># print "Description:", self.description</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 文章描述不为空</span></span><br><span class="line">            <span class="keyword">if</span> len(self.description)!=<span class="number">0</span>:</span><br><span class="line">                pubDate = datetime.datetime.strptime(self.pubDate, <span class="string">"%a, %d %b %Y %X %Z"</span>)</span><br><span class="line">                sql =<span class="string">"insert into blog_article (`title`,`desc`,`content`,`click_count`,`is_recommend`,`date_publish`,`category_id`,`user_id`,`comment_cnt`) values('%s','%s','%s','%d','%d','%s','%d','%d','%d')"</span>%(MySQLdb.escape_string(self.title.encode(<span class="string">'utf8'</span>)),MySQLdb.escape_string(self.title.encode(<span class="string">'utf8'</span>)),MySQLdb.escape_string(self.description.encode(<span class="string">'utf8'</span>)),<span class="number">0</span>,<span class="number">0</span>,str(pubDate),<span class="number">11</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">                cur.execute(sql)</span><br><span class="line">                conn.commit()</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[%d] %s 导入数据库成功'</span>%(self.cnt,self.title.encode(<span class="string">'utf8'</span>))</span><br><span class="line">                self.cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            self.description = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 内容事件处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">characters</span><span class="params">(self, content)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.CurrentData == <span class="string">"title"</span>:</span><br><span class="line">            self.title = content</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"link"</span>:</span><br><span class="line">            self.link = content</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"dc:creator"</span>:</span><br><span class="line">            self.creator = content</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"author"</span>:</span><br><span class="line">            self.author = content</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"pubDate"</span>:</span><br><span class="line">            self.pubDate = content</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"guid"</span>:</span><br><span class="line">            self.guid = content</span><br><span class="line">        <span class="keyword">elif</span> self.CurrentData == <span class="string">"description"</span>:</span><br><span class="line">            self.description += content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__name__ == <span class="string">"__main__"</span>):</span><br><span class="line">    <span class="comment"># 创建一个 XMLReader</span></span><br><span class="line">    parser = xml.sax.make_parser()</span><br><span class="line">    <span class="comment"># turn off namepsaces</span></span><br><span class="line">    parser.setFeature(xml.sax.handler.feature_namespaces, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 ContextHandler</span></span><br><span class="line">    Handler = MovieHandler()</span><br><span class="line">    parser.setContentHandler(Handler)</span><br><span class="line"></span><br><span class="line">    parser.parse(<span class="string">"note.xml"</span>)</span><br><span class="line">    </span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/352" target="_blank" rel="noopener">博客园文章迁移脚本(xml.sax+mysqldb)</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django-markdownx 修改预览页默认CSS样式</title>
      <link href="/2017/01/24/Django-markdownx%20%E4%BF%AE%E6%94%B9%E9%A2%84%E8%A7%88%E9%A1%B5%E9%BB%98%E8%AE%A4CSS%E6%A0%B7%E5%BC%8F/"/>
      <url>/2017/01/24/Django-markdownx%20%E4%BF%AE%E6%94%B9%E9%A2%84%E8%A7%88%E9%A1%B5%E9%BB%98%E8%AE%A4CSS%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>在使用django-markdownx的过程中，存在不少问题，比如说这次要讨论的问题：<strong>预览页面显示样式和文章发布出去的显示样式不同。</strong>   </p><p>导致这个问题的原因很简单：因为 <strong>后台使用的css和前台使用的css不同</strong>。</p><p>在这里我只打算修改后台markdownx预览页的显示样式，让它显示效果和前台的显示效果相同。<br><a id="more"></a></p><p>要达到这个效果，需要完成两个步骤：</p><h3 id="修改markdownx的css样式表"><a href="#修改markdownx的css样式表" class="headerlink" title="修改markdownx的css样式表"></a>修改markdownx的css样式表</h3><p>django-markdownx的css样式表是<strong>markdownx.css</strong>。</p><p>我的markdownx.css路径是：<strong>D:\workspace\github\MingBlog\blog_venv\Lib\site-packages\markdownx\static\markdownx\admin\css\markdownx.css</strong>（我使用了virtualenv，所以有一段blog_venv路径）</p><p>你可以找找你的所在路径，一般在python的site-packages目录下。</p><p>找到markdownx.css文件后，在文件最后添加如下代码（注意一定是在文件最后，否则不生效）：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自定义css */</span></span><br><span class="line"><span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line"><span class="attribute">font-family</span>: Merriweather, 冬青黑体简体中文, <span class="string">"Microsoft YaHei"</span>, 微软雅黑, SimSun, 宋体, Heiti, 黑体, droid_sansregular, arial, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: none repeat scroll <span class="number">0%</span> <span class="number">0%</span> <span class="number">#2B6695</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#5F5A4B</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">6px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(10, 10, 0, 0.5);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>,<span class="string">"宋体"</span>,<span class="string">"黑体"</span>,Arial;</span><br><span class="line">    <span class="comment">/*font-family: "Palatino Linotype", Palatino, Georgia, serif;*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> <span class="selector-tag">pre</span>&#123; <span class="attribute">background</span>: <span class="number">#272822</span>; <span class="attribute">color</span>: <span class="number">#f8f8f2</span> &#125;</span><br><span class="line"><span class="selector-class">.markdownx</span> <span class="selector-class">.markdownx-preview</span> <span class="selector-tag">code</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Palatino Linotype"</span>, Palatino, Georgia, serif;</span><br><span class="line">    <span class="comment">/*font-size: 16px!important;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改过后，二级标题和字体产生了变化。</p><h3 id="接下来在admin中添加代码高亮css文件"><a href="#接下来在admin中添加代码高亮css文件" class="headerlink" title="接下来在admin中添加代码高亮css文件"></a>接下来在admin中添加代码高亮css文件</h3><p>markdownx.css是自动加载的，无需手动添加，但是用pygments生成的代码高亮css文件需要我们手动添加。</p><p>具体方法是：<br>修改 [yourapp]\admin.py 中的文章管理类，在内部类Media中添加css样式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    ……</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Media</span>:</span></span><br><span class="line">        css = &#123;</span><br><span class="line">            <span class="string">'all'</span>:(<span class="string">'/static/css/code.css'</span>,),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>详情可见官方文档：<a href="https://docs.djangoproject.com/en/1.8/topics/forms/media/#css" target="_blank" rel="noopener">admin media css</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/351" target="_blank" rel="noopener">Django-markdownx 修改预览页默认CSS样式</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django 后台添加more标签识别（自动截取文章简介）</title>
      <link href="/2017/01/24/Django%20%E5%90%8E%E5%8F%B0%E6%B7%BB%E5%8A%A0more%E6%A0%87%E7%AD%BE%E8%AF%86%E5%88%AB%EF%BC%88%E8%87%AA%E5%8A%A8%E6%88%AA%E5%8F%96%E6%96%87%E7%AB%A0%E7%AE%80%E4%BB%8B%EF%BC%89/"/>
      <url>/2017/01/24/Django%20%E5%90%8E%E5%8F%B0%E6%B7%BB%E5%8A%A0more%E6%A0%87%E7%AD%BE%E8%AF%86%E5%88%AB%EF%BC%88%E8%87%AA%E5%8A%A8%E6%88%AA%E5%8F%96%E6%96%87%E7%AB%A0%E7%AE%80%E4%BB%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>文章发布时，后台有 <strong>文章内容</strong> 和 <strong>文章描述</strong> 两个栏目需要填写，<strong>文章描述</strong> 其实就是文章简介/摘录，用于显示在首页文章列表中。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/1/81909711-ca65-4b60-970a-522e44e57935.png" alt=""></p><p>一开始我在填写这两个栏目时候的做法是，先写文章，然后从文章内容中截取一部分放到文章描述中，另一种做法就是直接将文章标题当做文章描述。</p><p>这样很麻烦，于是我想做一个<strong>“识别more标签”</strong>的功能，即在后台编辑文章时，在合适的地方插入 <strong>–more–</strong>，点击发布的时候后台会自动将more标签之前的内容截取出来作为文章描述。<br><a id="more"></a></p><p>要达成这个效果，我们需要 <strong>修改 ArticleModel 类中的 save() 方法</strong>。save()方法是在后台编辑完成后，点击“保存”之后调用的方法。我们可以在这里自定义一些工作。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>[yourblog]\models.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 保存之前先处理一下desc文章描述内容</span></span><br><span class="line">    more = self.content.find(<span class="string">"--more--"</span>)</span><br><span class="line">    <span class="keyword">if</span> more==<span class="number">-1</span>:   <span class="comment"># 没找到more标签</span></span><br><span class="line">        <span class="comment"># 让它等于标题</span></span><br><span class="line">        <span class="keyword">if</span> self.desc==<span class="string">''</span>:      <span class="comment"># desc为空</span></span><br><span class="line">            self.desc = self.title</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># 找到more标签</span></span><br><span class="line">        self.desc = self.content[:more]</span><br><span class="line">        self.content = <span class="string">''</span>.join(self.content.split(settings.MORE_TAG))</span><br><span class="line">    super(Article, self).save()</span><br></pre></td></tr></table></figure></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/350" target="_blank" rel="noopener">Django 后台添加more标签识别（自动截取文章简介）</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django-markdownx 修改默认渲染引擎，支持GFM的```代码块识别</title>
      <link href="/2017/01/24/Django-markdownx%20%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%EF%BC%8C%E6%94%AF%E6%8C%81GFM%E7%9A%84%60%60%60%E4%BB%A3%E7%A0%81%E5%9D%97%E8%AF%86%E5%88%AB/"/>
      <url>/2017/01/24/Django-markdownx%20%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%EF%BC%8C%E6%94%AF%E6%8C%81GFM%E7%9A%84%60%60%60%E4%BB%A3%E7%A0%81%E5%9D%97%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/1/1f06aefc-a742-4e71-94c6-ffbc0954629f.jpg" alt=""></p><p><a href="https://github.com/adi-/django-markdownx" target="_blank" rel="noopener">Django-markdownx</a> 是一款django的插件，它用于markdown文档的编写，简单来说，它是一款网页端的markdown编辑器。  </p><p>Markdownx用起来虽然不错，但是他在一些方面还是有些限制，比如说我想让他支持**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!---more---&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 为什么这么说呢？  </span><br><span class="line">因为markdown编辑器的预览效果是使用[python-markdown](https://github.com/waylan/Python-Markdown)来渲染的，而python-markdown默认支持标准的markdown语法，标准语法里代码块需要每行前空4个空格才能识别。  </span><br><span class="line">这可要费老劲了，你想想，每次要编辑代码块的时候，需要首先在本地编辑器上选中，手动按下tab，然后复制到markdownx上，反人类。  </span><br><span class="line"></span><br><span class="line">于是我选择 [python-markdown2](https://github.com/trentm/python-markdown2) ，它是python-markdown的升级版，支持GFM式（GFM 是 Github 拓展的基于 Markdown 的一种纯文本的书写格式）的markdown书写格式。允许我使用**```**包裹代码块。</span><br><span class="line"></span><br><span class="line">## 那么如何修改django-markdownx的默认渲染引擎呢？</span><br><span class="line"></span><br><span class="line">下面就要修改代码了，我们需要直接修改django-markdownx的源代码。  </span><br><span class="line"></span><br><span class="line">1. 首先你要安装 [python-markdown2](https://github.com/trentm/python-markdown2) ，你可以用pip安装，也可以在django中第三方库管理中点“+”安装，这里不赘述。</span><br><span class="line"></span><br><span class="line">2. 找到你的django-markdownx安装位置中的**utils.py**文件，我的文件路径是 **D:\workspace\github\MingBlog\blog_venv\Lib\site-packages\markdownx\utils.py** （我在virtualenv虚拟环境中安装的）</span><br><span class="line"></span><br><span class="line">3. 编辑utils.py，修改**markdownify**函数，添加第三方库。  </span><br><span class="line">原来是这样的：  </span><br><span class="line">```python</span><br><span class="line">import markdown</span><br><span class="line">from PIL import Image</span><br><span class="line">from .settings import MARKDOWNX_MARKDOWN_EXTENSIONS, MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line"></span><br><span class="line">def markdownify(content):</span><br><span class="line">    return markdown.markdown(</span><br><span class="line">                        content,</span><br><span class="line">                        extensions=MARKDOWNX_MARKDOWN_EXTENSIONS,</span><br><span class="line">                        extension_configs=MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><p>修改成这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> markdown2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> .settings <span class="keyword">import</span> MARKDOWNX_MARKDOWN_EXTENSIONS, MARKDOWNX_MARKDOWN_EXTENSION_CONFIGS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">markdownify</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> markdown2.markdown(</span><br><span class="line">        content,extras=MARKDOWNX_MARKDOWN_EXTENSIONS</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><p>ok，大功告成，去markdownx中看看是不是可以识别<code>`</code>代码块了呢？</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/349" target="_blank" rel="noopener">Django-markdownx 修改默认渲染引擎，支持GFM的<code>`</code>代码块识别</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django-markdownx 支持gif动态图片上传</title>
      <link href="/2017/01/21/Django-markdownx%20%E6%94%AF%E6%8C%81gif%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2017/01/21/Django-markdownx%20%E6%94%AF%E6%8C%81gif%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<p>Django-markdownx 是一款轻量级的<strong>Markdown编辑器</strong>，可作为app在django中使用。</p><p>我将它安装在了ad<br><a id="more"></a><br>min后台，用于写文章。</p><p>下图是它的使用预览：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/1/dcfcb736-b943-4c53-9b6f-b650b57e5079.gif" alt=""></p><p>它的界面十分简洁，没有工具栏，支持markdown基本语法，同时支持图片拖拽上传。</p><p>但是我在上传图片的时候发现一个问题，那就是 <strong>无法上传gif动态图片</strong>。</p><p>其实markdownx默认是不支持gif图片格式的，但在设置里加上“image/gif”可以支持上传gif图片。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/1/9dad491c-8a6c-459e-83dd-805505763f97.png" alt=""></p><p>不过这种办法上传的图片会变成静态图片。</p><p>我查看了markdownx的源代码，发现上传的gif图片变成了静态的原因是上传的时候会对图片进行压缩，结果破坏了gif文件的结构。</p><h2 id="这里有一个简单粗暴的解决办法："><a href="#这里有一个简单粗暴的解决办法：" class="headerlink" title="这里有一个简单粗暴的解决办法："></a>这里有一个简单粗暴的解决办法：</h2><p>1、在settings.py中的MARKDOWNX_UPLOAD_CONTENT_TYPES变量里加上“image/gif”支持。</p><p>2、修改你的项目安装环境的 <strong>\Lib\site-packages\markdownx\forms.py</strong> 文件中的<strong>save()</strong>函数，将：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> content_type.lower() != self._SVG_TYPE:</span><br><span class="line">       <span class="comment"># Processing the raster graphic image:</span></span><br><span class="line">       image = self._process_raster(image, image_extension)</span><br><span class="line">       image_size = image.tell()</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> content_type.lower() != self._SVG_TYPE <span class="keyword">and</span> content_type.lower() != <span class="string">'image/gif'</span>:</span><br><span class="line">       <span class="comment"># Processing the raster graphic image:</span></span><br><span class="line">       image = self._process_raster(image, image_extension)</span><br><span class="line">       image_size = image.tell()</span><br></pre></td></tr></table></figure><p>即，<strong>不对gif文件进行压缩</strong>。</p><h2 id="另外一个解决办法是进行正确的gif压缩处理"><a href="#另外一个解决办法是进行正确的gif压缩处理" class="headerlink" title="另外一个解决办法是进行正确的gif压缩处理"></a>另外一个解决办法是进行正确的gif压缩处理</h2><p>没有细研究这个方法。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/12" target="_blank" rel="noopener">Django-markdownx 支持gif动态图片上传</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>新浪云SAE搭建python环境 问题拾遗</title>
      <link href="/2017/01/02/%E6%96%B0%E6%B5%AA%E4%BA%91SAE%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83%20%E9%97%AE%E9%A2%98%E6%8B%BE%E9%81%97/"/>
      <url>/2017/01/02/%E6%96%B0%E6%B5%AA%E4%BA%91SAE%E6%90%AD%E5%BB%BApython%E7%8E%AF%E5%A2%83%20%E9%97%AE%E9%A2%98%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<p><strong><span style="font-size: 16px;">1、python程序部署到sae上需要做的改动</span></strong></p><br><p><span style="font-size: 16px;">在线上需要转换成wsgi的形式运行python程序。</span></p><br><p><span style="font-size: 16px;">sae中运行python程序需要指定一个函数为入口函数。</span></p><br><div class="cnblogs_code"><br><pre><span style="font-size: 16px;">application = sae.create_wsgi_app(main)</span></pre><br></div><br><p><span style="font-size: 16px;">main函数是你定义的入口函数，在这里面你可以调用你定义的其它函数。</span></p><br><p><span style="font-size: 16px;">sae.create_wsgi_app(main) 创建main为入口函数，将入口地址返回给application。</span></p><br><p><span style="font-size: 16px;">运行这个程序的时候sae会直接找到application，运行这个python程序。</span></p><br><p><span style="font-size: 16px;">另外入口函数（main）必须要有两个参数：environ 和 start_response</span></p><br><p><span style="font-size: 16px;">所以你的入口函数要这样写：</span></p><br><div class="cnblogs_code"><br><pre><span style="font-size: 16px;"><span style="color: #008080;">1</span> <span style="color: #0000ff;">def</span><span style="color: #000000;"> main(environ,start_response):<br></span><span style="color: #008080;">2</span>     status = <span style="color: #800000;">‘</span><span style="color: #800000;">200 OK</span><span style="color: #800000;">‘</span><br><span style="color: #008080;">3</span>     response_headers = [(<span style="color: #800000;">‘</span><span style="color: #800000;">Content-type</span><span style="color: #800000;">‘</span>,<span style="color: #800000;">‘</span><span style="color: #800000;">text/plain</span><span style="color: #800000;">‘</span><span style="color: #000000;">)]<br></span><span style="color: #008080;">4</span>     write =<span style="color: #000000;"> start_response(status,response_headers)<br></span><span style="color: #008080;">5</span><br><span style="color: #008080;">6</span>     <span style="color: #0000ff;">return</span> [<span style="color: #800000;">‘</span><span style="color: #800000;">Hello world</span><span style="color: #800000;">‘</span>]</span></pre><br></div><br><p><span style="font-size: 16px;">这里面定义了一个返回的包，status为状态码，200表示成功，response_headers为包的头部，return返回body的内容，组合起来就是一个完整的包。</span></p><br><p><span style="font-size: 16px;">sae中运行python程序基本就要做这些改变，你的其它程序可以在main函数的基础上扩充。另外还有sae不支持一些第三方库的问题，这一节不赘述了。</span></p><br><p><span style="font-size: 16px;">关于程序的设置详见官方文档：<a href="http://www.sinacloud.com/doc/sae/python/runtime.html#qing-qiu-chu-li" target="_blank">请求处理</a></span></p><br><p><span style="font-size: 16px;">&nbsp;</span></p><br><p><strong><span style="font-size: 16px;">2、sae git 提交记住用户名、密码</span></strong></p><br><p><span style="font-size: 16px;">详见：<a href="http://blog.csdn.net/izayl/article/details/49856185" target="_blank">使用GitBash记住在新浪Sae上Git仓库的帐号密码，以后再也不用输帐号密码啦！</a></span></p><br><p><span style="font-size: 16px;">&nbsp;</span></p><br><p><strong><span style="font-size: 16px;">3、运行 git 脚本</span></strong></p><br><p><span style="font-size: 16px; line-height: 24px;">调试的时候每次重复输入几条命令比较麻烦？试试将所有命令写成一个小脚本来运行！</span></p><br><p><span style="font-size: 16px; line-height: 24px;">使用方法：</span></p><br><div class="cnblogs_code"><br><pre><span style="font-size: 16px;">git config –<span style="color: #0000ff;">global</span> alias.push1 <span style="color: #800000;">‘</span><span style="color: #800000;">!git add . &amp;&amp; git commit -m “update” &amp;&amp; git push sae master:1</span><span style="color: #800000;">‘</span></span></pre><br></div><br><p><span style="font-size: 16px;">git控制台中直接运行：</span></p><br><div class="cnblogs_code"><br><pre><span style="font-size: 16px;">git push1</span></pre><br></div><br><p><span style="font-size: 16px;">就可以运行这个脚本啦！</span></p><br><p><span style="font-size: 16px;">参考自：<a href="https://segmentfault.com/q/1010000000263597" target="_blank">Git批处理脚本</a></span></p><br><p>&nbsp;</p><br><p><strong><span style="font-size: 16px;">4、wsgi处理get请求</span></strong></p><br><p><span style="font-size: 16px;">参考自：<a href="http://blog.csdn.net/shanzhizi/article/details/46596921" target="_blank">web python – WSGI接口GET请求</a></span></p><br><p><span style="font-size: 16px;"><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832689740b04430a98f614b6da89da2157ea3efe2000" target="_blank">&nbsp;WSGI接口</a>&nbsp;&lt;==处理url路径问题</span></p><br><p>&nbsp;</p><br><p><span style="font-size: 16px;"><strong>Freecode# :&nbsp;<a title="www.cnblogs.com/yym2013" href="http://www.cnblogs.com/yym2013" target="_blank" rel="noopener">www.cnblogs.com/yym2013</a></strong></span></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/16" target="_blank" rel="noopener">新浪云SAE搭建python环境 问题拾遗<br><a id="more"></a></a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Python 学习拾遗</title>
      <link href="/2017/01/02/Python%20%E5%AD%A6%E4%B9%A0%E6%8B%BE%E9%81%97/"/>
      <url>/2017/01/02/Python%20%E5%AD%A6%E4%B9%A0%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/342bab42-efac-4798-9117-11d26ea4b649.png" alt=""></p><p>该博文主要适应于python2.7，并没有对py3进行测试。</p><p>主要记录学习python过程中容易出现的一些小问题、小错误，相信能给你启发。<br><a id="more"></a></p><p>##1、剔除一个字符串中的所有空格（假设该字符串是s）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>.join(s.split())</span><br></pre></td></tr></table></figure><p>样例输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'    123  4567    8   '</span></span><br></pre></td></tr></table></figure><p>样例输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'12345678'</span></span><br></pre></td></tr></table></figure><p>##2、剔除文件名字符串中的非法字符（假设字符串是s）</p><p>有的时候从网上抓取下来的标题需要作为文件名保存到本地（windows环境）</p><p>但是windows下文件名中不能包含一些非法字符，例如‘/’、‘\’、‘?’ 神马的</p><p>你可以用下面这段代码剔除标题中的非法字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r'[/\:*?"&lt;&gt;|]'</span>)</span><br><span class="line">s = re.sub(pattern,<span class="string">''</span>,s)</span><br></pre></td></tr></table></figure><p>样例输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'&lt;&lt;?I am title?&gt;&gt;'</span></span><br></pre></td></tr></table></figure><p>样例输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I am title'</span></span><br></pre></td></tr></table></figure><p>##3、列表解析、base64解密、chr()、int()、join()函数使用</p><p>这是知道创宇的余弦出的一个解密小游戏，给你一个字符串，你需要解密出一个邮箱地址。</p><p><strong>密码字符串</strong> 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">解密方式为先用base64解密，再进行16进制转换，最后按ASCII码输出每个字符。</span><br><span class="line"></span><br><span class="line">这个小游戏很有意思，可以学习到一些python知识。</span><br><span class="line"></span><br><span class="line">下面是 **解题步骤**：</span><br><span class="line"></span><br><span class="line">1.base64解密  </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">s = &apos;XDY1XDc2XDY5XDZjXDYzXDZmXDczXDQwXDY3XDZkXDYxXDY5XDZjXDJlXDYzXDZmXDZk&apos;</span><br><span class="line">print base64.b64decode(s)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">65</span>\<span class="number">76</span>\<span class="number">69</span>\<span class="number">6</span>c\<span class="number">63</span>\<span class="number">6</span>f\<span class="number">73</span>\<span class="number">40</span>\<span class="number">67</span>\<span class="number">6</span>d\<span class="number">61</span>\<span class="number">69</span>\<span class="number">6</span>c\<span class="number">2</span>e\<span class="number">63</span>\<span class="number">6</span>f\<span class="number">6</span>d</span><br></pre></td></tr></table></figure><p>这一看就是一种字符编码，最先猜到是ASCII编码。</p><p>为了方便观察，将其拆分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> base64.b64decode(s).split(<span class="string">'\\'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">''</span>, <span class="string">'65'</span>, <span class="string">'76'</span>, <span class="string">'69'</span>, <span class="string">'6c'</span>, <span class="string">'63'</span>, <span class="string">'6f'</span>, <span class="string">'73'</span>, <span class="string">'40'</span>, <span class="string">'67'</span>, <span class="string">'6d'</span>, <span class="string">'61'</span>, <span class="string">'69'</span>, <span class="string">'6c'</span>, <span class="string">'2e'</span>, <span class="string">'63'</span>, <span class="string">'6f'</span>, <span class="string">'6d'</span>]</span><br></pre></td></tr></table></figure><p>由于每个元素带有字母，猜测是16进制数，转换进制。</p><p>int(c,16) 可以将字符串c当成16进制数，将其转换成10进制数返回（注意返回的是一个整数）</p><p>chr(n)     可以将一个整数n转换成对应的ASCII字符。</p><p>于是有代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> base64.b64decode(s).split(<span class="string">'\\'</span>):</span><br><span class="line">　　<span class="keyword">if</span> c:　　　<span class="comment"># 剔除空元素</span></span><br><span class="line">　　　　<span class="keyword">print</span> chr(int(c,<span class="number">16</span>)),</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e v i l c o s @ g m a i l . c o m</span><br></pre></td></tr></table></figure><p>以上代码可以用 列表解析 简洁表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> [chr(int(c,<span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> base64.b64decode(s).split(<span class="string">'\\'</span>) <span class="keyword">if</span> c]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'e'</span>, <span class="string">'v'</span>, <span class="string">'i'</span>, <span class="string">'l'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'s'</span>, <span class="string">'@'</span>, <span class="string">'g'</span>, <span class="string">'m'</span>, <span class="string">'a'</span>, <span class="string">'i'</span>, <span class="string">'l'</span>, <span class="string">'.'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>]</span><br></pre></td></tr></table></figure><p>2.join()连接为字符串</p><p>s.join(l)  表示将列表l中每个字符连接成一个字符串，用字符串s作为间隔</p><p>so，可以将上述列表连接成字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(int(c,<span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> base64.b64decode(s).split(<span class="string">'\\'</span>) <span class="keyword">if</span> c])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evilcos@gmail.com</span><br></pre></td></tr></table></figure><p>以上，就得到余弦大大的邮箱咯，是不是很有意思？</p><p>##4.理解python继承的小例子</p><p>复制代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#coding=gbk</span></span><br><span class="line"> <span class="number">2</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line"> <span class="number">3</span>     name = <span class="string">'boss'</span></span><br><span class="line"> <span class="number">4</span>     <span class="keyword">print</span> name</span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name=None)</span>:</span></span><br><span class="line"> <span class="number">6</span>         <span class="keyword">print</span> <span class="string">'2'</span></span><br><span class="line"> <span class="number">7</span>         <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line"> <span class="number">8</span>             self.name = name</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">print</span> self.name</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="number">13</span>     <span class="keyword">print</span> <span class="string">'1'</span></span><br><span class="line"><span class="number">14</span>     name = <span class="string">'Boss'</span></span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> te = B()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boss</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Boss</span><br></pre></td></tr></table></figure><p>可以看出类中变量和函数的继承调用关系。</p><p>实例化B，先是运行从A继承来的语句，运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boss</span><br></pre></td></tr></table></figure><p>再运行B中的语句，运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>最后调用从A继承过来的构造函数<strong>init</strong>()，运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line">Boss</span><br></pre></td></tr></table></figure><p>##5.python列表解析中的双重循环</p><p>如何将B列表中的每一个元素与A列表中的元素相加，生成一个新列表？</p><p>请看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">2</span> B = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="number">3</span> <span class="keyword">print</span> [x+y <span class="keyword">for</span> x <span class="keyword">in</span> A <span class="keyword">for</span> y <span class="keyword">in</span> B]</span><br></pre></td></tr></table></figure><p>以上列表解析的写法相当于一个双重循环，先遍历B中每一个元素，再遍历A中每一个元素，每轮循环进行元素相加操作，最后得到一个新列表。</p><p>##6.max()的比较函数</p><p>max()函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(arg1, arg2, *args[, key])</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">#coding=gbk</span></span><br><span class="line"><span class="number">2</span> A = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="keyword">print</span> max(A)        　　　　　　　　<span class="comment">#  输出A中最大的元素</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">print</span> max(A,key=<span class="keyword">lambda</span> x:x&gt;<span class="number">2</span>)    <span class="comment"># 输出A中第一个大于2的元素</span></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> <span class="keyword">print</span> max(<span class="string">'af'</span>, <span class="string">'be'</span>,<span class="string">'cd'</span>)       <span class="comment"># 输出最大的字符串，比较规则为默认的字符串比较规则</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">print</span> max(<span class="string">'af'</span>, <span class="string">'be'</span>,<span class="string">'cd'</span>, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])  <span class="comment"># 输出第二个字符最大的字符串</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">cd</span><br><span class="line">af</span><br></pre></td></tr></table></figure><p>key参数值为一个函数入口指针，你可以将自己定义的函数作为参数传进来，max函数将根据你定义的函数来进行比较，你可以自己制订比较规则。</p><p>lambda为python中一种定义函数（匿名函数）的方法，你也可以用def定义。</p><p>##7.reverse()函数有返回值吗？</p><p>请看以下代码，猜猜它会输出什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">2</span> <span class="keyword">print</span> A.reverse()</span><br></pre></td></tr></table></figure><p>是不是第一眼以为会输出 [3,2,1] ？哈哈，错了。真正的输出是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>看一下reverse()的语法：</p><blockquote><p>list.reverse()<br>参数：NA<br>返回值：该方法没有返回值，但是会对列表的元素进行反向排序。  </p></blockquote><p>##8.提取url中的host（域名）</p><p>使用urllib库提供的函数，用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> urllib  </span><br><span class="line"> <span class="number">2</span>   </span><br><span class="line"> <span class="number">3</span> protocol, rest = urllib.splittype(<span class="string">'https://www.cnblogs.com:80/yym2013'</span>)  </span><br><span class="line"> <span class="number">4</span> <span class="comment"># protocol : https</span></span><br><span class="line"> <span class="number">5</span> <span class="comment"># rest     : //www.cnblogs.com:80/yym2013</span></span><br><span class="line"> <span class="number">6</span>   </span><br><span class="line"> <span class="number">7</span> host, rest =  urllib.splithost(rest)  </span><br><span class="line"> <span class="number">8</span> <span class="comment"># host : www.cnblogs.com:80</span></span><br><span class="line"> <span class="number">9</span> <span class="comment"># rest : /yym2013</span></span><br><span class="line"><span class="number">10</span>   </span><br><span class="line"><span class="number">11</span> host, port = urllib.splitport(host)  </span><br><span class="line"><span class="number">12</span> <span class="comment"># host : www.cnblogs.com</span></span><br><span class="line"><span class="number">13</span> <span class="comment"># port : 80</span></span><br></pre></td></tr></table></figure><p>参考自： <a href="http://blog.csdn.net/cugb1004101218/article/details/46501461" target="_blank" rel="noopener">python 获取url的host</a></p><p>##9.if-else 单行书写方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    t = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    t = b</span><br></pre></td></tr></table></figure><p>转换成if-else单行形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = a <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>##10.open的文件打开模式</p><blockquote><p>r或rt 默认模式，文本模式读<br>rb   二进制文件<br>w或wt 文本模式写，打开前文件存储被清空<br>wb  二进制写，文件存储同样被清空<br>a  追加模式，只能写在文件末尾<br>a+ 可读写模式，写只能写在文件末尾<br>w+ 可读写，与a+的区别是要清空文件内容<br>r+ 可读写，与a+的区别是可以写到文件任何位置  </p></blockquote><p>特别注意：a+、w+、r+的区别，他们虽然都是读写模式，但使用效果是有差别的。</p><p>参考自：<a href="http://www.jb51.net/article/58002.htm" target="_blank" rel="noopener">Python open()文件处理使用介绍</a></p><p>##11.关于文件读写错误 IOError: [Errno 0] Error</p><p>　　该错误通常在windows环境下，使用a+读写模式打开文件，并对其先进行read()读操作，然后进行write()写入操作后出现的。原因是没有进行flush或者seek等操作，python不知道文件位置在哪了。</p><p>参考自：<a href="http://www.cnblogs.com/freeDynasty/p/3712949.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">python IOError: [Errno 0] Error - freeDynasty</a></p><p>##12、使用python发送邮件</p><p>使用python发送邮件需要使用smtplib和email两个模块。</p><p>首先需要在你的邮箱中开启smtp服务，并获得相应的<strong>授权码</strong>（网易邮箱貌似不需要）</p><p>然后按教程将你的用户名和授权码<strong>配置</strong>好，这部分代码是死的，具有通用性，这里不赘述。</p><p>最后准备好 <strong>发送邮箱</strong> 和 <strong>发送内容</strong>，调用smtp.sendmail()发送即可。</p><p>具体配置可参考：<a href="http://www.cnblogs.com/leetao94/p/5460520.html" target="_blank" rel="noopener">使用python发送邮件</a></p><p>##13、python的编号迭代</p><p>有时候想用下标记录当前遍历的位置，同时又想有当前元素，自建一个变量变量作为下标又太low，优雅一些的做法是用内建函数enumerate()进行迭代。</p><p>这样既会有下标，又会有当前迭代元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index,s <span class="keyword">in</span> enumerate(str):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%d==&gt;%s'</span>%(index,s)</span><br></pre></td></tr></table></figure><p>##14、list元素去重</p><p>当你处理list列表变量时，可能会出现列表元素重复的现象。这个时候你该怎样用简便的方法将重复的元素去掉呢？</p><p>方法有很多，我比较喜欢用set集合进行去重，当list变量转换成set集合变量时，重复的元素会自动合并，只保留一个。再将set集合变量转换为list即可。</p><p>另外如果要保留list的顺序的话，需要使用sort进行排序。</p><p>详见：<a href="http://www.jb51.net/article/55342.htm" target="_blank" rel="noopener">python中对list去重的多种方法</a></p><p>##15、如何用尽量简洁的代码输出一个列表（list）的前五个元素</p><p>最直观的写法，定义一个下标变量index来控制输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="number">2</span> index = <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> li:</span><br><span class="line"><span class="number">4</span>     <span class="keyword">if</span> index&gt;=<span class="number">5</span>:</span><br><span class="line"><span class="number">5</span>         <span class="keyword">break</span></span><br><span class="line"><span class="number">6</span>     <span class="keyword">print</span> x</span><br><span class="line"><span class="number">7</span>     index+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>观察代码，发现下标index可以用enumerate函数直接分离出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> index,x <span class="keyword">in</span> enumerate(li):</span><br><span class="line"><span class="number">3</span>     <span class="keyword">if</span> index&gt;=<span class="number">5</span>:</span><br><span class="line"><span class="number">4</span>         <span class="keyword">break</span></span><br><span class="line"><span class="number">5</span>     <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure><p>还有更简单的写法，使用列表的切片操作来简化代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> li[:<span class="number">5</span>]:</span><br><span class="line"><span class="number">3</span>     <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure><p>##16、readlines()会读入换行符！</p><p>在一次用smtp服务发送邮件给自己的时候，我用readlines()读取本地文件。</p><p>将带有email的username和password的那两行行直接赋值给用户名和密码变量。</p><p>结果导致收到的邮件开头带有乱码，检查了各个地方都没有发现bug在哪里。</p><p>最后找到原因是输入的用户名和密码最后分别带有一个换行符，而邮件将多余的内容作为乱码来处理了。</p><p>解决方法是readlines()读取每一行内容后，赋值的时候需要先strip()去除字符串前后端多余的空白符。</p><p>##17、如何创建一个二维列表？</p><p>加入我想创建一个2000*7的二维列表，列表每个元素是0，该怎么创建呢？</p><p>可以使用 <strong>嵌套的列表解析</strong> 来达成这个目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cols = <span class="number">7</span></span><br><span class="line">rows = <span class="number">2000</span></span><br><span class="line"><span class="number">2</span>d_list = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(cols)] <span class="keyword">for</span> row <span class="keyword">in</span> range(rows)]</span><br></pre></td></tr></table></figure><p>##18、使用 eval 函数将列表样式字符串转换为真正的列表类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip = <span class="string">"['123.43.54.3',80,10]"</span></span><br><span class="line"><span class="keyword">print</span> type(ip)</span><br><span class="line">ip = eval(ip)</span><br><span class="line"><span class="keyword">print</span> type(ip)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>##19、使用 tee 同时重定向到标准输出和文件<br>本例子基于 linux 环境</p><p>创建一个脚本 tmp.py ，它使用 python 输出到标准输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,time</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">sys.stdout.write(<span class="string">'[%s]'</span>%time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time())) + <span class="string">' '</span>)</span><br><span class="line">sys.stdout.flush()</span><br></pre></td></tr></table></figure></p><p>这个脚本的作用是循环输出当前时间到linux的<strong>标准输出</strong>，一般来说，linux 的标准输出就是屏幕，但如果在 linux 中运行该脚本时使用重定向符 &gt; output.txt ，那么标准输出就变成了文件 output.txt，也就是说以上代码循环输出的当前时间就会输出到文件 output.txt 中。</p><p>但是使用重定向符 &gt; 只能单向指定，不能将输出同时指向两个位置，也就是说我<strong>没法将该脚本的运行结果同时输出到屏幕和一个文件中</strong>。</p><p>这个需求可以用 linux 自带的工具 tee 解决。</p><p>tee 的作用是：<strong>从标准输入中读取并同时写入到标准输出和指定的文件上</strong></p><p>于是我们在linux 中用以下命令将脚本的运行结果同时输出到屏幕和文件中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tmp.py | tee output.txt</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：python 脚本中一定不要忘了使用 flush() 输出缓冲区内容，不然你会看不到输出。</p><p>参考资料：<a href="http://blog.csdn.net/andy572633/article/details/8081591" target="_blank" rel="noopener">Linux即输出到屏幕，又保存到文件 - csdn</a></p><p>##20、linux小知识：nohup 和 &amp; 的区别<br>这两个操作的作用都是 <strong>使命令在后台运行</strong>。</p><p>区别是 <strong>能否被 SIGHUP信号 中断</strong>。</p><p>简单一些讲就是使用 &amp; 启动的后台任务，关闭终端连接之后会被 SIGHUP信号 中断。而使用 nohup 启动的后台任务则不受影响。</p><p>仅仅这么说不太严谨，详情可以见：<a href="http://blog.csdn.net/lovemdx/article/details/20529563" target="_blank" rel="noopener">linux 的nohup &amp; 和daemon 总结</a></p><p>##21、linux小知识：使用 tail 动态查看日志文件<br>查看 .log 日志文件的时候，经常需要重新打开文件才能查看日志的更新情况。</p><p>那么可不可以动态的查看日志文件呢？</p><p>这个时候一个被我忽视了很久的命令 <strong>tail</strong> 跳入了我的眼帘。</p><p>tail 的<strong>作用</strong>是查看一个文件的末尾N行内容，如果 <strong>为 tail 添加上参数 -f 便可以动态查看日志啦！默认每秒刷新一次</strong>，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f test.log</span><br></pre></td></tr></table></figure><p>如此 test.log 最新写入的内容就可以立刻显示在屏幕上了，这对于查看日志文件十分有用。</p><p>参考资料：<a href="http://codingstandards.iteye.com/blog/832575" target="_blank" rel="noopener">我使用过的Linux命令之tail - 输出文件尾部/动态监视文件尾部</a></p><h2 id="22、logging-模块：按时间切分日志"><a href="#22、logging-模块：按时间切分日志" class="headerlink" title="22、logging 模块：按时间切分日志"></a>22、logging 模块：按时间切分日志</h2><p>如果将日志输出导向到一个文件，那么时间久了，这个文件会变得很大。</p><p>这个时候我们可以使用 logging 模块提供的 RotatingFileHandler 和 TimedRotatingFileHandler 来自动切分日志。</p><p>这里以 TimedRotatingFileHandler 举例，它的作用是设置 logging 按时间切分日志文件，比如下面这个例子，就是以“天”为单位，自动切分日志：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOG_FILE = <span class="string">'test.log'</span>  <span class="comment"># 日志文件输出位置</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)     <span class="comment"># 基本设置</span></span><br><span class="line"></span><br><span class="line">handler = logging.handlers.TimedRotatingFileHandler(LOG_FILE,when=<span class="string">'D'</span>,interval=<span class="number">1</span>,backupCount=<span class="number">100</span>)   <span class="comment"># 按时间分割日志，每天对应一个日志文件</span></span><br><span class="line">formatter = logging.Formatter(fmt=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">handler.setFormatter(formatter) <span class="comment"># 设置显示格式</span></span><br><span class="line"></span><br><span class="line">logging.getLogger().addHandler(handler)    <span class="comment"># 加载该处理</span></span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="http://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html" target="_blank" rel="noopener">python 的日志logging模块学习 - 博客园</a></p><p><a href="http://blog.csdn.net/u012450329/article/details/53067717" target="_blank" rel="noopener">python 日志模块logging学习与使用(日志分割)</a></p><p>##23、linux小知识：设置 alias 别名永久生效<br>使用 alias 设置命令的别名是很有用的操作，你可以在命令行直接输入以下命令设置一个别名，以 ll 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias ll = <span class="string">'ls -alF'</span></span><br></pre></td></tr></table></figure></p><p>如此便设置了一个别名，在命令行里输入 ll 和输入 ls -alF 产生的效果是相同的。</p><p>但直接在命令行里设置下次登陆便会失效，如何让别名永久生效呢，需要修改用户目录下的 <figure class="highlight plain"><figcaption><span>文件。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">vi .bashrc</span><br></pre></td></tr></table></figure></p><p>添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias ll = <span class="string">'ls -alF'</span></span><br></pre></td></tr></table></figure></p><p>回到用户目录，输入以下命令使其生效：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure></p><p>##24、git小知识：git remote 远程主机常用操作<br><strong>1. 查看帮助</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -h</span><br></pre></td></tr></table></figure></p><p><strong>2. 显示远程主机</strong></p><p>结构：<br><figure class="highlight plain"><figcaption><span>remote [-v]```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例子：</span><br><span class="line">```python</span><br><span class="line">git remote# 显示所有远程主机名</span><br><span class="line">git remote -v# 显示所有远程主机名和对应的url</span><br></pre></td></tr></table></figure></p><p><strong>3. 添加远程主机</strong></p><p>结构：<br><figure class="highlight plain"><figcaption><span>remote add <远程主机名> <远程仓库url>```</远程仓库url></远程主机名></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例子：</span><br><span class="line">```python</span><br><span class="line">git remote add origin http://test.com/user/repo.git</span><br></pre></td></tr></table></figure></p><p>ps:<br>远程主机名一般会起为 origin，每个git项目的remote是独立的</p><p><strong>4. 重命名远程主机名</strong></p><p>结构：<br><figure class="highlight plain"><figcaption><span>remote rename <旧主机名> <新主机名>```</新主机名></旧主机名></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例子：</span><br><span class="line">```python</span><br><span class="line">git remote rename origin origin_bak</span><br></pre></td></tr></table></figure></p><p><strong>5. 删除远程主机</strong></p><p>结构：<figure class="highlight plain"><figcaption><span>remote remove <远程主机名>```</远程主机名></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">```python</span><br><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure></p><p><strong>6. 重置远程主机的url</strong></p><p>结构：<figure class="highlight plain"><figcaption><span>remote set-url <远程主机名> <新的远程仓库url>```</新的远程仓库url></远程主机名></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例子：</span><br><span class="line">```python</span><br><span class="line">git remote set-url origin http://test.com/user/repo.git</span><br></pre></td></tr></table></figure></p><h2 id="25、IP地址拼接精简写法"><a href="#25、IP地址拼接精简写法" class="headerlink" title="25、IP地址拼接精简写法"></a>25、IP地址拼接精简写法</h2><p>要实现这样一个功能，给出IP地址的四个字段，将它们拼接起来，并判断是否合法。</p><p><strong>栗子</strong>：</p><p>输入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192</span> <span class="number">168</span> <span class="number">12</span> <span class="number">34</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">234</span> <span class="number">345</span> <span class="number">456</span> <span class="number">567</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.12</span><span class="number">.34</span></span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">[Error]: cannot compose IP address.</span><br><span class="line">[Error]: cannot compose IP address.</span><br></pre></td></tr></table></figure></p><p>精简写法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    inputs = line.split()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> all([<span class="number">0</span> &lt;= int(input) &lt;= <span class="number">255</span> <span class="keyword">for</span> input <span class="keyword">in</span> inputs]):</span><br><span class="line">        print(<span class="string">"."</span>.join(inputs))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"[Error]: cannot compose IP address."</span>)</span><br></pre></td></tr></table></figure></p><p>亮点：</p><ol><li><code>for line in sys.stdin:</code> 循环读取标准输入的内容</li><li>all() 的运用：如果列表内元素都不为 False、’’、0，则返回 <code>True</code>；否则返回 <code>False</code></li></ol><p>来源：<a href="https://github.com/WangHaizhen/py-tree/issues/1" target="_blank" rel="noopener">1.1 有个比较 pythonic 的写法，加油！ #1 - WangHaizhen/py-tree</a></p><h2 id="26、linux小知识：查看系统登录过的用户"><a href="#26、linux小知识：查看系统登录过的用户" class="headerlink" title="26、linux小知识：查看系统登录过的用户"></a>26、linux小知识：查看系统登录过的用户</h2><p>Linux用户登录记录日志和相关查看命令汇总<br><a href="http://www.cnblogs.com/lizhaoxian/p/5981029.html" target="_blank" rel="noopener">http://www.cnblogs.com/lizhaoxian/p/5981029.html</a></p><h2 id="27、python2-和-python3-的编码对比"><a href="#27、python2-和-python3-的编码对比" class="headerlink" title="27、python2 和 python3 的编码对比"></a>27、python2 和 python3 的编码对比</h2><p>讨论这个问题的起因是在 py3 环境中运行一段 py2 代码时出现了差异。</p><p>出问题的代码是这里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> s[:<span class="number">2</span>]==<span class="string">'【'</span>:</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>在 py2 里，这条语句的条件表达式结果为真；而在 py3 里，这条语句的条件表达式结果为假。</p><p>而如果我把代码改成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> s[:<span class="number">1</span>]==<span class="string">'【'</span>:</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>py3 中这条语句的条件表达式的结果变为真。</p><p>为什么会出现这种情况呢？</p><p>我们首先看一下，py2 中 gbk 编码的样子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'【'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'\xa1\xbe'</span></span><br></pre></td></tr></table></figure></p><p>这里中文字符‘【’，由两个区位符组成。所以s[:2]可以取到完整的‘【’。</p><p>而 py3 对编码问题做了改进，所有 str 类型变量都会自动转码为 unicode 编码存储。也就是说一个 gbk 编码的文件中，将一个中文字符赋值给一个变量，会自动转码为 unicode 编码，然后存进变量。</p><p>于是在 py3 中 gbk 编码赋值之后，变成了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'【'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'\u3010'</span></span><br></pre></td></tr></table></figure></p><p>（实际上 py3 解释器中会自动输出中文，这里理解意思就好）</p><p>所以在 py3 中，用 s[:1] 便可以取到完整的’【’。</p><p>于是<figure class="highlight plain"><figcaption><span>s[:1]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 28、linux小知识：修改 shell 提示符显示格式</span><br><span class="line">如果我想让linux shell 的提示符变成如下样子，该怎么做呢？</span><br><span class="line">```python</span><br><span class="line">[my-PC] yym@/home/yym&gt;</span><br></pre></td></tr></table></figure></p><p>很简单，我们在 .bash_profile 中添加一条语句即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vi .bash_profile</span><br><span class="line">添加 export PS1=<span class="string">'[\h] \u@$PWD&gt;'</span></span><br><span class="line">退出 vim</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></p><p>执行以上操作之后，你会发现提示符已经变成了我们想要的格式。</p><p>要修改成其它格式，依次类推。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/17" target="_blank" rel="noopener">Python 学习拾遗</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于python中的字符串编码理解</title>
      <link href="/2016/12/21/%E5%85%B3%E4%BA%8Epython%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E7%90%86%E8%A7%A3/"/>
      <url>/2016/12/21/%E5%85%B3%E4%BA%8Epython%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p style="font-family:Verdana, Arial, H<a id=" more"="">elvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">python2.x 中<strong>中间编码为unicode</strong>，一个字符串需要<strong>decode为unicode，再encode为其它编码格式</strong>（gbk、utf8等）</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">以gbk转utf8为例：</span>&nbsp;<br></p><br><div class="cnblogs_code" style="margin:5px 0px;padding:5px;background-color:#F5F5F5;border:1px solid #CCCCCC;font-family:&quot;font-size:12px !important;"><br><pre><span style="font-size:16px;line-height:1.5 !important;">s = <span style="color:#800000;line-height:1.5 !important;">“我是</span><span style="color:#800000;line-height:1.5 !important;">字符串</span><span style="color:#800000;line-height:1.5 !important;">“</span><span style="line-height:1.5 !important;"> #gbk编码<br>s </span>= s.decode(<span style="color:#800000;line-height:1.5 !important;">‘</span><span style="color:#800000;line-height:1.5 !important;">gbk</span><span style="color:#800000;line-height:1.5 !important;">‘</span>).encode(<span style="color:#800000;line-height:1.5 !important;">‘</span><span style="color:#800000;line-height:1.5 !important;">utf8</span><span style="color:#800000;line-height:1.5 !important;">‘</span>)　　#将gbk编码转换为utf8编码，需要先转换为unicode中间编码，再转换为utf8编码</span></pre><br></div><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    &nbsp;<span style="font-size:16px;">具体过程为：</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;"><strong>s | gbk — decode(‘gbk’) —&gt; s | unicode — encode(‘utf8’) —&gt; s | utf8</strong></span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">代码中的&nbsp;<strong>显式字符串&nbsp;</strong>默认编码为代码文件的编码格式，如果开头没有#coding=[]声明，则默认编码为ascii型（所以存储中文会有问题）</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">如果开头声明了，例如：</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">#coding=gbk</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">则代码中一个显式字符串，例如：</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">s = ‘我是字符串’</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">字符串s会被编码成&nbsp;<strong>gbk</strong>&nbsp;格式存储</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">详见：<a href="http://blog.csdn.net/pipisorry/article/details/44136297" target="_blank">python字符串编码及乱码解决方案</a>&nbsp; &nbsp;讲的不错</span><br></p><br><p style="font-family:Verdana, Arial, Helvetica, sans-serif;font-size:13.92px;"><br>    <span style="font-size:16px;">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<a href="http://www.cnblogs.com/huxi/archive/2010/12/05/1897271.html" target="_blank">Python字符编码详解</a>&nbsp; 这个也可以看一看</span><br></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/8" target="_blank" rel="noopener">关于python中的字符串编码理解</a></strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>网站CSS样式</title>
      <link href="/2016/10/15/%E7%BD%91%E7%AB%99CSS%E6%A0%B7%E5%BC%8F/"/>
      <url>/2016/10/15/%E7%BD%91%E7%AB%99CSS%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>##超链接样式</p><a id="more"></a><p>默认情况下超链接显示样式：<br><img src="http://yangyingming.com/uploads/markdownx/2017/2/d9c3634a-ad12-43bc-8381-f19099f4a702.png" alt=""></p><p>当鼠标悬停在超链接上时的显示样式：<br><img src="http://yangyingming.com/uploads/markdownx/2017/2/b4bd86fb-8a6f-4fee-9267-13200b4e63e3.png" alt=""></p><p>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.postBody</span> <span class="selector-tag">a</span>&#123;<span class="comment">/* 默认样式*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#bd6208</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">2px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.postBody</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="comment">/* 鼠标悬停样式 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bd6208</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>##漂亮的table表格样式<br>这个CSS样式表格自动切换每一行的颜色，在我们需要频繁更新一个大表格的时候很有用。</p><p>只要一个table标签加上class=”altrowstable”就可以看到效果。</p><p>css+js</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">Javascript</span> <span class="selector-tag">goes</span> <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">document</span> <span class="selector-tag">HEAD</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">altRows</span>(<span class="selector-tag">name</span>)&#123;</span><br><span class="line">    if(document.getElementsByTagName)&#123;  </span><br><span class="line">        </span><br><span class="line">        var table = document.getElementsByClassName(name);  </span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">i</span>,<span class="selector-tag">j</span>;</span><br><span class="line">        for (i = 0; i &lt; table.length; i++) &#123;</span><br><span class="line">            var rows = table[i].getElementsByTagName("tr"); </span><br><span class="line">             </span><br><span class="line">            for(j = 0; j &lt; rows.length; j++)&#123;          </span><br><span class="line">                if(j % 2 == 0)&#123;</span><br><span class="line">                    rows[j].className = "evenrowcolor";</span><br><span class="line">                &#125;<span class="selector-tag">else</span>&#123;</span><br><span class="line">                    rows[j].className = "oddrowcolor";</span><br><span class="line">                &#125;      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">    altRows('altrowstable');</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">CSS</span> <span class="selector-tag">goes</span> <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">document</span> <span class="selector-tag">HEAD</span> <span class="selector-tag">or</span> <span class="selector-tag">added</span> <span class="selector-tag">to</span> <span class="selector-tag">your</span> <span class="selector-tag">external</span> <span class="selector-tag">stylesheet</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">table</span><span class="selector-class">.altrowstable</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: verdana,arial,sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#a9c6c9</span>;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span><span class="selector-class">.altrowstable</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#a9c6c9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span><span class="selector-class">.altrowstable</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#a9c6c9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.oddrowcolor</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#d4e3e5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.evenrowcolor</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#c3dde0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Table goes in the document BODY --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"altrowstable"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Info Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Info Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Info Header 3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 1A<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 1B<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 1C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 2A<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 2B<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 2C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 3A<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 3B<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 3C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 4A<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 4B<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 4C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 5A<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 5B<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Text 5C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果：</p><br><!-- Table goes in the document BODY --><br><p><img src="http://img.my.csdn.net/uploads/201209/08/1347078059_2505.jpg" alt=""></p><br><p>&nbsp;</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/24" target="_blank" rel="noopener">网站CSS样式</a></strong></p>]]></content>
      
      
    </entry>
    
  
  
</search>
