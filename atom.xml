<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>呓语的黑板报</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windcode.github.io/"/>
  <updated>2018-05-14T07:50:14.713Z</updated>
  <id>https://windcode.github.io/</id>
  
  <author>
    <name>呓语</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-theme-freemind.386 主题设置图片居中</title>
    <link href="https://windcode.github.io/2018/05/14/hexo-theme-freemind-386-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/"/>
    <id>https://windcode.github.io/2018/05/14/hexo-theme-freemind-386-主题设置图片居中/</id>
    <published>2018-05-14T07:36:32.000Z</published>
    <updated>2018-05-14T07:50:14.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 是一款轻量级的博客框架，可以很轻松的生成静态网站，常用于搭配 gitpage 搭建博客。</p><p>而 hexo-theme-freemind.386 是 Hexo 的一款主题，github 主页见：<a href="https://github.com/blackshow/hexo-theme-freemind.386" target="_blank" rel="noopener">blackshow/hexo-theme-freemind.386</a>。</p><p>本博客便采用了 Hexo 的 hexo-theme-freemind.386 主题搭建。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>hexo-theme-freemind.386 主题默认不支持图片居中，所有图片都是左对齐显示的，不太美观。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>其实图片没有居中也不怪 hexo-theme-freemind.386 主题，因为 hexo 中的文章都是用 markdown 编写的，还要渲染成 html 才能拿给主题用，所以主题拿到的 html 已经是固定的图片不居中的格式。</p><p>我们看一下 markdown 渲染之后的图片部分的 html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;a href=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; class=&quot;fancybox&quot; rel=&quot;gallery0&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>这里我的解决办法是在外层的 p 标签上加一个 align=”center” 属性，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;center&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; class=&quot;fancybox&quot; rel=&quot;gallery0&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>做到这一步需要在页面尾部添加一段 javascript 代码。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改 hexo-theme-freemind.386\layout_partial\after_footer.ejs 文件，在文件最后添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  // img align center</span><br><span class="line">  var imgs = document.getElementsByTagName(&quot;img&quot;);</span><br><span class="line">  for(var i=0;i &lt; imgs.length;i++)&#123;</span><br><span class="line">    // current img element</span><br><span class="line">    var img = imgs[i];</span><br><span class="line">    // current img parent node</span><br><span class="line">    var imgp = img.parentNode;</span><br><span class="line">    // current img parent parent node</span><br><span class="line">    var imgpp = img.parentNode.parentNode;</span><br><span class="line">    // set p element center</span><br><span class="line">    if(imgp.nodeName==&apos;A&apos; &amp;&amp; imgpp.nodeName==&apos;P&apos;)&#123;</span><br><span class="line">      imgpp.setAttribute(&quot;align&quot;,&quot;center&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo 是一款轻量级的博客框架，可以很轻松的生成静态网站，常用于搭配 gitpage 搭建博客。&lt;/p&gt;
&lt;p&gt;而 hexo-theme-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://windcode.github.io/2018/05/11/hello-world/"/>
    <id>https://windcode.github.io/2018/05/11/hello-world/</id>
    <published>2018-05-10T16:55:00.000Z</published>
    <updated>2018-05-12T12:30:00.009Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch + Kibana 安装配置(CentOS)</title>
    <link href="https://windcode.github.io/2018/04/26/ElasticSearch%20+%20Kibana%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE(CentOS)/"/>
    <id>https://windcode.github.io/2018/04/26/ElasticSearch + Kibana 安装配置(CentOS)/</id>
    <published>2018-04-26T04:13:33.575Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS-搭建内网可访问的-ElasticSearch-Kibana-环境"><a href="#CentOS-搭建内网可访问的-ElasticSearch-Kibana-环境" class="headerlink" title="CentOS 搭建内网可访问的 ElasticSearch + Kibana 环境"></a>CentOS 搭建内网可访问的 ElasticSearch + Kibana 环境</h2><p>部署环境：CentOS 7 64bit</p><p>使用组件：ElasticSearch 5.4、Kibana 5.4</p><p>实例描述：在一台服务器上搭建 ElasticSearch + Kibana，并使内网可访问，假设服务器地址为 172.16.4.44 。搭建好之后，同一内网中的机器都可以访问这个地址进入 Kibana 查看 ElasticSearch 中的数据。</p><p>组件下载：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">ElasticSearch 5.4</a> 、<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">Kibana 5.4</a> 均采用原生版本</p><p><strong>注意</strong>：ElasticSearch 需要 java8 以上环境，这里假设你已经安装好。<br><a id="more"></a></p><p>部署过程：</p><p>编辑</p><h3 id="1-创建新用户"><a href="#1-创建新用户" class="headerlink" title="1. 创建新用户"></a>1. 创建新用户</h3><p>由于 ElasticSearch 不能用 root 账号启动，所以需要创建一个新用户，假设这里创建一个新用户 ling 。</p><p>以下命令需在root用户下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# adduser ling</span><br><span class="line">[root@localhost ~]# passwd ling</span><br><span class="line">Changing password for user ling.</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@localhost ~]# su ling</span><br><span class="line">[ling@localhost root]$ cd ~</span><br></pre></td></tr></table></figure><p>接下来给新用户ling配置sudo权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost root]$ su root</span><br><span class="line">Password:</span><br><span class="line">[root@localhost ~]# visudo</span><br></pre></td></tr></table></figure></p><p>在sudo配置文件中找到配置root权限的位置，在后面添加一行新用户ling的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">ling    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure></p><h3 id="2-更换java版本为1-8"><a href="#2-更换java版本为1-8" class="headerlink" title="2. 更换java版本为1.8"></a>2. 更换java版本为1.8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo alternatives --config java</span><br><span class="line">[sudo] password for ling:</span><br><span class="line"></span><br><span class="line">There are 3 programs which provide &apos;java&apos;.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">   1           /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.31-2.b13.el7.x86_64/jre/bin/java</span><br><span class="line">*+ 2           /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75-2.5.4.2.el7_0.x86_64/jre/bin/java</span><br><span class="line">   3           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number: 1</span><br><span class="line">[ling@localhost ~]$</span><br></pre></td></tr></table></figure><p>选择 1.8 版本即可，没有报错即切换成功。</p><p>如果你的机器上没有java8的选项，请手动安装一个。</p><h3 id="3-准备安装文件"><a href="#3-准备安装文件" class="headerlink" title="3. 准备安装文件"></a>3. 准备安装文件</h3><p>下载地址：<a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">ElasticSearch 5.4</a> 、<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">Kibana 5.4</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ ls</span><br><span class="line">elasticsearch-5.4.0.tar.gz  kibana-5.4.0-linux-x86_64.tar.gz  perl5</span><br><span class="line">[ling@localhost ~]$ tar -xzvf elasticsearch-5.4.0.tar.gz</span><br><span class="line">......</span><br><span class="line">[ling@localhost ~]$ tar -xzvf kibana-5.4.0-linux-x86_64.tar.gz</span><br><span class="line">......</span><br><span class="line">[ling@localhost ~]$ ls</span><br><span class="line">elasticsearch-5.4.0  elasticsearch-5.4.0.tar.gz  kibana-5.4.0-linux-x86_64  kibana-5.4.0-linux-x86_64.tar.gz  perl5</span><br></pre></td></tr></table></figure></p><h3 id="4-启动-ElasticSearch"><a href="#4-启动-ElasticSearch" class="headerlink" title="4. 启动 ElasticSearch"></a>4. 启动 ElasticSearch</h3><p>首先编辑 ElasticSearch 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ vi elasticsearch-5.4.0/config/elasticsearch.yml</span><br></pre></td></tr></table></figure></p><p>假设当前服务器ip地址为 172.16.4.44，修改 55 行 network.host 值为这个ip地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="line">#</span><br><span class="line">network.host: 172.16.4.44</span><br></pre></td></tr></table></figure></p><p>保存退出。</p><p>启动 ElasticSearch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ elasticsearch-5.4.0/bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>这里可能会报很多错误：</p><p><strong>错误1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: bootstrap checks failed</span><br><span class="line">max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><p>切换到root用户，编辑limits.conf 添加类似如下内容</p><p>vi /etc/security/limits.conf</p><p>在文件最后添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure></p><p>重新登录 ling 用户，输入命令查看是否修改成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ su ling</span><br><span class="line">Password:</span><br><span class="line">[ling@localhost ~]$ ulimit -Hn</span><br><span class="line">131072</span><br></pre></td></tr></table></figure></p><p><strong>错误2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></p><p>解决方法：</p><p>切换到root用户修改配置sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure></p><p>添加下面配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure></p><p>并执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo sysctl -p</span><br><span class="line">vm.max_map_count = 655360</span><br></pre></td></tr></table></figure></p><p>然后，重新启动elasticsearch，即可启动成功。</p><p>启动之后，在内网的另一台机器上打开浏览器访问 <strong>172.16.4.44:9200</strong> ，如果连接失败，则回到服务器，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ sudo iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited</span><br></pre></td></tr></table></figure></p><p>删除iptables中阻挡访问的规则。</p><p>重新访问，如果输出如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Z0hRS2f&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;QzsZplKmSLOsTaDezjc1hA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.4.0&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;780f8c4&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-04-28T17:43:27.229Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.5.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明 ElasticSearch 启动成功。</p><h3 id="5-启动-Kibana"><a href="#5-启动-Kibana" class="headerlink" title="5. 启动 Kibana"></a>5. 启动 Kibana</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ vi kibana-5.4.0-linux-x86_64/config/kibana.yml</span><br></pre></td></tr></table></figure></p><p>修改配置文件第 7 行 和第 21 行的 server.host 和 elasticsearch.url 的值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.host: &quot;172.16.4.44&quot;</span><br><span class="line">elasticsearch.url: &quot;http://172.16.4.44:9200&quot;</span><br></pre></td></tr></table></figure></p><p>启动 kibana<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ kibana-5.4.0-linux-x86_64/bin/kibana</span><br></pre></td></tr></table></figure></p><p>如果没有报错，在内网中访问 <strong>172.16.4.44:5601</strong>，即可进入kibana。</p><h3 id="6-后台运行-ElasticSearch-和-Kibana"><a href="#6-后台运行-ElasticSearch-和-Kibana" class="headerlink" title="6. 后台运行 ElasticSearch 和 Kibana"></a>6. 后台运行 ElasticSearch 和 Kibana</h3><p>使用 nohup 后台运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ nohup /home/ling/elasticsearch-5.4.0/bin/elasticsearch &gt; /home/ling/elasticsearch-5.4.0/bin/elasticsearch.log 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 12821</span><br><span class="line">[ling@localhost ~]$ nohup /home/ling/kibana-5.4.0-linux-x86_64/bin/kibana &gt; /home/ling/kibana-5.4.0-linux-x86_64/bin/kibana.log 2&gt;&amp;1 &amp;</span><br><span class="line">[2] 12937</span><br></pre></td></tr></table></figure></p><p>查看 ElasticSearch 和 Kibana 的进程PID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ ps -aux | grep elasticsearch</span><br><span class="line">ling     12821 22.5 14.3 7929072 2336236 pts/0 Sl   18:28   0:21 /bin/java -Xms2g -Xmx2g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -server -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -Djdk.io.permissionsUseCanonicalPath=true -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Dlog4j.skipJansi=true -XX:+HeapDumpOnOutOfMemoryError -Des.path.home=/home/ling/elasticsearch-5.4.0 -cp /home/ling/elasticsearch-5.4.0/lib/* org.elasticsearch.bootstrap.Elasticsearch</span><br><span class="line">ling     12983  0.0  0.0 112640   960 pts/0    S+   18:29   0:00 grep --color=auto elasticsearch</span><br><span class="line">[ling@localhost ~]$ ps -aux | grep kibana</span><br><span class="line">ling     12937  5.9  0.6 1136076 109520 pts/0  Sl   18:28   0:04 /home/ling/kibana-5.4.0-linux-x86_64/bin/../node/bin/node --no-warnings /home/ling/kibana-5.4.0-linux-x86_64/bin/../src/cli</span><br><span class="line">ling     13013  0.0  0.0 112640   960 pts/0    S+   18:30   0:00 grep --color=auto kibana</span><br></pre></td></tr></table></figure></p><h2 id="CentOS-搭建-Bigdesk-节点监控插件"><a href="#CentOS-搭建-Bigdesk-节点监控插件" class="headerlink" title="CentOS 搭建 Bigdesk 节点监控插件"></a>CentOS 搭建 Bigdesk 节点监控插件</h2><p>Bigdesk是一款针对 ElasticSearch 性能的开源实时监控方案。github地址是：<a href="https://github.com/hlstudio/bigdesk" target="_blank" rel="noopener">https://github.com/hlstudio/bigdesk</a></p><p>它的部署十分简单，前提是你已经搭建好一个 ElasticSearch 集群，并可以在内网中访问。</p><p>部署步骤：</p><h3 id="1-修改-ElasticSearch-配置文件"><a href="#1-修改-ElasticSearch-配置文件" class="headerlink" title="1. 修改 ElasticSearch 配置文件"></a>1. 修改 ElasticSearch 配置文件</h3><p>要让 Bigdesk 支持 ES5.x 版本，需要修改 ElasticSearch 的配置文件，添加以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></p><h3 id="2-克隆-Bigdesk-到本地"><a href="#2-克隆-Bigdesk-到本地" class="headerlink" title="2. 克隆 Bigdesk 到本地"></a>2. 克隆 Bigdesk 到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ git clone https://github.com/hlstudio/bigdesk.git</span><br></pre></td></tr></table></figure><h3 id="3-移动到-site-目录"><a href="#3-移动到-site-目录" class="headerlink" title="3. 移动到 _site 目录"></a>3. 移动到 _site 目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost ~]$ cd bigdesk/</span><br><span class="line">[ling@localhost bigdesk]$ cd _site/</span><br></pre></td></tr></table></figure><h3 id="4-启动-SimpleHTTPServer-服务器"><a href="#4-启动-SimpleHTTPServer-服务器" class="headerlink" title="4. 启动 SimpleHTTPServer 服务器"></a>4. 启动 SimpleHTTPServer 服务器</h3><p>使用 python 的 SimpleHTTPServer ，可以以当前文件夹为根目录部署一个简单的服务器，以便在内网中访问 Bigdesk：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost _site]$ python -m SimpleHTTPServer 9000</span><br></pre></td></tr></table></figure></p><p>这时，在内网中访问 <strong>172.16.5.55:9000</strong> （这里假设我们在该ip地址上部署bigdesk），并在显示的页面中输入一个集群中节点的访问地址，便可以用 bigdesk 监控 ElasticSearch 性能了：</p><h3 id="5-后台运行-Bigdesk"><a href="#5-后台运行-Bigdesk" class="headerlink" title="5. 后台运行 Bigdesk"></a>5. 后台运行 Bigdesk</h3><p>执行以下命令可以在后台运行 Bigdesk（假设你的安装位置和我一样）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost _site]$ nohup python -m SimpleHTTPServer &gt; /home/ling/bigdesk/_site/bigdesk.log 9000 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>查看 Bigdesk 进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ling@localhost _site]$ ps -aux | grep SimpleHTTPServer</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.Elasticsearch5.0 安装问题集锦<br><a href="http://www.cnblogs.com/sloveling/p/elasticsearch.html" target="_blank" rel="noopener">http://www.cnblogs.com/sloveling/p/elasticsearch.html</a></p><p>2.记录Linux下安装elasticSearch时遇到的一些错误<br><a href="http://blog.csdn.net/gebitan505/article/details/54709515" target="_blank" rel="noopener">http://blog.csdn.net/gebitan505/article/details/54709515</a></p><p>3.linux 使用alternatives 切换Java版本<br><a href="http://blog.csdn.net/sdcxyz/article/details/45078717" target="_blank" rel="noopener">http://blog.csdn.net/sdcxyz/article/details/45078717</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/409" target="_blank" rel="noopener">ElasticSearch + Kibana 安装配置(CentOS)</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CentOS-搭建内网可访问的-ElasticSearch-Kibana-环境&quot;&gt;&lt;a href=&quot;#CentOS-搭建内网可访问的-ElasticSearch-Kibana-环境&quot; class=&quot;headerlink&quot; title=&quot;CentOS 搭建内网可访问的 ElasticSearch + Kibana 环境&quot;&gt;&lt;/a&gt;CentOS 搭建内网可访问的 ElasticSearch + Kibana 环境&lt;/h2&gt;&lt;p&gt;部署环境：CentOS 7 64bit&lt;/p&gt;
&lt;p&gt;使用组件：ElasticSearch 5.4、Kibana 5.4&lt;/p&gt;
&lt;p&gt;实例描述：在一台服务器上搭建 ElasticSearch + Kibana，并使内网可访问，假设服务器地址为 172.16.4.44 。搭建好之后，同一内网中的机器都可以访问这个地址进入 Kibana 查看 ElasticSearch 中的数据。&lt;/p&gt;
&lt;p&gt;组件下载：&lt;a href=&quot;https://www.elastic.co/downloads/elasticsearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ElasticSearch 5.4&lt;/a&gt; 、&lt;a href=&quot;https://www.elastic.co/downloads/kibana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kibana 5.4&lt;/a&gt; 均采用原生版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：ElasticSearch 需要 java8 以上环境，这里假设你已经安装好。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决VPS经SS访问Google Schoolar受限（补充）</title>
    <link href="https://windcode.github.io/2018/04/02/%E8%A7%A3%E5%86%B3VPS%E7%BB%8FSS%E8%AE%BF%E9%97%AEGoogle%20Schoolar%E5%8F%97%E9%99%90%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89/"/>
    <id>https://windcode.github.io/2018/04/02/解决VPS经SS访问Google Schoolar受限（补充）/</id>
    <published>2018-04-02T05:07:38.001Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要解决通过 ss 访问 谷歌学术，报如下错误的问题：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d9893fc3-ee7b-4247-bb2d-1908ebd629d9.png" alt=""></p><p>提示信息为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">We<span class="string">'re sorry... but your computer or network may be sending automated queries. </span></span><br><span class="line"><span class="string">To protect our users, we can'</span>t process your request right now.</span><br></pre></td></tr></table></figure><p>网上找到一篇文章可以基本解决这个问题：<a href="https://blog.csdn.net/lm409/article/details/73658105" target="_blank" rel="noopener">解决VPS经SS访问Google Schoolar受限</a>，但是我在尝试的过程中发现有些坑还是花费了不少时间，下面针对这些坑对上文进行补充性的建议。<br><a id="more"></a></p><h2 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h2><ol><li><p>该文的 vps 基于 vultr，其他 vps 开启 ipv6 的方法另做参考</p></li><li><p>配置文件修改过后，记得重启服务器（比如修改 hosts、sysctl.conf 等之后）</p></li><li><p>打算尝试第二种方法“如果是IPv4网段被封”的时候，记得将第一种方法“如果是IPv6网段被封”中对 sysctl.conf 做的修改恢复</p></li><li><p>在尝试第二种方法“如果是IPv4网段被封”的时候，需要通过修改 hosts 文件来对谷歌学术的域名强制 ipv6 访问，照文修改之后，发现不能访问某篇论文的 bib 引用</p></li></ol><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/94e56dde-54f3-45f0-8ac1-ff93278a3f4e.png" alt=""></p><p>这个时候，在上文对 /etc/hosts 的修改之后，再添加上以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:<span class="number">801</span>::<span class="number">2001</span> scholar.googleusercontent.com</span><br></pre></td></tr></table></figure><p>修改保存之后别忘了重启服务器</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>结合文章 <a href="https://blog.csdn.net/lm409/article/details/73658105" target="_blank" rel="noopener">解决VPS经SS访问Google Schoolar受限</a> 和 本文，基本可以解决通过 vultr vps 搭建的 ss 访问谷歌学术受限的问题。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/408" target="_blank" rel="noopener">解决VPS经SS访问Google Schoolar受限（补充）</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要解决通过 ss 访问 谷歌学术，报如下错误的问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/d9893fc3-ee7b-4247-bb2d-1908ebd629d9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;提示信息为：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;We&lt;span class=&quot;string&quot;&gt;&#39;re sorry... but your computer or network may be sending automated queries. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;To protect our users, we can&#39;&lt;/span&gt;t process your request right now.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网上找到一篇文章可以基本解决这个问题：&lt;a href=&quot;https://blog.csdn.net/lm409/article/details/73658105&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;解决VPS经SS访问Google Schoolar受限&lt;/a&gt;，但是我在尝试的过程中发现有些坑还是花费了不少时间，下面针对这些坑对上文进行补充性的建议。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Frp 进行内网穿透（在外网用 ssh 登录校园网中的服务器）</title>
    <link href="https://windcode.github.io/2018/04/02/%E4%BD%BF%E7%94%A8%20Frp%20%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%88%E5%9C%A8%E5%A4%96%E7%BD%91%E7%94%A8%20ssh%20%E7%99%BB%E5%BD%95%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/"/>
    <id>https://windcode.github.io/2018/04/02/使用 Frp 进行内网穿透（在外网用 ssh 登录校园网中的服务器）/</id>
    <published>2018-04-02T01:19:19.457Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想在外网用 ssh 登录内网（校园网）的服务器，以便在外网也能跑跑实验什么的，于是研究了一下常用的内网穿透工具，下面分享下我的心得。</p><p>首先介绍一下 <strong>内网穿透解决的痛点</strong>，比如导师在你们实验室买了一台高配服务器，装配有高端显卡，可以用来跑深度学习模型，你在实验室玩的很开心。但是到了暑假你不得不离开实验室，回到家里的外网没法访问处于实验室内网的服务器，vpn也没法用！这怎么办呢，这个时候可以用内网穿透工具来解决这个问题啦！</p><p><strong>部署的思路</strong> 是把内网穿透工具的客户端部署在内网服务器中，然后在有独立域名的 VPS 中部署内网穿透工具的服务端，然后你在外网的随便一台机器上用 ssh 登录你的 VPS 的 IP 和配置好的端口，便可以登录内网的服务器啦！</p><p>其实 <strong>原理</strong> 就是把 VPS 当做一个“桥”，和内网的操作全部通过互联网和这个“桥”连通，这样便打穿了内网和外网的界限。<br><a id="more"></a></p><h2 id="三款内网穿透工具"><a href="#三款内网穿透工具" class="headerlink" title="三款内网穿透工具"></a>三款内网穿透工具</h2><p>下面介绍一下我了解的三种内网穿透工具，花生壳、Ngrok 和 Frp。</p><p>最常见也是最知名的内网穿透工具大概就是花生壳了，优点是功能强大，配置完善，缺点是要花钱，这个方案果断放弃。</p><p>然后我尝试了 Ngrok，相比花生壳它的优点是开源、免费，缺点是部署偏麻烦，编译到一半的时候发现 Frp 可以直接使用二进制包，果断弃坑。</p><p>Frp 也是一款开源、免费的内网穿透工具，诞生时间晚，但是十分具有活力，简单实用。按照教程部署了 Frp 的服务端和客户端，5分钟便实现了内网穿透，在外网通过 ssh 访问了内网的服务器。赞一个。</p><h2 id="部署-Frp"><a href="#部署-Frp" class="headerlink" title="部署 Frp"></a>部署 Frp</h2><p>部署的方法我就不啰嗦了，参考 <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">github 的 Frp 主页</a> 或者 看教程都行。教程可见：<a href="https://blog.csdn.net/qq_25351621/article/details/78947477" target="_blank" rel="noopener">frp内网穿透搭建，超级简单实用</a>，亲测可用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>一分钟实现内网穿透（ngrok服务器搭建）<br><a href="https://blog.csdn.net/zhangguo5/article/details/77848658" target="_blank" rel="noopener">https://blog.csdn.net/zhangguo5/article/details/77848658</a></p></li><li><p>搭建 ngrok 实现内网穿透<br><a href="https://blog.csdn.net/per_son/article/details/53738330" target="_blank" rel="noopener">https://blog.csdn.net/per_son/article/details/53738330</a></p></li><li><p>如何远程登录家里的Ubuntu电脑(命令行模式)？ - 知乎<br><a href="https://www.zhihu.com/question/27771692" target="_blank" rel="noopener">https://www.zhihu.com/question/27771692</a></p></li><li><p>frp内网穿透搭建，超级简单实用<br><a href="https://blog.csdn.net/qq_25351621/article/details/78947477" target="_blank" rel="noopener">https://blog.csdn.net/qq_25351621/article/details/78947477</a></p></li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/407" target="_blank" rel="noopener">使用 Ngrok 进行内网穿透（在外网用 ssh 登录校园网中的服务器）</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近想在外网用 ssh 登录内网（校园网）的服务器，以便在外网也能跑跑实验什么的，于是研究了一下常用的内网穿透工具，下面分享下我的心得。&lt;/p&gt;
&lt;p&gt;首先介绍一下 &lt;strong&gt;内网穿透解决的痛点&lt;/strong&gt;，比如导师在你们实验室买了一台高配服务器，装配有高端显卡，可以用来跑深度学习模型，你在实验室玩的很开心。但是到了暑假你不得不离开实验室，回到家里的外网没法访问处于实验室内网的服务器，vpn也没法用！这怎么办呢，这个时候可以用内网穿透工具来解决这个问题啦！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部署的思路&lt;/strong&gt; 是把内网穿透工具的客户端部署在内网服务器中，然后在有独立域名的 VPS 中部署内网穿透工具的服务端，然后你在外网的随便一台机器上用 ssh 登录你的 VPS 的 IP 和配置好的端口，便可以登录内网的服务器啦！&lt;/p&gt;
&lt;p&gt;其实 &lt;strong&gt;原理&lt;/strong&gt; 就是把 VPS 当做一个“桥”，和内网的操作全部通过互联网和这个“桥”连通，这样便打穿了内网和外网的界限。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 年 4 月份阅读记录</title>
    <link href="https://windcode.github.io/2018/03/18/2018%20%E5%B9%B4%204%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2018/03/18/2018 年 4 月份阅读记录/</id>
    <published>2018-03-18T04:01:44.410Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《沙丘-1》"><a href="#《沙丘-1》" class="headerlink" title="《沙丘 1》"></a>《沙丘 1》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/98e572c4-4efc-4cae-b131-9bb9dbe3892a.png" alt=""></p><p>标签：科幻经典、星云奖</p><p>每个“一生必读”的书单上都有《沙丘》——曾不止一次在对沙丘的评价中看到这句话，在科幻小说史上，《沙丘》也的确有特殊的地位，可以说是科幻小说界的经典之作，久负盛名。</p><p>最早知道《沙丘》之名，是小时候在网上搜红色警戒游戏安装包的时候，总能在相关推荐中看到《沙丘2000》的名字，这是以沙丘为背景的策略游戏，那时的我不可避免的也对这个名字和它背后的故事产生了好奇。</p><p>前段时间看到熊猫君对《沙丘》的推荐，以及当当上打折的消息，于是便顺势买下了1-3部。</p><p>迫不及待打开《沙丘》开始阅读，相比《地海巫师》，《沙丘》更加没让我失望，你能感觉到作者在用心去讲述一个故事。而小说故事的背景设定也十分宏大，沙漠之星，香料和沙虫，宇航公会，银河帝国等等，听作者将这些娓娓道来，仿佛真的存在这么一个真实的世界，从这一点上便能看出名作和庸作的差别。</p><p>不过个人感觉，《沙丘》毕竟是多年前的科幻小说，现在读起来难免感觉没那么“新”，少有那种看大刘小说时那种耳目一新、惊为天人的新奇脑洞。虽然有些陈旧感，但它作为经受过时间考验，流传至今的科幻名著，是值得科幻爱好者一读的。</p><p>推荐指数：★★★</p><h2 id="《沙丘-2：沙丘救世主》"><a href="#《沙丘-2：沙丘救世主》" class="headerlink" title="《沙丘 2：沙丘救世主》"></a>《沙丘 2：沙丘救世主》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png" alt=""></p><p>标签：科幻经典、星云奖</p><p>保罗统一了银河，却在日益庞大的政治机器前逐渐感到力不从心，国家脱离了他的控制，甚至出现了密谋反叛的小团体，保罗本人也受到预言幻境的折磨。保罗厌恶战争，他引起的“圣战”却屠戮了600亿人，他向往自由，却被教徒们推向神坛。</p><p>和第一部英雄波澜壮阔的复仇和征服壮举相比，《沙丘》的第二部更偏向于权谋之下人性的描写，它暴露了帝王和救世主保罗的阴暗面和脆弱面。最终保罗将自己流放到沙漠之中，虽生死由天，但却摆脱了世俗的纠缠，看穿命运之人终于“自由”。</p><p>相比第一部的新奇，在熟悉了作者的文风之后，《沙丘2》在我面前变得有些泛善可陈，这一部没有激起我多大的阅读兴趣。</p><p>推荐指数：★★☆</p><p>##《沙丘 3：沙丘之子》</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/0c575468-5c6d-49a2-a947-96e2ecdf1f54.png" alt=""></p><p>标签：科幻经典、星云奖</p><p>《沙丘 3》讲述的是保罗的儿子雷托的故事，在保罗“去世”之后，保罗的妹妹继承了皇位，成为执政女皇，然而她却被体内的意志诱惑，成为“邪物”。保罗的双胞胎儿女和他们的姑姑一样，从出生便具有无数祖先的意识，他们同样受到无数意识的诱惑。同时，各方势力对他们这对帝国的合法继承人虎视眈眈，保罗一手缔造的帝国岌岌可危。他们必须快速成长，并找出一条万全之策，应对来自各方和内心的压力。</p><p>和上一部相比，小说描写还是较为晦涩，有种“故弄玄虚”的感觉，很多片段支离破碎，不知道是作者故意这样，还是国内翻译的问题。这一部最后的结局还较有新意，雷托在压力下迈出决绝的一步，和沙虫结合为一体，击败邪魔入体的姑姑，垄断香料产出，成为统治帝国千年的“沙丘神帝”，这是下一步的故事了。</p><p>推荐指数：★★☆</p><h2 id="《我们仨》"><a href="#《我们仨》" class="headerlink" title="《我们仨》"></a>《我们仨》</h2><p>标签：杨绛</p><p>推荐指数：★★★☆</p><h2 id="《女生徒》"><a href="#《女生徒》" class="headerlink" title="《女生徒》"></a>《女生徒》</h2><p>标签：太宰治</p><p>推荐指数：★★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/406" target="_blank" rel="noopener">2018 年 3 月份阅读记录<br><a id="more"></a></a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《沙丘-1》&quot;&gt;&lt;a href=&quot;#《沙丘-1》&quot; class=&quot;headerlink&quot; title=&quot;《沙丘 1》&quot;&gt;&lt;/a&gt;《沙丘 1》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/98e572c4-4efc-4cae-b131-9bb9dbe3892a.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;标签：科幻经典、星云奖&lt;/p&gt;
&lt;p&gt;每个“一生必读”的书单上都有《沙丘》——曾不止一次在对沙丘的评价中看到这句话，在科幻小说史上，《沙丘》也的确有特殊的地位，可以说是科幻小说界的经典之作，久负盛名。&lt;/p&gt;
&lt;p&gt;最早知道《沙丘》之名，是小时候在网上搜红色警戒游戏安装包的时候，总能在相关推荐中看到《沙丘2000》的名字，这是以沙丘为背景的策略游戏，那时的我不可避免的也对这个名字和它背后的故事产生了好奇。&lt;/p&gt;
&lt;p&gt;前段时间看到熊猫君对《沙丘》的推荐，以及当当上打折的消息，于是便顺势买下了1-3部。&lt;/p&gt;
&lt;p&gt;迫不及待打开《沙丘》开始阅读，相比《地海巫师》，《沙丘》更加没让我失望，你能感觉到作者在用心去讲述一个故事。而小说故事的背景设定也十分宏大，沙漠之星，香料和沙虫，宇航公会，银河帝国等等，听作者将这些娓娓道来，仿佛真的存在这么一个真实的世界，从这一点上便能看出名作和庸作的差别。&lt;/p&gt;
&lt;p&gt;不过个人感觉，《沙丘》毕竟是多年前的科幻小说，现在读起来难免感觉没那么“新”，少有那种看大刘小说时那种耳目一新、惊为天人的新奇脑洞。虽然有些陈旧感，但它作为经受过时间考验，流传至今的科幻名著，是值得科幻爱好者一读的。&lt;/p&gt;
&lt;p&gt;推荐指数：★★★&lt;/p&gt;
&lt;h2 id=&quot;《沙丘-2：沙丘救世主》&quot;&gt;&lt;a href=&quot;#《沙丘-2：沙丘救世主》&quot; class=&quot;headerlink&quot; title=&quot;《沙丘 2：沙丘救世主》&quot;&gt;&lt;/a&gt;《沙丘 2：沙丘救世主》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/937706b6-8fb8-4c2e-8451-1133ef3d23d6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;标签：科幻经典、星云奖&lt;/p&gt;
&lt;p&gt;保罗统一了银河，却在日益庞大的政治机器前逐渐感到力不从心，国家脱离了他的控制，甚至出现了密谋反叛的小团体，保罗本人也受到预言幻境的折磨。保罗厌恶战争，他引起的“圣战”却屠戮了600亿人，他向往自由，却被教徒们推向神坛。&lt;/p&gt;
&lt;p&gt;和第一部英雄波澜壮阔的复仇和征服壮举相比，《沙丘》的第二部更偏向于权谋之下人性的描写，它暴露了帝王和救世主保罗的阴暗面和脆弱面。最终保罗将自己流放到沙漠之中，虽生死由天，但却摆脱了世俗的纠缠，看穿命运之人终于“自由”。&lt;/p&gt;
&lt;p&gt;相比第一部的新奇，在熟悉了作者的文风之后，《沙丘2》在我面前变得有些泛善可陈，这一部没有激起我多大的阅读兴趣。&lt;/p&gt;
&lt;p&gt;推荐指数：★★☆&lt;/p&gt;
&lt;p&gt;##《沙丘 3：沙丘之子》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/0c575468-5c6d-49a2-a947-96e2ecdf1f54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;标签：科幻经典、星云奖&lt;/p&gt;
&lt;p&gt;《沙丘 3》讲述的是保罗的儿子雷托的故事，在保罗“去世”之后，保罗的妹妹继承了皇位，成为执政女皇，然而她却被体内的意志诱惑，成为“邪物”。保罗的双胞胎儿女和他们的姑姑一样，从出生便具有无数祖先的意识，他们同样受到无数意识的诱惑。同时，各方势力对他们这对帝国的合法继承人虎视眈眈，保罗一手缔造的帝国岌岌可危。他们必须快速成长，并找出一条万全之策，应对来自各方和内心的压力。&lt;/p&gt;
&lt;p&gt;和上一部相比，小说描写还是较为晦涩，有种“故弄玄虚”的感觉，很多片段支离破碎，不知道是作者故意这样，还是国内翻译的问题。这一部最后的结局还较有新意，雷托在压力下迈出决绝的一步，和沙虫结合为一体，击败邪魔入体的姑姑，垄断香料产出，成为统治帝国千年的“沙丘神帝”，这是下一步的故事了。&lt;/p&gt;
&lt;p&gt;推荐指数：★★☆&lt;/p&gt;
&lt;h2 id=&quot;《我们仨》&quot;&gt;&lt;a href=&quot;#《我们仨》&quot; class=&quot;headerlink&quot; title=&quot;《我们仨》&quot;&gt;&lt;/a&gt;《我们仨》&lt;/h2&gt;&lt;p&gt;标签：杨绛&lt;/p&gt;
&lt;p&gt;推荐指数：★★★☆&lt;/p&gt;
&lt;h2 id=&quot;《女生徒》&quot;&gt;&lt;a href=&quot;#《女生徒》&quot; class=&quot;headerlink&quot; title=&quot;《女生徒》&quot;&gt;&lt;/a&gt;《女生徒》&lt;/h2&gt;&lt;p&gt;标签：太宰治&lt;/p&gt;
&lt;p&gt;推荐指数：★★★☆&lt;/p&gt;
&lt;h2 id=&quot;原创声明&quot;&gt;&lt;a href=&quot;#原创声明&quot; class=&quot;headerlink&quot; title=&quot;原创声明&quot;&gt;&lt;/a&gt;原创声明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;转载请注明：&lt;a href=&quot;http://www.yangyingming.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;呓语&lt;/a&gt; » &lt;a href=&quot;http://www.yangyingming.com/article/406&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2018 年 3 月份阅读记录&lt;br&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 年 2 月份阅读记录</title>
    <link href="https://windcode.github.io/2018/03/18/2018%20%E5%B9%B4%202%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2018/03/18/2018 年 2 月份阅读记录/</id>
    <published>2018-03-17T20:56:36.490Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《地海传奇1：地海巫师》"><a href="#《地海传奇1：地海巫师》" class="headerlink" title="《地海传奇1：地海巫师》"></a>《地海传奇1：地海巫师》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/&lt;!---more---&gt;7/2a2a20a1-9edf-4052-bf57-5bbfc01fa467.png" alt=""></p><p>标签：奇幻、名著</p><p>作为《地海传奇》系列的第一部，《地海巫师》讲述的是主角格得年少时候在巫师学院的求学经历以及和黑影搏斗的故事。厄休拉大师的文笔细腻，行文优美，《地海巫师》既是一部奇幻小说，也是一部少年心灵成长史，可以说是老少咸宜。</p><p>看这个系列的原由是看了熊猫君（读客出版社的微信公众号）的推荐，其实我一直在寻找正统的奇幻小说，看过推荐之后，感觉《地海传奇》像是我的菜，于是买来一读，看完第一部，应该说感觉还不错，至少没让我失望。获得过星云奖与雨果奖的大师出品，质量果然有保证。</p><p>另外墙裂推荐熊猫君的公众号，优质推荐图书，推荐的图书很合我的口味，是我目前看到的最好的荐书公众号。微信搜索公众号“每晚推一本好书的熊猫君”可以添加。个人推荐，不是打广告哈 = =。</p><p>推荐指数：★★★</p><h2 id="《地海传奇2：地海古墓》"><a href="#《地海传奇2：地海古墓》" class="headerlink" title="《地海传奇2：地海古墓》"></a>《地海传奇2：地海古墓》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/63cd2c99-3375-4a31-93d7-ee7aa430ff6f.png" alt=""></p><p>标签：奇幻、名著</p><p>《地海传奇》的第二部《地海古墓》讲述的是青年格得为了找寻失落的和平之环，独身来到峨团古墓探索，同时帮助古墓女祭司恬娜走出阴暗陵墓与封闭自我，寻得自由的故事。</p><p>这一部的看点在于格得和古墓祭祀恬娜接触，并引导她逐渐解放自我的过程，这中间格得的稳重和责任感，恬娜不甘自我封闭的倔强性格，都在剧情发展的过程中展现的十分充分。</p><p>推荐指数：★★★</p><h2 id="《地海传奇3：地海彼岸》"><a href="#《地海传奇3：地海彼岸》" class="headerlink" title="《地海传奇3：地海彼岸》"></a>《地海传奇3：地海彼岸》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/ee81fce8-e3d8-4a1c-a3f1-1634fcc9ad51.png" alt=""></p><p>标签：奇幻、名著</p><p>《地海传奇》的第三部《地海彼岸》讲述的是中年格得已经成为大法师，带领英拉德王子追寻并击败黑暗法师，并辅佐他成为地海之王的故事。</p><p>读到第三部，发现厄休拉大师的文笔比较慢热，《地海传奇》中没有那么多热血剧情，文字沉静如水，作者以缓慢优雅的笔触传达给读者一份宁静的智慧，这颇有一分“道”的精神。</p><p>（厄休拉曾花30年翻译《道德经》，深谙道家文化）</p><p>推荐指数：★★★</p><h2 id="《地海传奇4：地海孤儿》"><a href="#《地海传奇4：地海孤儿》" class="headerlink" title="《地海传奇4：地海孤儿》"></a>《地海传奇4：地海孤儿》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d3c473dc-b517-4092-9d58-ba6ee9046bcc.png" alt=""></p><p>标签：奇幻、名著</p><p>《地海传奇》的第四部《地海孤儿》紧跟第三部的剧情，在大法师格得击败黑暗法师，恢复自然界平衡之后，丧失了全部法力，回到家乡弓忒岛归隐，并重新找回和恬娜的感情。地海孤儿是指恬娜收养的一个小孩，童年时惨遭虐待，幸而最终找到爱她的父母。</p><p>这一部换了译者，读起来十分不通顺，另外心理描写过多，剧情拖沓，前期差点读不下去。格得在这一部中失去法力，却甘于成为一名普通人，这大概是他人格中伟大的地方。而也只有他失去法力之时，才能回到恬娜身边。正所谓能力越大，责任越大，法力充盈之时，心系天下，解救苍生，失去法力，也甘于平静，这便是格得的“道”。</p><p>到第四部为止，大法师格得的故事便讲完了，余下两部讲述的是地海其它地方发生的故事，我会继续读下去的。</p><p>推荐指数：★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/405" target="_blank" rel="noopener">2018 年 2 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《地海传奇1：地海巫师》&quot;&gt;&lt;a href=&quot;#《地海传奇1：地海巫师》&quot; class=&quot;headerlink&quot; title=&quot;《地海传奇1：地海巫师》&quot;&gt;&lt;/a&gt;《地海传奇1：地海巫师》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 年 1 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/12/27/2018%20%E5%B9%B4%201%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/12/27/2018 年 1 月份阅读记录/</id>
    <published>2017-12-27T05:54:50.139Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《编码宝典-1》"><a href="#《编码宝典-1》" class="headerlink" title="《编码宝典 1》"></a>《编码宝典 1》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/a9&lt;!---more---&gt;42b948-2b1f-48f0-a225-dc9d984542ba.png" alt=""></p><p>标签：赛博朋克、Geek 经典</p><p>初看到这部小说的书名，你可能会以为是三流的编程教材，实际上它是近20年前的一部科幻小说。作者是美国科幻大师、赛博朋克代表人物尼尔 · 斯蒂芬森，这部小说长达一千页，将近100万字，可以说是浩繁卷轶。小说以二战期间的密码破译战争为中心线索，书写了一部跨越时空的信息流动发展史，被誉为 IT 界的「Geek 圣经」。</p><p>几年前就开始关注这部小说，被其充斥的极客气息所吸引，于是上网找了一番，但发现只有英文版本。今年无意中发现它已经出了中文版，一套三册，刚刚发行，于是没有犹豫就买了回来。</p><p>小说围绕着“编码”来讲述故事，编码和计算机密切相关，在本书中的含义是对信息的加密和解密。本书描写了两拨假想的密码破译高手，第一拨活跃于二战期间，包括大名鼎鼎的阿兰·图灵；第二拨活跃于20世纪90年代，他们建立了地下数据港，最终目的是帮助那些可能成为种族灭绝目标的群体自卫求生存。</p><p>我感兴趣的是书中的故事包括了一些真实的历史人物以及历史事件，比如二战时期图灵破解恩格玛机，小说巧妙的把虚拟的故事和真实历史结合在了一起。另外围绕着加密解密的故事剧情也让人感到极客感爆棚，作者在数学、密码学等领域都有涉猎，所以书中有的时候还会放一两个图表公式，让人一脸懵逼。</p><p>其实这套书我看起来十分费劲，有很长一段时间我完全不知道作者在讲什么，剧情零碎，语言晦涩，阅读体验其实有点糟糕。能啃下这套书来，还是需要一定的耐心。</p><p>推荐指数：★★☆</p><h2 id="《克苏鲁神话-Ⅱ》"><a href="#《克苏鲁神话-Ⅱ》" class="headerlink" title="《克苏鲁神话 Ⅱ》"></a>《克苏鲁神话 Ⅱ》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/6a795206-02c6-42f2-b0ea-3501b1ef7837.png" alt=""></p><p>标签：克苏鲁神话</p><p>姚向辉老师出的这个《克苏鲁神话》系列我自从看过第一本之后便十分有好感，精致的装帧，考究的封面、内页和排版，看得出编辑团队在这上面花了心思，没想到时隔一年，第二部也让人惊喜的出版了。</p><p>第二部沿袭了上一部的装帧和排版风格，同样让人爱不释手，对于一名纸质书爱好者来说，阅读这样的一本书是一种很棒的体验。</p><p>算算去年差不多也是这个时候在看第一部，那个时候还写过一篇稍长的读后感（这里=&gt;<a href="http://www.yangyingming.com/article/356/" target="_blank" rel="noopener">谈谈《克苏鲁神话》</a>），小小总结了一下克苏鲁神话。</p><p>吹完了这本书的包装，下面谈谈《克苏鲁神话 Ⅱ》的内容。</p><p>《克苏鲁神话》1/2收录的都是克苏鲁神话的创造者 <strong>洛夫克拉夫特</strong>（英文名 Lovecraft，江湖人称爱手艺大神）的作品，可谓是血统纯正的克苏鲁神话文集。其中《Ⅱ》收录有《疯狂山脉》、《墙中之鼠》、《印斯茅斯小镇的阴霾》、《超越时间之影》，虽然相比第一部收录的文章少了一半，但都是爱手艺大神中短篇小说中的名篇。这些小说继承了经典的洛式恐怖小说风格。</p><p>《疯狂山脉》是爱手艺大神的巅峰之作，篇幅占全书的将近一半，讲述的一支科考小队在南极一条神秘山脉中惊险奇诡的遭遇。小说前期叙事十分细致，稍显繁琐，到后期逐渐进入佳境，神秘事件的出现开始吸引读者阅读，到最后的描写略显晦涩，需要脑补才能体会到文中想表达的诡异画面。总的来说，如果想体验克苏鲁风格的小说，这部中篇应该是必读之选。</p><p>《墙中之鼠》是一个短篇，短小精悍，文末有小反转，值得一读。</p><p>《印斯茅斯小镇的阴霾》，这篇中短文也是爱手艺大神的经典之作，在读这篇小说的时候，透过文字都能体会到印斯茅斯小镇阴暗、潮湿、粘腻、非人的可憎气息，仿佛和主角一样身临其境，作为外来人体会着一场惊险紧张的探索之旅。小说带入感很强，个人较为喜欢，推荐一读。另外这部小说的翻拍电影《达贡》也不错，可以体会一把印斯茅斯小镇的真实阴霾。</p><p>《超越时间之影》，这部中短文颇有科幻小说的感觉，主角的身体被占据，思想却被替换到入侵者的家乡，在那里感受到伟大种族的神秘世界的一切，这是一场身心异位的奇特之旅。文中对伟大种族以及它们世界的描写让人着迷，很佩服爱手艺大神深刻的刻画和奇特的思想，这是在现在的一些科幻小说里面看不到的别样想象力。本文中的科幻色彩个人十分喜欢，推荐一读。</p><p>推荐指数：★★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/404" target="_blank" rel="noopener">2017 年 1 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《编码宝典-1》&quot;&gt;&lt;a href=&quot;#《编码宝典-1》&quot; class=&quot;headerlink&quot; title=&quot;《编码宝典 1》&quot;&gt;&lt;/a&gt;《编码宝典 1》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/mark
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 年 12 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/12/12/2017%20%E5%B9%B4%2012%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/12/12/2017 年 12 月份阅读记录/</id>
    <published>2017-12-12T05:44:25.974Z</published>
    <updated>2018-05-13T14:25:51.986Z</updated>
    
    <content type="html"><![CDATA[<p>##《美丽新世界》<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/e5b877&lt;!---more---&gt;1d-d358-435b-ad58-4af37d5d4a8c.png" alt=""></p><p><strong>标签</strong>：反乌托邦、名著</p><p>这部小说是世界反乌托邦三部曲其中之一，7月份刚刚刷完另外一部大名鼎鼎的《1984》。文风上来说，个人感觉《美丽新世界》比起《1984》更加易读，《1984》读起来总有种晦涩的感觉。其次，我的一位朋友说过，《美丽新世界》中描述的“新世界”，比起《1984》中的更有可能实现，我在读完此书后，深有同感。《美丽新世界》中描述的控制民众的科技并不难以实现：人为的控制生育，严格限制胚胎的生长，在某一阶段注入毒药，使孩子们的智商和身体从开始就产生分化；婴儿时期每天播放等级观念和道德意识，扎根潜意识，使其长大后能安于自己的阶级；社会上主流的道德意识是“人人为我，我为人人”，每个人都是螺丝钉，每个人都不能缺少，实际上每个人都没有自我；生理上有“苏摩”可以带来快乐，烦恼了来一片，任何忧愁都不在，且没有副作用；“新世界”中每天都是狂欢，每个人都在消耗自己多余的精力，每个人都很“幸福”，到处都充斥着“娱乐至死”的气息。</p><p>以上描述看起来很美好，但这是一本“反乌托邦”类的小说，是一部“警示录”。很显然，这样的未来是我们要抵抗的。但真正身处这样世界的人们，却有什么要反抗的？为什么要反抗？我想这才是“美丽新世界”最让人毛骨悚然的预言……</p><p>以上是我的个人感受，对这部小说权威的剖析应该看作者自己写的《重返美丽新世界》，这是在《美丽新世界》出版二十多年后，作者亲自写成的社会学论述。有人说，阿道司·赫胥黎对人类社会的认知领先现代50年，我不知是否真是这样，但读过他的《重返美丽新世界》，其中的见解的确精辟独到，感悟颇多，值得仔细拜读。</p><p>总的来说，《美丽新世界》十分建议一读，如果可以，在读完《一九八四》再来读这部小说，效果会更好。</p><p><strong>推荐指数</strong>：★★★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/403" target="_blank" rel="noopener">2017 年 12 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##《美丽新世界》&lt;br&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/e5b877
&amp;lt;!---more---&amp;gt;
1d-d358-435b-ad58-4af37d5d4a8c.png&quot; al
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Django 自定义装饰器进行登录访问限制</title>
    <link href="https://windcode.github.io/2017/12/02/Django%20%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/"/>
    <id>https://windcode.github.io/2017/12/02/Django 自定义装饰器进行登录访问限制/</id>
    <published>2017-12-02T05:43:53.919Z</published>
    <updated>2018-05-13T14:25:51.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在设计网站用户系统的时候，往往需要进行登录访问限制，比如说用户还没有登录的时候，有些网页是不能访问的。</p><p>最简单粗暴的办法是，在每个页面的函数最开始加一个 <strong>登录验证函数</strong>，检查当前用户登录状态：如果已经登陆过，那么继续往下执行；如果用户还没登录，对不起，出门左转到登录页。</p><p>在 python 中有个优雅的解决办法——使用 <strong>装饰器</strong>。Django 中有提供使用装饰器进行登录访问限制的方法，详情可见 <a href="http://blog.51cto.com/alsww/1732435" target="_blank" rel="noopener">django实现用户登陆访问限制@login_required</a>，如果对自己实现这套机制感兴趣的童靴，可以继续往下看。<br><a id="more"></a></p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>首先简单介绍一下装饰器，装饰器相当于在一个函数外面又套了一层函数，将原函数集成到一段新的代码中，执行的时候直接运行外面这层函数，这样做的优点是可以动态扩展函数的功能。</p><p>装饰器在 python 中的用法十分简单，外层函数放在原函数前，加@表示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@work</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p><h2 id="将装饰器用于登录验证"><a href="#将装饰器用于登录验证" class="headerlink" title="将装饰器用于登录验证"></a>将装饰器用于登录验证</h2><p>上节中可以看出，装饰器的使用十分简单和优雅。在用户系统中，我们可以把 <strong>登录验证函数</strong> 作为装饰器放在每一个页面的函数前面。</p><p>首先 <strong>定义装饰器</strong>，装饰器其实也是一个函数，只不过 <strong>它把一个函数作为参数传进来，返回了另一个替换函数</strong>。在这里装饰器的作用是检查登录状态，如果已经登录，运行原函数，如果未登录，跳转到登录页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_login_required</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">'''自定义 登录验证 装饰器'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_login_status</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="string">'''检查登录状态'''</span></span><br><span class="line">        <span class="keyword">if</span> request.session.has_key(<span class="string">'user_id'</span>):</span><br><span class="line">            <span class="comment"># 当前有用户登录，正常跳转</span></span><br><span class="line">            <span class="keyword">return</span> func(request)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前没有用户登录，跳转到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/login'</span>)</span><br><span class="line">    <span class="keyword">return</span> check_login_status</span><br></pre></td></tr></table></figure><p>使用装饰器就简单了，把装饰器函数加到需要访问限制的页面函数之前即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@my_login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''主页'''</span></span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br></pre></td></tr></table></figure><p>如此，在渲染主页之前，需要先进入装饰器 <code>my_login_required</code> 中验证登录状态，如果已经登录，才可以访问主页，否则，跳转到登录页面。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>简单 12 步理解 Python 装饰器<br><a href="http://python.jobbole.com/85056/" target="_blank" rel="noopener">http://python.jobbole.com/85056/</a></p></li><li><p>django实现用户登陆访问限制@login_required<br><a href="http://blog.51cto.com/alsww/1732435" target="_blank" rel="noopener">http://blog.51cto.com/alsww/1732435</a></p></li><li><p>COOKIE和SESSION有什么区别？<br><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="noopener">https://www.zhihu.com/question/19786827</a></p></li><li><p>04.Django实现完整登录系统的两种方法（cookie and session）<br><a href="http://blog.csdn.net/gamer_gyt/article/details/50335637" target="_blank" rel="noopener">http://blog.csdn.net/gamer_gyt/article/details/50335637</a></p></li><li><p>浅谈django中的认证与登录<br><a href="http://www.jb51.net/article/96110.htm" target="_blank" rel="noopener">http://www.jb51.net/article/96110.htm</a></p></li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/402" target="_blank" rel="noopener">Django 自定义装饰器进行登录访问限制</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们在设计网站用户系统的时候，往往需要进行登录访问限制，比如说用户还没有登录的时候，有些网页是不能访问的。&lt;/p&gt;
&lt;p&gt;最简单粗暴的办法是，在每个页面的函数最开始加一个 &lt;strong&gt;登录验证函数&lt;/strong&gt;，检查当前用户登录状态：如果已经登陆过，那么继续往下执行；如果用户还没登录，对不起，出门左转到登录页。&lt;/p&gt;
&lt;p&gt;在 python 中有个优雅的解决办法——使用 &lt;strong&gt;装饰器&lt;/strong&gt;。Django 中有提供使用装饰器进行登录访问限制的方法，详情可见 &lt;a href=&quot;http://blog.51cto.com/alsww/1732435&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;django实现用户登陆访问限制@login_required&lt;/a&gt;，如果对自己实现这套机制感兴趣的童靴，可以继续往下看。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 年 11 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/11/05/2017%20%E5%B9%B4%2011%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/11/05/2017 年 11 月份阅读记录/</id>
    <published>2017-11-05T05:56:57.059Z</published>
    <updated>2018-05-13T14:25:51.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《洛丽塔》"><a href="#《洛丽塔》" class="headerlink" title="《洛丽塔》"></a>《洛丽塔》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/3a05148&lt;!---more---&gt;f-2d30-46c8-9c57-776d38d452cf.png" alt=""></p><p><strong>标签</strong>：名著</p><p>作为一个萝莉控（滑稽），这本书一直在我的阅读清单里。</p><p>可能是翻译的原因，《洛丽塔》没有传言的辞藻那么优美，或许读原版可能好一些。书中片段繁多琐碎，以主角为第一视角的心理描写很多。关于洛丽塔本身，笔墨却很少，仿佛亨伯特爱上的只是恋童这种感觉本身。</p><p>这部小说是一部悲剧，是一部讲述欲望所催生的愚蠢所导致的悲剧。欲望一旦点燃，便会将人烧的稀里糊涂，从而变得胆大妄为。书中主角亨伯特便是在这样的心理诱导下，一步一步走入自我毁灭的深渊。而洛丽塔，则是他欲望燃烧下的陪葬品，他毁了自己，同时也毁了洛丽塔一家。</p><p>亨伯特的恋童癖，源于童年时他真正的初恋，那个天真无邪、拥有纯真理想的女孩，他们的爱恋像闪电般来临，接踵而至的是烈火般的热恋和急转直下的离别和死亡。洛丽塔和他的初恋除了一样拥有青春诱人的外表，其他则截然相反。洛丽塔现实、任性，清纯的外表下是一颗粗俗的心。但她勾起了中年亨伯特的邪念，从此便开始了《洛丽塔》真正的故事，旅行、诱骗、放纵、怀疑、逃离，一场引入地狱的堕落之路，一场逐渐抛却灵魂的欲望之旅，引亨伯特神智昏迷，却离内心的救赎越来越近。当年旅行末尾洛丽塔逃离的三年后，一封来信招他流离的身躯重新来到她身边，曾经天使般的“洛丽塔”却已为人妇，她的丈夫则粗鄙不堪。邀她离开却得到毫不犹豫的拒绝，他发现洛丽塔对过去的时光没有半分留念。内心绝望的亨伯特寻到当年引诱洛丽塔离开的男人，开枪射杀，这是他对那场不伦之恋最后的交代。小说最后，亨伯特死于狱中，同年，洛丽塔死于难产。悲剧落幕。</p><p>《洛》的悲剧之处，正如小说以亨伯特为第一视角的描写方式，书中大多是亨伯特的自说自话，关于洛丽塔的心理，片言未提。最后通过洛丽塔的回答，亨伯特才无法继续自我欺骗，因为洛丽塔根本没有爱过他，一丁点也没有。</p><p>这是一个恋童癖自我追寻、抛弃和救赎的故事。</p><p>（是不是每个女孩都曾是红楼梦中的闺中女子，是不是每个洛丽塔都会宿命般的变得世俗？）</p><p><strong>推荐指数</strong>：★★★★</p><h2 id="《三岔口》"><a href="#《三岔口》" class="headerlink" title="《三岔口》"></a>《三岔口》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d246396e-4c90-46f3-b772-91260de535c6.png" alt=""></p><p><strong>标签</strong>：周德东、恐怖小说</p><p>最近读了不少周德东的小说，算是给平淡的生活加点料。</p><p>周德东，被誉为“中国的斯蒂芬金”，是国内知名恐怖小说作家。每当看到周德东的名字，总让我和“恐怖”联系在一起。是的，遥远的记忆里，曾经看过他的《保姆》，那种土生土长的中国式恐惧让人不寒而栗。他的恐怖故事和我们平时的生活息息相关，写的十分接地气，我想只有这样的恐怖才能深入人心。</p><p>《三岔口》是周德东不失水准的一部小说，套中套，诡中诡，既写出了灵异，也写到了人性的黑暗和贪婪。网上有不少关于情节的解读，看看也是很有意思，不过也没必要深究。</p><p>想看中国式的恐怖小说，周德东的作品值得一读。</p><p>另外，艾宝良播音的周德东有声小说，气氛迷人，曾经风靡午夜电台，至今仍是经典，耳朵无聊的童靴可以听听看。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《周德东中短篇小说自选集》"><a href="#《周德东中短篇小说自选集》" class="headerlink" title="《周德东中短篇小说自选集》"></a>《周德东中短篇小说自选集》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/50a6ae5c-9552-45f7-93a4-8919dc4d1a45.png" alt=""></p><p><strong>标签</strong>：周德东、恐怖小说</p><p>这是一部周德东的小说集，收集了许多周德东中短篇小说，对他感兴趣的小伙伴可以看个过瘾。推荐的篇目有《保姆》、《第N种复仇的方法》、《J号楼保安》。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/401" target="_blank" rel="noopener">2017 年 11 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《洛丽塔》&quot;&gt;&lt;a href=&quot;#《洛丽塔》&quot; class=&quot;headerlink&quot; title=&quot;《洛丽塔》&quot;&gt;&lt;/a&gt;《洛丽塔》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个 mui 底部选择卡切换的简化实现方案</title>
    <link href="https://windcode.github.io/2017/10/20/%E4%B8%80%E4%B8%AA%20mui%20%E5%BA%95%E9%83%A8%E9%80%89%E6%8B%A9%E5%8D%A1%E5%88%87%E6%8D%A2%E7%9A%84%E7%AE%80%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://windcode.github.io/2017/10/20/一个 mui 底部选择卡切换的简化实现方案/</id>
    <published>2017-10-20T06:06:59.375Z</published>
    <updated>2018-05-13T14:25:51.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上有不少底部选择卡切换的解决方案，看了官方的和网上的资料之后做了一些简化。</p><p>顶部 和 底部选择卡：</p><p><img src="ht&lt;!---more---&gt;tp://yangyingming.com/uploads/markdownx/2017/7/559b15fe-8241-4c21-b445-7b07c4742a33.png" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这部分是 index.html 的主要代码，我将 index.html 作为主页面，然后创建他的三个子页面。主页面只包含网页基本骨架，比如顶部和底部选择卡。代表三个选择卡的子页面显示具体内容。</p><p><strong>具体原理</strong> ：在打开 app 时，会首先加载 index.html 页面，运行到 js 代码时，同时创建好三个选择卡的页面，但是刚开始只显示首页的选择卡，隐藏另外两个选择卡。同时绑定选择卡的点击事件，如果触发了切换操作，那么隐藏当前页面，显示触发后的页面。</p><p>首先是 <strong>HTML 代码部分</strong>，创建了 <strong>头部</strong> 和 <strong>底部选择栏</strong>，底部选择栏包含三个选择卡：首页（home.html）、交流（chat.html）、设置（setting.html）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-nav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"mui-title"</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--底部选择栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-tab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item mui-active"</span> <span class="attr">href</span>=<span class="string">"home.html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">href</span>=<span class="string">"chat.html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-email"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>交流<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-tab-item"</span> <span class="attr">href</span>=<span class="string">"setting.html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-gear"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接下来是 <strong>JavaScript 代码部分</strong>，完成的主要功能是创建子页面，绑定点击事件进行切换。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  //mui插件初始化</span></span><br><span class="line"><span class="undefined">    mui.init(&#123;</span></span><br><span class="line"><span class="undefined">    swipeBack: true//启动右滑关闭功能</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    //所有选择卡</span></span><br><span class="line"><span class="undefined">    var subpages = ['home.html','chat.html', 'setting.html'];</span></span><br><span class="line"><span class="undefined">    var subpage_style = &#123;</span></span><br><span class="line"><span class="undefined">    top: '45px',  </span></span><br><span class="line"><span class="undefined">    bottom: '51px'  </span></span><br><span class="line"><span class="undefined">&#125;; </span></span><br><span class="line"><span class="undefined">//当前显示选择卡</span></span><br><span class="line"><span class="undefined">var activeTab = subpages[0];</span></span><br><span class="line"><span class="undefined">    //创建子页面，显示首页选择卡，隐藏其余页面</span></span><br><span class="line"><span class="undefined">    mui.plusReady(function()&#123;</span></span><br><span class="line"><span class="undefined">    var self = plus.webview.currentWebview();</span></span><br><span class="line"><span class="undefined">    for (var i = 0; i &lt; subpages.length; i++)&#123;</span></span><br><span class="line"><span class="undefined">    var sub = plus.webview.create(subpages[i],subpages[i],subpage_style);</span></span><br><span class="line"><span class="undefined">    if (i &gt;0)&#123;//隐藏其他页面</span></span><br><span class="line"><span class="undefined">    sub.hide(); </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    self.append(sub); //加入子页面</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    //选择卡点击事件</span></span><br><span class="line"><span class="undefined">    mui('.mui-bar-tab').on('tap','a',function(e)&#123;</span></span><br><span class="line"><span class="undefined">    var targetTab = this.getAttribute('href');</span></span><br><span class="line"><span class="undefined">    if (targetTab == activeTab)</span></span><br><span class="line"><span class="undefined">    return ;</span></span><br><span class="line"><span class="undefined">    //更换标题</span></span><br><span class="line"><span class="undefined">var title = document.getElementById('title');</span></span><br><span class="line"><span class="undefined">    title.innerHTML = this.querySelector('.mui-tab-label').innerHTML;</span></span><br><span class="line"><span class="undefined">    //显示目标选择卡</span></span><br><span class="line"><span class="undefined">    plus.webview.show(targetTab);</span></span><br><span class="line"><span class="undefined">    //隐藏原选择卡</span></span><br><span class="line"><span class="undefined">    plus.webview.hide(activeTab);</span></span><br><span class="line"><span class="undefined">    //更改当前活跃选择卡</span></span><br><span class="line"><span class="undefined">    activeTab = targetTab;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Hbuilder–mui–webview切换子页面问题<br><a href="http://blog.csdn.net/zhuyu19911016520/article/details/70270731" target="_blank" rel="noopener">http://blog.csdn.net/zhuyu19911016520/article/details/70270731</a></li><li>HBuilder mui入门教程——（2）含tab选项卡的首页<br><a href="http://blog.csdn.net/anjingshen/article/details/74138717" target="_blank" rel="noopener">http://blog.csdn.net/anjingshen/article/details/74138717</a></li></ul><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/400" target="_blank" rel="noopener">一个 mui 底部选择卡切换问题的简单解决方案</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;网上有不少底部选择卡切换的解决方案，看了官方的和网上的资料之后做了一些简化。&lt;/p&gt;
&lt;p&gt;顶部 和 底部选择卡：&lt;/p&gt;
&lt;p&gt;&lt;img 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Prolog 练习和笔记</title>
    <link href="https://windcode.github.io/2017/10/20/Prolog%20%E7%BB%83%E4%B9%A0%E5%92%8C%E7%AC%94%E8%AE%B0/"/>
    <id>https://windcode.github.io/2017/10/20/Prolog 练习和笔记/</id>
    <published>2017-10-19T21:07:19.238Z</published>
    <updated>2018-05-13T14:25:51.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Prolog 是一种主要用于人工智能领域的编程语言，编程体验和自然语言较为接近。</p><p>前段时间接触了一下，下面记录一下学习的笔记，主要是一个 prolog 和 C++ 混合编程的例子。</p><p>我把示例代码放到了 GitHub 上，链接在这里：<a href="https://github.com/windcode/prolog-demo" target="_blank" rel="noopener">windcode/prolog-demo</a></p><p>另外还有官方文档的链接：<a href="http://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/pldoc.html%27" target="_blank" rel="noopener">官方文档</a>)<br><a id="more"></a></p><h2 id="Prolog-使用笔记"><a href="#Prolog-使用笔记" class="headerlink" title="Prolog 使用笔记"></a>Prolog 使用笔记</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载 Windows版本 prolog</p><p>下载页面：<a href="http://www.swi-prolog.org/download/stable" target="_blank" rel="noopener">http://www.swi-prolog.org/download/stable</a></p><p>我选择了 <strong><a href="http://www.swi-prolog.org/download/stable/bin/swipl-w64-760-rc2.exe" target="_blank" rel="noopener">SWI-Prolog 7.6.0-rc2 for Microsoft Windows (64 bit)</a></strong> 下载安装</p><p>安装后，启动 <strong>C:\Program Files\swipl\bin\swipl-win.exe</strong>，可以打开 prolog 控制台。</p><h3 id="打开现成的-Prolog-程序"><a href="#打开现成的-Prolog-程序" class="headerlink" title="打开现成的 Prolog 程序"></a>打开现成的 Prolog 程序</h3><p>比如，<a href="https://github.com/SWI-Prolog/packages-cpp" target="_blank" rel="noopener">Prolog 的 C++ 开发包</a> 里有一个示例程序 <strong>likes.pl</strong></p><p>克隆该项目到本地<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SWI-Prolog/packages-cpp.git</span><br></pre></td></tr></table></figure></p><p>在目录中可以找到 likes.pl 文件，双击打开</p><p>在弹出的控制台中输入 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">likes(X,Y).</span><br></pre></td></tr></table></figure><p>然后会输出，所有 X 喜欢 Y 的关系</p><h3 id="编写-prolog-程序"><a href="#编写-prolog-程序" class="headerlink" title="编写 prolog 程序"></a>编写 prolog 程序</h3><p>首先在桌面创建一个 Prolog 文件 <strong>ex.pl</strong></p><p>然后在 prolog 控制台中点击 <strong>File –&gt; Edit</strong>，选择刚刚创建的 <strong>ex.pl</strong></p><p>然后我们便可以编辑 <strong>ex.pl</strong> 文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">love(a,b).</span><br><span class="line">love(b,c).</span><br><span class="line">love(c,a).</span><br><span class="line"></span><br><span class="line">sanjiaolian(X,Y,Z) :-</span><br><span class="line">    love(X,Y),</span><br><span class="line">    love(Y,Z),</span><br><span class="line">    love(Z,X).</span><br></pre></td></tr></table></figure></p><p>按住 <strong>ctrl+s</strong> 保存</p><p>双击刚刚编辑过的 ex.pl 文件</p><p>在弹出的控制台中输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sanjiaolian(a,b,c)</span><br></pre></td></tr></table></figure></p><p>正确输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure></p><p>我们<strong>成功判断了 a，b，c 三个人是否为三角恋关系</strong></p><h3 id="packages-cpp-likes-demo-安装测试"><a href="#packages-cpp-likes-demo-安装测试" class="headerlink" title="packages-cpp likes demo 安装测试"></a><a href="https://github.com/SWI-Prolog/packages-cpp" target="_blank" rel="noopener">packages-cpp</a> likes demo 安装测试</h3><p><strong>注意</strong>：安装需在 linux 环境、默认已经安装 g++ 编译器</p><p><strong>1.安装 swipl</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.swi-prolog.org/download/stable/src/swipl<span class="number">-7.6</span><span class="number">.0</span>.tar.gz</span><br><span class="line">tar zvxf swipl<span class="number">-7.6</span><span class="number">.0</span>.tar.gz</span><br><span class="line">cd swipl<span class="number">-7.6</span><span class="number">.0</span>/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p><strong>2.克隆仓库 packages-cpp，编译 likes.cpp 和 likes.pl</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SWI-Prolog/packages-cpp.git</span><br><span class="line">cd packages-cpp/</span><br><span class="line">swipl-ld -o likes -ld g++ -goal true likes.cpp likes.pl</span><br></pre></td></tr></table></figure></p><p>swipl-ld 参数说明：<br><a href="http://www.swi-prolog.org/pldoc/man?section=plld" target="_blank" rel="noopener">11.5 Linking embedded applications using swipl-ld</a></p><p><strong>3.运行测试</strong><br>输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./likes</span><br></pre></td></tr></table></figure></p><p>输出（提示信息）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: likes x [y] <span class="keyword">or</span> likes -happy</span><br></pre></td></tr></table></figure></p><p>输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./likes -happy</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Happy people:</span><br><span class="line">        mary</span><br><span class="line">        mary</span><br><span class="line">        john</span><br><span class="line">        sue</span><br><span class="line">        paul</span><br><span class="line">        jane</span><br></pre></td></tr></table></figure></p><p>输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./likes mary</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mary likes:</span><br><span class="line">        john</span><br><span class="line">        potplants</span><br><span class="line">        jane</span><br><span class="line">        paul</span><br><span class="line">        Heartbreak High</span><br><span class="line">        sunbathing</span><br></pre></td></tr></table></figure></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/399" target="_blank" rel="noopener">Prolog 练习和笔记</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Prolog 是一种主要用于人工智能领域的编程语言，编程体验和自然语言较为接近。&lt;/p&gt;
&lt;p&gt;前段时间接触了一下，下面记录一下学习的笔记，主要是一个 prolog 和 C++ 混合编程的例子。&lt;/p&gt;
&lt;p&gt;我把示例代码放到了 GitHub 上，链接在这里：&lt;a href=&quot;https://github.com/windcode/prolog-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;windcode/prolog-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外还有官方文档的链接：&lt;a href=&quot;http://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/pldoc.html%27&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 年 10 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/10/13/2017%20%E5%B9%B4%2010%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/10/13/2017 年 10 月份阅读记录/</id>
    <published>2017-10-13T04:16:49.232Z</published>
    <updated>2018-05-13T14:25:51.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《红拂夜奔》"><a href="#《红拂夜奔》" class="headerlink" title="《红拂夜奔》"></a>《红拂夜奔》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/d37181&lt;!---more---&gt;51-5cb0-4684-9564-fdf7e0dadb49.png" alt=""></p><p><strong>标签</strong>：王小波</p><p>王小波的这部小说重新定义了什么是“有趣”。</p><p>在不同的书店里路过这本书好多次——这也是现在读起这部小说的原因——但实际上当初看到这本书书名的时候，心中还真没提起多少兴趣，其实这是一部十分有趣的小说。</p><p>看这部小说的过程，让我重新想起了最开始读书的目的——只是为了有趣。是的，因为拿起的书写的有趣，当时才有继续读下去的欲望。而不知道从什么时候开始，读书的目的变得复杂。我们读书带上了一些功利性，这种选择也是难免的，它往往标志着我们的读书之路走向成熟。虽然如此，但拿起一本有趣的书时，内心仍然欢喜。</p><p>言归正传，关于这部小说，用一句话来概括，就是王小波用“一本正经的胡说八道”的心态借“风尘三侠”的故事写的一部反讽小说。书中的故事不可谓不荒谬，甚至一些描写十分俗气，但是却不由得让人捧腹，甚至让生活在物质、思想日新月异的现代的我们读起来都有开脑洞的感觉。</p><p>读《红拂夜奔》的过程，总让我想起小时候看过的童话故事，他们都有一个共同的特征，就是故事中的“因为所以”的逻辑读起来总是很荒谬。但王小波说“在我看来，这个故事一点也不怪诞，我不过是写了我的生活”。</p><p>想要有趣却被世间无趣灭杀的李靖，无趣、无智、无性的红拂，麻木刻板、固步自封的虬髯公，王小波书中的“风尘三侠”投射了现实生活中的三种人，或许你我身上便有这三人的影子，或许每个人都是虬髯公，想成为李靖，渴望拥有红拂。</p><p>有机会会再读这个故事。</p><p><strong>推荐指数</strong>：★★★☆</p><h2 id="《火星崛起3：晨色之星》"><a href="#《火星崛起3：晨色之星》" class="headerlink" title="《火星崛起3：晨色之星》"></a>《火星崛起3：晨色之星》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/112bcc19-fbc1-46db-9503-b5c7bde77abb.png" alt=""></p><p><strong>标签</strong>：反乌托邦、科幻、热血</p><p>《火星崛起》系列的终章，之所以没有在8月份一口气读完，是因为最终作的中文版在两个月之后也就是10月份才出版。我没在当当上预约，直接在 readfree.me 上下载了电子书就开始看。</p><p>比起前两作，最终作的质量依旧没有下滑，对于一个系列丛书来说，这是难能可贵的，对于一名处女作家来说，这更加难得。</p><p>情节上，本作承接上一作的悬念，主角迎来了“复活”，然后终于带领组织打响了全民反抗金种统治的浪潮，可想而知，这一部作品描绘的场景更加宏大，战争的紧迫感和澎湃的感情相碰撞，共同奏响这场反抗起义的最后一曲。</p><p>总的来说，这个系列的三部小说发挥都很稳，没有质量明显下滑的现象，故事也十分热血有趣，但说不上多么史诗，和那些名作还是有差别的，闲暇时可以一读。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/398" target="_blank" rel="noopener">2017 年 10 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《红拂夜奔》&quot;&gt;&lt;a href=&quot;#《红拂夜奔》&quot; class=&quot;headerlink&quot; title=&quot;《红拂夜奔》&quot;&gt;&lt;/a&gt;《红拂夜奔》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/20
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>购买搬瓦工 VPS 在 ubuntu 16.04 x64 中配置 ss 服务器科学上网</title>
    <link href="https://windcode.github.io/2017/09/15/%E8%B4%AD%E4%B9%B0%E6%90%AC%E7%93%A6%E5%B7%A5%20VPS%20%E5%9C%A8%20ubuntu%2016.04%20x64%20%E4%B8%AD%E9%85%8D%E7%BD%AE%20ss%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://windcode.github.io/2017/09/15/购买搬瓦工 VPS 在 ubuntu 16.04 x64 中配置 ss 服务器科学上网/</id>
    <published>2017-09-15T04:29:43.917Z</published>
    <updated>2018-05-13T14:25:51.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购"><a href="#购" class="headerlink" title="购"></a>购</h2><a id="more"></a><p>买搬瓦工 VPS<br>之所以选择 <a href="https://bwh1.net/" target="_blank" rel="noopener">搬瓦工</a>，只一个原因：便宜。</p><p>阿里云的硅谷机房一个月要 200+ 人民币，搬瓦工上一个月只要 19 人民币（2.99美元），而且官网上不定期的有优惠活动。</p><p>有了国外的云主机，我们就可以在主机上搭建VPN，作为梯子翻墙了。</p><p>搬瓦工中国官网：<a href="http://banwagong.cn/" target="_blank" rel="noopener">http://banwagong.cn/</a></p><p>具体的购买流程可以参考：<a href="http://banwagong.cn/gonglue.html" target="_blank" rel="noopener">新手用户搬瓦工VPS购买图文指导教程</a></p><p>我买了 2.99美元（一个月） 洛杉矶 KVMV3-10G-512M-1T-CA-QNET 型号的主机。</p><p>购买之后可以参考如下博文 <strong>配置搬瓦工 VPS：安装 ubuntu 系统，修改 root 密码</strong>：</p><p><a href="http://blog.csdn.net/win_turn/article/details/51559867" target="_blank" rel="noopener">使用搬瓦工bandwagonhost VPS安装Shadowsocks Server</a></p><h2 id="在-ubuntu-16-04-上配置-ShadowSocks"><a href="#在-ubuntu-16-04-上配置-ShadowSocks" class="headerlink" title="在 ubuntu 16.04 上配置 ShadowSocks"></a>在 ubuntu 16.04 上配置 ShadowSocks</h2><p>运行如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install python-gevent python-pip  </span><br><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure></p><p>创建 ss 配置文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/ss.json</span><br></pre></td></tr></table></figure></p><p>填入如下内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,  </span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8388</span>,  </span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,  </span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"Your Password"</span>,  </span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,  </span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动 ss 服务（<strong>注意：ss 需要用 root 用户启动</strong>）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c ~/ss.json -d start</span><br></pre></td></tr></table></figure></p><p>或者直接创建 <strong>start-ss.sh</strong> 启动脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">nohup ssserver -c ss.json &gt; /etc/null <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure></p><p>关于配置可以参考如下资料：</p><p>ss 服务端：<a href="http://blog.csdn.net/roland_sun/article/details/51279522" target="_blank" rel="noopener">如何在Ubuntu 14.04下安装和配置ShadowSocks服务器</a></p><p>ss 客户端：<a href="http://www.cnblogs.com/Dumblidor/p/5450248.html" target="_blank" rel="noopener">Ubuntu下ss的安装与使用</a></p><h2 id="下载-ss-客户端"><a href="#下载-ss-客户端" class="headerlink" title="下载 ss 客户端"></a>下载 ss 客户端</h2><p>下载安装客户端之后配置好你的 ss 服务器信息就可以用了。</p><p>windows 客户端：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>安卓客户端：<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></p><p>ios 客户端：<a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-iOS/releases</a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/397" target="_blank" rel="noopener">购买搬瓦工 VPS 在 ubuntu 16.04 x64 中配置 ShadowSocks 服务器科学上网（翻墙）</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;购&quot;&gt;&lt;a href=&quot;#购&quot; class=&quot;headerlink&quot; title=&quot;购&quot;&gt;&lt;/a&gt;购&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 年 9 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/09/14/2017%20%E5%B9%B4%209%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/09/14/2017 年 9 月份阅读记录/</id>
    <published>2017-09-14T05:28:25.699Z</published>
    <updated>2018-05-13T14:25:51.974Z</updated>
    
    <content type="html"><![CDATA[<p>##《白鹿原》<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/5eb33110&lt;!---more---&gt;-a9a0-4e91-9e18-be4f637b2925.png" alt=""></p><p><strong>标签</strong>：名著、陈忠实</p><p>自从大学时读完《平凡的世界》之后，就想找本类似的书来看，这个时候《白鹿原》就很自然的跳入我的视线。</p><p>《白鹿原》是由陈忠实先生所作，描绘了陕西的风土民情，和《平凡的世界》对人物心理细腻的刻画比起来，《白鹿原》更像一副广阔的画卷，一副洋洋洒洒描绘了三代人情感纠葛以及世事变迁的长卷，它刻画的粒度更大，所包含的东西也更繁杂，可谓包罗万象、内涵丰富，能从其中品出几分味道，又能品出什么滋味，全看读者的经历和理解。</p><p>我在读完这部小说之后，久久没有动笔写这篇读后感，因为《白鹿原》所传递的信息太多，想告诉我的我却理解不了的东西，也太多。读这部小说的过程，就像在远远看一场上个世纪的皮影戏，看其中人物一个接一个出场，走过属于他们的人生和故事，然后在世界的一个角落，或热闹、或萧瑟的戛然而止，留下读者独自品味和咀嚼他们的一生，留下自己的感悟。</p><blockquote><p>白鹿原上是光明的，也是黑暗的；是真实的，也是魔幻的；是传奇的，也是平凡的。</p></blockquote><p>另外，说说我看到的《白鹿原》的不足之处（个人体会）：</p><p>和《平凡的世界》比起来，《白鹿原》读起来没有足够的代入感。我记得读《平凡》的时候，看到高潮处，可以捧着书，一连读好几个小时，吃饭睡觉的时候也想着拿起来读一段，因为情节实在很吸引人。而《白鹿原》太像一个群像剧，繁多的人物出场，或许使作者的笔力没有足够聚焦在几个人物身上，也没有太多篇幅描写人物的心理变化。这就导致让人总感觉和书中的人物隔着一段距离，无法真切的感受和体会到他们的喜怒哀乐和成长变化。</p><p>不管怎么说，《白鹿原》都是一部不可多得的佳作，好书如佳酿，陈年现酒香。</p><p><strong>推荐指数</strong>：★★★☆</p><h2 id="《图灵传》"><a href="#《图灵传》" class="headerlink" title="《图灵传》"></a>《图灵传》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f8a77897-c0d3-4cd3-b72e-f442911b0cb7.png" alt=""></p><p><strong>标签</strong>：人物传记</p><p>这是一本我早就想读、想入手的个人传记，但无奈书出版太早，现在早已绝版，手上这本《图灵传》还是学校图书馆唯一库存的一本。好在最近这部传记终于再版，内容变动不大，新版分为了上下两册，封面很喜欢。在读完初版书之后一个月，我终于入手了一套自己的《图灵传》。（至于我为什么对这部书这么感兴趣，那还用问吗，祖师爷的权威传记，当然要好好拜读……）</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/950d2256-e050-4f9a-beba-44e0a0f2352f.jpg" alt=""></p><p>8月份看了美剧《天才·爱因斯坦》，讲述的是爱因斯坦一生的成长经历。现在在看《图灵传》的过程中，让我强烈的感受到两人之间的相似——他们都对世界有自己的看法，并对一切抱有天然的好奇。我们成长过程中总会接触一些“理所应当”的事情，而我们往往会想都不想的接受，理由是“大家都是这样认为的”，而图灵、爱因斯坦这类科学家总会对“理所当然”产生质疑，也许会被旁人看做可笑，但正是这种“质疑一切”的精神让他们对人类认知的进步作出极大贡献。</p><p>图灵一生的经历：</p><ul><li>图灵在剑桥大学发表《可计算数》的论文，提出图灵机的概念</li><li>二战期间，图灵参与战争的解密工作，大大提高了英国在战争中的主动权</li><li>战争结束，图灵提出“计算机”的概念</li><li>冯诺依曼参与的项目制造出了世界上第一台通用计算机ENIAC，他意识到1936年图灵提出的《可计算数》的重要性</li><li>同一时期，图灵也在思考“制作一个电子大脑”的事情，后来参与了ACE计算机的制造，ACE的性能比ENIAC更高</li><li>图灵提出“编程”的概念，并投身计算机指令表的编写</li><li>图灵进一步思考“机器智能”的问题，他认为机器在经过不断的“训练”之后，能和人类一样产生智能。</li></ul><p>看到书的尾声的时候，突然发现图灵提出的让机器进行“训练”的思路和现在的“机器学习”思想十分相似。看到这里的时候，我真正意识到图灵的思想到底有多超前，他早年提出的很多设想从那时到今天都在逐渐变成现实。（图灵是不是未来穿越过去的【笑哭】）</p><p>（突然发现图灵、香农和冯·诺依曼是一个时代的人，膜拜那个璀璨的时代）</p><p>个人十分喜欢《图灵传》，所以打了四星。</p><p><strong>推荐指数</strong>：★★★★</p><h2 id="《异乡人》"><a href="#《异乡人》" class="headerlink" title="《异乡人》"></a>《异乡人》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/38adc2fb-5d36-43bc-a0bd-47d0f7438add.png" alt=""></p><p><strong>标签</strong>：加缪、法律文学</p><p>看完《异乡人》，才明白小说封面上那句话——“我知道这世界我无处容身，只是，你凭什么审判我的灵魂？”。</p><p>主角默尔索是一个绝对真实而冷静的人，即使在自己母亲的婚礼上也没有露出丝毫的悲伤，甚至第二天便照常谈情说爱，他的道德观与常人及其不同。以致于不小心杀了人之后，在法庭上被检察官指控人性冷漠、怀有精神杀人的嫌疑。</p><p>主角的冷漠的确让有普世道德观的普通人感到奇特甚至厌恶，检查官在试图使主角信仰上帝失败后，便怀着极大厌恶的主观情绪对主角下达了不公正的判决。主角犯下的案件在后来已经不是法庭上讨论的重点，而变成了对主角人格的议论和指控。主角在法庭上很多次看着法官、律师、检察官评价他怎样怎样，却不能插嘴，他感到很荒谬。主角的罪行其实罪不至死，但最终却被检察官虚无缥缈的说辞而判处死刑，检察官的主观意识影响了法律的公正判决，这正是本书中最想表达的观点。</p><p>其实读这部小说的过程很无聊，起码提不起我的兴趣，以至于明明很薄的一部小说，我却断断续续读了很久。主角的性格让他在法庭上遭受了不公平的判决，小说想表达的现象确实让人深思，我想学法律的童靴读起来会更有共鸣。</p><p><strong>推荐指数</strong>：★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/396" target="_blank" rel="noopener">2017 年 9 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##《白鹿原》&lt;br&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/5eb33110
&amp;lt;!---more---&amp;gt;
-a9a0-4e91-9e18-be4f637b2925.png&quot; alt=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 年 8 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/08/22/2017%20%E5%B9%B4%208%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/08/22/2017 年 8 月份阅读记录/</id>
    <published>2017-08-22T03:23:16.031Z</published>
    <updated>2018-05-13T14:25:51.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《在轮下》"><a href="#《在轮下》" class="headerlink" title="《在轮下》"></a>《在轮下》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/e4c11dd&lt;!---more---&gt;c-06cc-4933-93e5-09c00d2e46b1.png" alt=""></p><p><strong>标签</strong>：教育、黑塞、青春</p><p>黑塞的《在轮下》反映了一名求学青年的悲惨人生，书中展现的高压教育对孩子的摧残，放在当今社会也同样值得让人反思。</p><p>主角汉斯是小镇上最聪明的孩子，成绩优秀且勤奋刻苦，被父亲、校长和神父等一众小镇的长辈寄予厚望，经过艰苦的州试之后，他如愿以偿进入神学院学习。但在神学院却因为用功过度，身心受创，最后因为外界和自身的双重压力，退出神学院，回到家乡后郁郁寡欢，最后悄然了却一生。</p><p>汉斯的故事反映了德国当时落后的教育制度，过度关注教育的成果，而忽视了学生的身心健康，主角便是在这样的茫茫学海中丢失了自己灵魂的一个孩子，他不堪同龄人和长辈们的冷漠和讥讽，最终滚落人生的无情车轮之下，消失于微末。</p><p>作者黑塞是诺贝尔文学奖获得者，书中讲述的故事很大程度上是作者本身的真实写照。他也曾就读于神学院，然后患上抑郁症和神经衰弱，并一度想过自杀。正是这样的经历让他开始思考这种封闭、僵化的教育体制对青少年的影响。</p><p>如果你对体制教育对人的影响感兴趣，可以读一下《在轮下》。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《火星崛起》"><a href="#《火星崛起》" class="headerlink" title="《火星崛起》"></a>《火星崛起》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/2c048245-7363-4d46-9475-e178feeeef90.png" alt=""></p><p><strong>标签</strong>：反乌托邦、科幻、热血</p><p>反乌托邦科幻小说，和《饥饿游戏》、《移动迷宫》比较类似，讲述的是一个火星“斯巴达”反抗高等人种统治的故事。</p><p>这部小说是作者的第一部作品，照目前的势头来看，又成为了最新的畅销书。我也是被“全球共燃”的名头吸引才来读此书。再就是，这本书的封面很酷。</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/41f6f415-9115-480d-8e13-5070e2e0f9bc.png" alt=""></p><p>看过这部小说之后，总的来说，还算没有失望，科幻中掺杂着热血剧情，叙事较为流畅，只不过在小说里，他是主角，并成功掀翻了金种人的统治，带领底层人民翻身当家做主，这中间的故事让人看起来热血沸腾。</p><p>总的来说，这部小说更像一部外国版的网文，热血、简单粗暴，期待拍成电影。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《火星崛起2：黄金之子》"><a href="#《火星崛起2：黄金之子》" class="headerlink" title="《火星崛起2：黄金之子》"></a>《火星崛起2：黄金之子》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/1cc642c7-8095-4176-986f-25239e826e99.png" alt=""></p><p><strong>标签</strong>：反乌托邦、科幻、热血</p><p>《火星崛起》的第二部，比起第一部来说，质量没有下滑，而背景更加宏大，情节也更加跌宕起伏，结尾一个小的反转，让人十分期待最终作。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/395" target="_blank" rel="noopener">2017 年 8 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;《在轮下》&quot;&gt;&lt;a href=&quot;#《在轮下》&quot; class=&quot;headerlink&quot; title=&quot;《在轮下》&quot;&gt;&lt;/a&gt;《在轮下》&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何配置 Sublime Text 3 的 Python 编程环境</title>
    <link href="https://windcode.github.io/2017/08/09/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%20Sublime%20Text%203%20%E7%9A%84%20Python%20%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/"/>
    <id>https://windcode.github.io/2017/08/09/如何配置 Sublime Text 3 的 Python 编程环境/</id>
    <published>2017-08-09T00:46:16.038Z</published>
    <updated>2018-05-13T14:25:51.974Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/335b2f4d-65bd-4454-a016-a6ef8d571907.jpg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用 IDLE 写 python 习惯了，还是发现它有些简陋，于是准备转向 Sublime 的怀抱。（我比较喜欢轻量级的 IDE）</p><p>为了方便用 Sublime 写 python 代码，我搜集了网上的一些资料，选出了常用 Python 编程的3个插件，整理出一篇轻量级的配置教程。<br><a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="1-生成包管理（Package-Control）界面："><a href="#1-生成包管理（Package-Control）界面：" class="headerlink" title="1. 生成包管理（Package Control）界面："></a>1. 生成包管理（Package Control）界面：</h4><p>View &gt; Show Console 或者按住快捷键： <figure class="highlight plain"><figcaption><span>+ ` ``` 调出 sublime 的命令行，然后在最下方的输入条中粘贴以下代码，回车，等待 Package Control 安装结束，随后重启Sublime。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```python</span><br><span class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure></p><p>如果在 <strong>Perferences -&gt; package settings</strong> 中看到 <strong>package control</strong> 这一项，代表包管理器（Package Control）安装成功。</p><h4 id="2-插件安装方法："><a href="#2-插件安装方法：" class="headerlink" title="2. 插件安装方法："></a>2. 插件安装方法：</h4><p>打开 <strong>Perferences -&gt; package control</strong>，输入 <strong>install Package</strong>，回车。</p><p>或者，按住快捷键 <strong>ctrl+shift+p</strong>，在弹出的搜索框中输入 <strong>Package Control: install Package</strong>，回车。</p><p>以上两个方法都可以打开插件搜索框，输入要安装的插件，直接回车，Sublime 会自动将插件安装好。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cnblogs.com/RunForLove/p/5133824.html" target="_blank" rel="noopener">Sublime搭建Python开发环境</a></p><h4 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3. 安装插件"></a>3. 安装插件</h4><p>要安装的插件有三个：<strong>SublimeREPL、SublimeCodeIntel、SideBarEnhancements</strong>。</p><p><strong>SublimeREPL</strong> 可以在 Sublime 中直接运行 python 代码。</p><p><strong>SublimeCodeIntel</strong> 会自动补全 python 代码。</p><p><strong>SideBarEnhancements</strong> 是侧边栏，显示工作空间。</p><p>参考第二步的方法安装以上三个插件。</p><p>下面分别介绍三个插件的单独设置：</p><h2 id="SublimeREPL-python-运行调试插件"><a href="#SublimeREPL-python-运行调试插件" class="headerlink" title="SublimeREPL - python 运行调试插件"></a>SublimeREPL - python 运行调试插件</h2><p>绑定快捷键：</p><p><strong>Preferences–&gt;Key Bindings User</strong> 添加以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="string">"keys"</span>: [<span class="string">"f5"</span>],//这是自己设的快捷键　</span><br><span class="line">            <span class="string">"command"</span>: <span class="string">"run_existing_window_command"</span>, </span><br><span class="line">            <span class="string">"args"</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"repl_python_run"</span>,</span><br><span class="line">                <span class="string">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果提示没找到，重启下 Sublime。</p><h4 id="参考资料：-1"><a href="#参考资料：-1" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://blog.csdn.net/example440982/article/details/52080585" target="_blank" rel="noopener">Sublime Text3设置SublimeREPL快捷键的方法（Python）</a></p><h2 id="SublimeCodeIntel-代码补全插件"><a href="#SublimeCodeIntel-代码补全插件" class="headerlink" title="SublimeCodeIntel - 代码补全插件"></a>SublimeCodeIntel - 代码补全插件</h2><p><strong>Preferences –&gt; Package Settings –&gt; SublimeCodeIntel —&gt; Settings - Default</strong>    弟119行，添加以下代码（假设安装的是 python2.7，且为默认安装位置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"python"</span>:&#123;  </span><br><span class="line">    <span class="string">"python"</span>:<span class="string">"C:/Python27/python.exe"</span>,  </span><br><span class="line">    <span class="string">"pythonExtraPaths"</span>:[  </span><br><span class="line">         <span class="string">"C:/Python27/DLLs"</span>,  </span><br><span class="line">         <span class="string">"C:/Python27/Lib"</span>,  </span><br><span class="line">         <span class="string">"C:/Python27/Lib/lib-tk"</span>,  </span><br><span class="line">         <span class="string">"C:/Python27/Lib/site-packages"</span>,  </span><br><span class="line">  </span><br><span class="line">    ]  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="参考资料：-2"><a href="#参考资料：-2" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://blog.csdn.net/u013887008/article/details/49815567" target="_blank" rel="noopener">Sublime Text3中SublimeCodeIntel插件配置python环境</a></p><h2 id="SideBarEnhancements-侧边栏增强工具"><a href="#SideBarEnhancements-侧边栏增强工具" class="headerlink" title="SideBarEnhancements - 侧边栏增强工具"></a>SideBarEnhancements - 侧边栏增强工具</h2><p>如果 <strong>Preferences –&gt; Package Settings –&gt; Side Bar</strong> 存在，表明安装成功</p><p><strong>View —&gt; Side Bar</strong> 打开侧边栏</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/394" target="_blank" rel="noopener">如何配置 Sublime Text 3 的 Python 编程环境</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/335b2f4d-65bd-4454-a016-a6ef8d571907.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用 IDLE 写 python 习惯了，还是发现它有些简陋，于是准备转向 Sublime 的怀抱。（我比较喜欢轻量级的 IDE）&lt;/p&gt;
&lt;p&gt;为了方便用 Sublime 写 python 代码，我搜集了网上的一些资料，选出了常用 Python 编程的3个插件，整理出一篇轻量级的配置教程。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 年 7 月份阅读记录</title>
    <link href="https://windcode.github.io/2017/08/06/2017%20%E5%B9%B4%207%20%E6%9C%88%E4%BB%BD%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>https://windcode.github.io/2017/08/06/2017 年 7 月份阅读记录/</id>
    <published>2017-08-05T23:30:39.810Z</published>
    <updated>2018-05-13T14:25:51.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个月比较忙，没有正儿八经坐下来读几本书，倒是赶巧追完了几本网文。 _(:зゝ∠)_<br><a id="more"></a></p><p>发现一个月也就能读四本书，这个月读的书有：</p><ul><li>《雪中悍刀行》</li><li>《禁区之门》</li><li>《雪鹰领主》</li><li>《一九八四》</li></ul><p>##《雪中悍刀行》<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/045e7cbe-1315-4ff6-ba6c-7fcc627491df.jpg" alt=""></p><p><strong>标签</strong>：网文、武侠、玄幻、架空历史</p><p>用了半年时间才断断续续看完这部卷帙浩繁的网络小说，最初读这本书的原因是书荒菌（一个公众号）的推荐，鲜衣怒马、悍刀残雪，似乎是我的菜，再加上久仰这本书的大名，于是便下载了一本到手机上，开始读了起来，没想到这一读便过去了半年。</p><p>很久没有看完一本完整的网文，上次还是追更完番茄的《莽荒纪》。《雪中悍刀行》我也是当作追更小说来看，每天闲暇时拿出手机来看几章，融入一个奇幻的世界，已经成为一种习惯。</p><p>《雪中悍刀行》文笔在网文中算中上，读起来行云流水，人物刻画丰满，部分情节读起来热血沸腾。读这本书的过程，并不无聊，内容也不像很多网文一样YY的过分，破坏阅读体验。很多细节描写，都说的有理有据、头头是道，给人的感觉仿佛在看一部历史剧。可以说作者十分擅长营造气氛，这部分的文笔简直不像一个网文作者。书中有许多让人读起来豪情万丈、韵味无穷的片段，比如：  </p><blockquote><p>“世人不知何所求，那袭青衫放声笑：天不生我李淳罡，剑道万古如长夜！”，<br>“先生可否卖我几斤仁义道德”，<br>“不握剑了，握着她的手，这样的江湖，比什么都好”，<br>“北凉参差百万户，其中多少铁衣裹枯骨？”，<br>“功名付与酒一壶，试问帝王将相几抔土？”，<br>“来来来，试听谁在敲美人鼓。来来来，试看谁是阳间人屠？”，<br>      ……</p></blockquote><p>以及小说开头和结尾那一句“小二，上酒”，道不尽中间几千章故事多少曲折。</p><p>以上部分摘自网友所作《惶惶北凉镇灵歌》，全文贴在本节最后。</p><p>在这里顺便贴上知友“<strong>nanan</strong>”为《雪中悍刀行》作的另一首诗，穿插小说的主要事件：</p><blockquote><p>徐家有子名凤年，年少醉酒纵北凉。<br>劣马黄沙六千里，武帝城上剑九黄。<br>绣冬终临武当山，仙人指路斩大江。<br>武当当兴，舍一身黄庭，心有红尘尘皆禅。<br>下山回首一姑娘，人无薄情，抹半斤红妆。<br>煌煌一曲镇灵歌，剑道万古李淳罡。<br>木剑十文名温华，无人知他真儿郎。<br>先后故人，两座江湖。<br>我曾乱世宴歌舞，我曾溪边杀指玄。<br>我曾云空观世音，我曾陆地到沧海。<br>这江湖老去，这故人归去，再回首，不舍往事如风。<br>路尽头，且看一路高歌剑气长，真武见我我为王。<br>说北凉，道北凉，我名凤年字天狼。</p></blockquote><h4 id="我与网文"><a href="#我与网文" class="headerlink" title="我与网文"></a>我与网文</h4><p>每天最享受的时光大概就是吃饭时拿出手机短暂沉浸在幻想的世界的片刻，什么也不想，什么也不担心，只需看主角在另一个世界嬉笑怒骂、叱咤风云，仿佛书中的人物便是自己，在完成着自己曾经幻想过的事情，立一番传奇事业，庄周梦蝶，大抵如此。</p><p>记得曾经在学校看网文成瘾，备受煎熬，但当我离开高中，这“瘾”便自然而然戒掉。这种体验很奇怪，我想那个时候看网文只是为了给自己一个逃避的借口。如今看网文早已不至于沉迷，因为面前总有更重要、更有挑战性的事情等待去做。人生是 hard 模式，想要 easy 一些只有靠不断的练级，而看网文，对我来说已经成为刷副本之外的一种排解压力、放松神经的方式。</p><p>纪念曾经看网文的岁月，以及那时候共欢笑的书友。</p><p>另外期待这部小说拍成电视剧。</p><p><strong>推荐指数</strong>：★★★☆</p><blockquote><p>《惶惶北凉镇灵歌》<br>北凉参差百万户， 其中多少铁衣裹枯骨？<br>功名付与酒一壶，试问帝王将相几抔土？<br>山上走兔，林间睡狐， 气吞万里如虎。<br>珍珠十斛，红泥火炉， 素手蛮腰成孤。<br>十万弓弩，射杀无数。<br>百万头颅，滚落在路。<br>好男儿，莫要说那天下英雄入了吾谷。<br>小娘子，莫要将那爱慕思量深藏在腹。<br>来来来，试听谁在敲美人鼓？<br>吴家有女穿缟素。<br>来来来，试看谁是阳间人屠？<br>徐字王旗在逐鹿。<br>来来来，试问谁与我共江湖？<br>绿袍青衫去酆都。<br>来来来，试笑谁画玉京尊符？<br>人间久不见真武。<br>太安城中，九五尊前，大凉龙雀美人曾舞。<br>清凉山下，听潮阁上，守镇西北人屠横目。<br>天下悍勇只一石，八斗北凉收于库。<br>言我蛮狄畏我虎，敢讥敢笑不敢触。<br>世人问我骄兵与悍卒？<br>世人言我穷兵且黩武？<br>独御北莽十三州，曾扶离阳成共主。<br>春秋九国，一国功成八国奴。<br>十大门阀，不重社稷重宗族。<br>挥干戚，伐神木，马蹄直踏北汉都，兵锋斜指刑丘处，大魏南唐尽虚无。<br>斩剑皇，毁命途，孤军一开铁索落，九龙壁碎亡西蜀，六国国祚皆朽木。<br>西垒壁前动鱼鼓，襄樊城中万鬼哭。<br>风雨如晦景河役，大凰宫内绝大楚。<br>春秋曾巍巍，春秋已颓颓。<br>王侯将相大柱国，不过虚名与利禄。<br>离阳北凉与北莽，狗屠驴贩贼盗奴。<br>万世千秋，不过人屠骂名。<br>生前身后，无惧罄竹难书。<br>兴，百姓苦。<br>亡，百姓苦。<br>孤，独。<br>千秋，万古。<br>吴家女，辽东卒。<br>铁马金戈，霸业雄途。<br>君臣死国门，剑客老江湖。<br>冢间铁衣枯骨，人世巍巍浮屠。<br>逃不过美人迟暮，避不开英雄末路。<br>菩萨低眉金刚怒目，天人敕令剑仙横顾。<br>凄凄青史，毁誉凭谁书，煌煌镇灵，北凉永不负。<br>玄武当兴，慧剑但问情愫，大秦千年，悍刀不论沉浮。<br>呜呼？！愧何如之？<br>两辽袍泽六百墓，血流成河春秋路。<br>辗转征伐三万里，死战不退北凉卒！<br>凉刀斩落几豪阀，凉马踏破一江湖。<br>凉人埋骨三十州，凉王屠尽百万户。<br>呜呼？！怒何如之？<br>太安城内论太安，龙虎山前按龙虎。<br>紫禁山庄化丘墟，上阴学宫成迟暮。<br>野豺自此成家犬，书生往后拥铁骨。<br>谁哭殿前十四骑，谁见百战殆老卒。<br>嘘唏？！思何如之？<br>此生不曾悔当初，卿离剑冢我离孤。<br>青灯黄线缝布鞋，红颜绿蚁赠玉镯。<br>虎熊凤年龙象子，王妃剑仙洛神赋。<br>一去沽酒不见归，生离死别阴阳路。<br>曾梦年少把臂游，又见白衣亲擂鼓。<br>黄泉碧落无觅处，意冷心灰徒悲呼。<br>此剑扫平天下不平事，遇不平，自太平。<br>此剑无愧世间有愧人，杀有愧，方无愧。<br>谁道凉州尽匹夫，兴亡墓，睥睨庙堂几酸儒。<br>谁言边塞无风骨，慷慨处，天下雄文不足书。<br>游标弩，铁浮屠，大雪龙骑锋镝呜。<br>龙象力，虎熊怒，凤鸣声绝留青书。<br>掩古卷，心意已成枯。<br>忆旧人，豪烈凭谁赋？<br>徐骁生当作人杰， 徐骁死亦为鬼雄。<br>笑去酆都招旧部， 旌旗百万斩阎罗。<br>北凉。不悲凉。</p></blockquote><h2 id="《禁区之门》"><a href="#《禁区之门》" class="headerlink" title="《禁区之门》"></a>《禁区之门》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/9135dc87-594d-4b8d-a488-8585c6caf2c9.jpg" alt=""></p><p><strong>标签</strong>：黑客小说、网文</p><p>这本小说其实是第二次读，第一次是在初中还是高中。</p><p>这是一部讲述黑客的小说，和其它黑客类网文不同之处，首先在于他不过分YY，不像有些黑客网文，后期都开始开机甲了……其次，这部小说的主角在现实中是有原型的，他就是曾经入侵了北美空中防护指挥系统，被誉为“世界头号电脑黑客”的凯文·米特尼克，也就是说这部小说是网友根据真实人物生平，加上自己的YY，创作的小说。</p><p>凯文·米特尼克，在我眼里一直是传说中的人物，上个世界电脑刚刚兴起的时代，那个时候微软还没出现，乔布斯还是个孩子，凯文·米特尼克就开始研究电子设备，计算机的出现，对于他更具有无穷的吸引力，他把所有精力都投入到计算机的世界中，随着网络普及，他逐渐成长为一名叱咤于虚拟世界的黑客。可以说，他就是计算机世界中的天才。</p><p>这样的天才诞生于那个“网络安全”这个概念还没出现的年代，对于网络世界的冲击是极大的，他就像一个掌握了达摩克利斯之剑的剑客，指尖轻轻一翘，便震惊整个美国。15岁时，尼克入侵了“北美空中防护指挥系统”的计算机主机，同时和另外一些朋友翻遍了美国指向前苏联及其盟国的核弹头的数据资料，然后又悄然无息的溜了出来。这成为了黑客历史上一次经典之作。随后，他被FBI通缉，在和日本安全专家下村勉斗智斗勇逃亡了6年后（这又是另一番故事），他被捕入狱。</p><p>被当时网络爱好者誉为“黑客之王”的凯文·米特尼克入狱后，尼克的追随者们联名要求美国政府释放米特尼克。否则，他们将启动已经通过网络植入环球许多电脑中的病毒。</p><p>等等……</p><p>这就是凯文·米特尼克的故事，啰嗦了这么多，我只是想给大家普及一下曾经“黑客之王”的生平，以及顺便表达一下我对凯文·米特尼克大神的崇拜，他是指引我走上计算机这条道路的一座灯塔。</p><p>时间过去了很久，现在的凯文·米特尼克，是一名网络安全咨询专家。最近还看到一个消息，下个月（8月份）凯文·米特尼克将在北京举行的中国互联网安全峰会中首次露面。对我来说，无异于传奇走进现实，可惜无法去北京亲眼一见。</p><p>回到小说，这本网文的文笔略显幼稚，用带点传奇色彩的文笔，讲述了一个以凯文·米特尼克为原型的男孩痴迷计算机、慢慢成长为一个传奇的故事。YY场景比较多，但是是为数不多看着十分顺眼的黑客小说。总之我是把它当成三流传记小说来读的，看的还是蛮爽的。</p><p>推荐另一部小说，《灰塔笔记》，网友写的以艾伦·图灵为原型的传记小说（如果你能接受男同情节的话，2333）。</p><p><strong>推荐指数</strong>：★★★</p><h2 id="《雪鹰领主》"><a href="#《雪鹰领主》" class="headerlink" title="《雪鹰领主》"></a>《雪鹰领主》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/46df77cf-ad93-46e9-85e5-b43f9a9264ca.png" alt=""></p><p><strong>标签</strong>：玄幻、网文</p><p>泡菜类的网文，看着打发时光的，不谈文笔，只是看个热闹，不是十分推荐。</p><p>番茄的书风格稳定，不烂尾，和其它网文作者比起来，自然有他的特点，但依然摆脱不了网文的一贯的“套路”，他所有的书都像一个模子刻出来的，不过其中也有像《盘龙》这样让人印象深刻的作品。</p><p><strong>推荐指数</strong>：★★☆</p><h2 id="《一九八四》"><a href="#《一九八四》" class="headerlink" title="《一九八四》"></a>《一九八四》</h2><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/48847c0f-a63e-45a8-a6be-0e45d6847d27.png" alt=""></p><p><strong>标签</strong>：反乌托邦</p><p>《一九八四》是世界反乌托邦文学的三部代表作之一，所谓反乌托邦，不是反对乌托邦的意思，而是乌托邦的反面。在小说虚构的国度大洋国中，由老大哥为核心的政权掌握着国家的运行，他们把极权专制做到了极致。他们用思想警察和电传屏幕监控人的思想，根据需要改写历史，愚弄民众的心智，抹杀异端人士，整个社会充斥着谎言、欺骗和虚伪。“老大哥”控制着大洋国的现在和过去，他们相信也能控制未来。然而，小说中“老大哥”是否真的存在，都是一个谜。</p><p>“老大哥在看着你”，一句经典的翻译。1984年，乔布斯在超级碗比赛中致敬《一九八四》，放映了他们极具特色的苹果广告，广告中主角拿出锤子打碎了象征IBM的“老大哥”形象，在当时取得了巨大成功，我也是在那时知道《一九八四》这部反乌托邦系列的代表作。</p><p>读过之后才知道这是一部政治隐喻小说，你甚至能在书中学习到一些政治、社会学的规律。</p><p>小书中大洋国为什么要建立这样的国家制度？为什么要重新炮制历史？为什么不断地开启战争？这些都有原因，按书中的说法，人类社会中始终分三种人：上等人、中等人、下等人。下等人物资匮乏，民智未开；中等人解决了自身的温饱问题，渴望成为上等人；上等人把持权利，期望永远稳坐宝座。而随着科技进步，社会物资会越来越丰富，下等人逐渐摆脱温饱问题，有越来越多的精力去思考，他们会希望倾覆这样的等级制度。科技进步是无法阻止的，所以大洋国中的上等人，也就是“老大哥”为代表的内党成员，不断制造战争（甚至不是攻打别国，而是向自己的民众发动的），消耗过剩的劳动产品，使底层人民永远奔波在生计中，无心思考。这正应了书中那句话——“长远来看，等级社会只有建立在贫穷和无知的基础上，才有可能存在”，大洋国中的战争，不是为了攻占领土，而是保持社会结构不变。</p><p>关于炮制历史：你可以想象一个没有历史的国家，所有代表过去的文献全部由国家反复修订，炮制，直到找不到一片反映真实历史的片段。你知道历史是伪造的，但是永远拿不出证据来证明你的论点。这样的世界，何其可怕？这样的社会，甚至无法从历史中找到根据去推翻它。</p><p>书中还有很多精彩的见解，在这里不一一列出，感兴趣的可以读一读小说。</p><h4 id="关于译本"><a href="#关于译本" class="headerlink" title="关于译本"></a>关于译本</h4><p>《一九八四》有三个主流译本，按翻译年代排列：董乐山、刘绍铭、孙仲旭。个人感觉，董乐山的译本翻译贴近原著，但是有些生硬；刘绍铭的译本接读起来比较流畅；孙仲旭的译本没读过。网上有因为译本撕逼的，甚至还有“我行我上”自己翻译的，666，关于译本，见仁见智，读的开心就行，反正我喜欢刘绍铭版本~</p><p><strong>推荐指数</strong>：★★★★</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/393" target="_blank" rel="noopener">2017 年 7 月份阅读记录</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个月比较忙，没有正儿八经坐下来读几本书，倒是赶巧追完了几本网文。 _(:зゝ∠)_&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何写一个简单的分布式知乎爬虫？</title>
    <link href="https://windcode.github.io/2017/07/29/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%9F%A5%E4%B9%8E%E7%88%AC%E8%99%AB%EF%BC%9F/"/>
    <id>https://windcode.github.io/2017/07/29/如何写一个简单的分布式知乎爬虫？/</id>
    <published>2017-07-29T04:58:06.460Z</published>
    <updated>2018-05-13T14:25:51.974Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yangyingming.com/uploads/markdownx/2017/7/9c92390b-a18e-45ca-9452-4d43607c3d83.jpg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早就有采集知乎用户数据的想法，要实现这个想法，需要写一个网络爬虫（Web Spider）。因为在学习 python，正好 python 写爬虫也是极好的选择，于是就写了一个基于 python 的网络爬虫。</p><p>几个月前写了爬虫的初版，后来因为一些原因，暂时搁置了下来，最近重新拾起这个想法。首先优化了代码的结构，然后在学弟的提醒下，从多线程改成了多进程，一台机器上运行一个爬虫程序，会启动几百个子进程加速抓取。</p><p>但是一台机器的性能是有极限的，所以后来我使用 MongoDB 和 Redis 搭建了一个主从结构的分布式爬取系统，来进一步加快抓取的速度。</p><p>然后我就去好几个服务器厂商申请免费的试用，比如百度云、腾讯云、Ucloud…… 加上自己的笔记本，断断续续抓取了一个多周，才采集到300万知乎用户数据。中间还跑坏了运行网站的云主机，还好 <a href="http://yangyingming.com/article/359/" target="_blank" rel="noopener">自动备份</a> 起作用，数据没有丢失，但那又是另外一个故事了……</p><p>完整版的爬虫链接在这儿：<a href="https://github.com/windcode/zhihu-crawler-people" target="_blank" rel="noopener">windcode/zhihu-crawler-people</a>，走过路过别忘了点个 star ~</p><p>废话不多说，下面我介绍一下如何写一个简单的分布式知乎爬虫。<br><a id="more"></a></p><h2 id="抓取知乎用户的个人信息"><a href="#抓取知乎用户的个人信息" class="headerlink" title="抓取知乎用户的个人信息"></a>抓取知乎用户的个人信息</h2><p>我们要抓取知乎用户数据，首先要知道在哪个页面可以抓取到用户的数据。知乎用户的个人信息在哪里呢，当然是在用户的主页啦，我们以轮子哥为例 ~</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/662dde31-6aff-431c-853c-5fa7cfab620a.png" alt=""></p><p>红框里的便我们要抓取的用户关键信息（的一部分）。</p><p>最上面是我们的目标URL：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">观察一下这个URL的组成：</span><br><span class="line"></span><br><span class="line">http://www.zhihu.com + /people + **/excited-vczh** + /answer</span><br><span class="line"></span><br><span class="line">可以发现只有 **excited-vczh** 这部分是会变化的，它代表着知乎用户的唯一ID，在知乎的数据格式中，它的键名叫做 **urlToken**。</span><br><span class="line"></span><br><span class="line">所以我们可以用拼接字符串的形式，得到我们待抓取页面的URL：</span><br><span class="line">```python</span><br><span class="line">url = &apos;%s/people/%s/answers&apos;%(host,urlToken)</span><br></pre></td></tr></table></figure></p><p>页面URL有了，而且从上图我们可以发现 <strong>不登录</strong> 也可以访问用户主页，这说明我们可以不用考虑模拟登陆的问题，可以自由的获取用户主页面源码。</p><p>那么我们如何从用户主页的源码中获取用户的数据呢？一开始我以为需要挨个匹配页面中对应的部分，但我查看源码的时候发现知乎把用户数据集集中放到了源码的一个地方，那就是 id=”data” 的 div 的 <strong>data-state</strong> 属性的值中，看下图：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f3dd2c9c-3bed-4a85-9410-03ec7c0e195d.png" alt=""></p><p>从上图我们可以发现，<strong>date-state</strong> 的属性值中藏有用户的信息，比如我们可以依次找到用户的教育经历（educations）、简介（headline）、参与的 Live 数量（participatedLiveCount）、关注的收藏夹数量（followingFavlistsCount）、被收藏的次数（favoritedCount）、关注他的用户数（followerCount）、关注的话题数量（followingTopicCount）、用户描述（description）等信息。通过观察我们也可以发现，数据应该是以 JSON 格式存储。</p><p>知道了用户数据都藏在 <strong>date-state</strong> 中，我们 <strong>用 BeautifulSoup 把该属性的值取出来，然后作为 JSON 格式读取，再把数据集中存储用户数据的部分提取出来即可</strong>，看代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析html</span></span><br><span class="line">s = BS(html,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># 获得该用户藏在主页面中的json格式数据集</span></span><br><span class="line">data = s.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'id'</span>:<span class="string">'data'</span>&#125;)[<span class="string">'data-state'</span>]</span><br><span class="line">data = json.loads(data)</span><br><span class="line">data = data[<span class="string">'entities'</span>][<span class="string">'users'</span>][urlToken]</span><br></pre></td></tr></table></figure></p><p>如此，我们便得到了某一个用户的个人信息。</p><h2 id="抓取知乎用户的关注者列表"><a href="#抓取知乎用户的关注者列表" class="headerlink" title="抓取知乎用户的关注者列表"></a>抓取知乎用户的关注者列表</h2><p>刚刚我们讨论到可以通过抓取用户主页面源码来获取个人信息，而用户主页面可以通过拼接字符串的形式得到 URL，其中拼接的关键是 <strong>如何获取用户唯一ID —— urlToken</strong>？</p><p>我采用的方法是 <strong>抓取用户的关注者列表</strong>。</p><p>每个用户都会有关注者列表，比如轮子哥的：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/124e8122-d70b-4f8d-b1c0-264d7c8d508e.png" alt=""></p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/f035788a-8d0b-4704-8ee6-970e6fb44996.png" alt=""></p><p>和获取个人信息同样的方法，我们可以在该页面源码的 <strong>date-state</strong> 属性值中找到关注他的用户（一部分）：</p><p><img src="http://yangyingming.com/uploads/markdownx/2017/7/dae73fe7-a0e4-4500-87a8-fcd5cae55d3b.png" alt=""></p><p>名为 <strong>ids</strong> 的键值中存储有当前列表页的所有用户的 <strong>urlToken</strong>，默认列表的每一页显示20个用户，所以我们写一个循环便可以获取<strong>当前页</strong>该用户的所有关注者的 <strong>urlToken</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析当前页的 html   </span></span><br><span class="line">url = <span class="string">'%s/people/%s/followers?page=%d'</span>%(host,urlToken,page)</span><br><span class="line">html = c.get_html(url)</span><br><span class="line">s = BS(html,<span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前页的所有关注用户</span></span><br><span class="line">data = s.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'id'</span>:<span class="string">'data'</span>&#125;)[<span class="string">'data-state'</span>]</span><br><span class="line">data = json.loads(data)</span><br><span class="line">items = data[<span class="string">'people'</span>][<span class="string">'followersByUser'</span>][urlToken][<span class="string">'ids'</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line"><span class="keyword">if</span> item!=<span class="keyword">None</span> <span class="keyword">and</span> item!=<span class="keyword">False</span> <span class="keyword">and</span> item!=<span class="keyword">True</span> <span class="keyword">and</span> item!=<span class="string">'知乎用户'</span>.decode(<span class="string">'utf8'</span>):</span><br><span class="line">node = item.encode(<span class="string">'utf8'</span>)</span><br><span class="line">follower_list.append(node)</span><br></pre></td></tr></table></figure></p><p>再写一个循环遍历关注者列表的所有页，便可以获取用户的所有关注者的 urlToken。</p><p>有了每个用户在知乎的唯一ID，我们便可以通过拼接这个ID得到每个用户的主页面URL，进一步获取到每个用户的个人信息。</p><p>我选择抓取的是用户的<strong>关注者列表</strong>，即关注这个用户的所有用户（follower）的列表，其实你也可以选择抓取用户的<strong>关注列表</strong>（following）。我希望抓取更多知乎非典型用户（潜水用户），于是选择了抓取关注者列表。当时抓取的时候有这样的担心，万一这样抓不到主流用户怎么办？毕竟很多知乎大V虽然关注者很多，但是主动关注的人相对都很少，而且关注的很可能也是大V。但事实证明，主流用户基本都抓取到了，看来基数提上来后，总有缝隙出现。</p><h2 id="反爬虫机制"><a href="#反爬虫机制" class="headerlink" title="反爬虫机制"></a>反爬虫机制</h2><p>频繁抓取会被知乎封IP，也就是常说的反爬虫手段之一，不过俗话说“道高一尺，魔高一丈”，既然有反爬虫手段，那么就一定有反反爬虫手段，咳，我自己起的名……</p><p>言归正传，如果知乎封了你的IP，那么怎么办呢？很简单，换一个IP。这样的思想催生了 <strong>代理IP池</strong> 的诞生。所谓代理IP池，是一个代理IP的集合，使用代理IP可以伪装你的访问请求，让服务器以为你来自不同的机器。</p><p>于是我的 <strong>应对知乎反爬虫机制的策略</strong> 就很简单了：全力抓取知乎页面 –&gt; 被知乎封IP –&gt; 换代理IP –&gt; 继续抓 –&gt; 知乎继续封 –&gt; 继续换 IP….. （手动斜眼）</p><p>使用 代理IP池，你可以选择用付费的服务，也可以选择自己写一个，或者选择用现成的轮子。我选择用七夜写的 <a href="https://github.com/qiyeboy/IPProxyPool" target="_blank" rel="noopener">qiyeboy/IPProxyPool</a> 搭建代理池服务，部署好之后，修改了一下代码让它只保存https协议的代理IP，因为 <strong>使用http协议的IP访问知乎会被拒绝</strong>。</p><p>搭建好代理池服务后，我们便可以随时在代码中获取以及使用代理 IP 来伪装我们的访问请求啦！</p><p>（其实反爬手段有很多，代理池只是其中一种）</p><h2 id="简单的分布式架构"><a href="#简单的分布式架构" class="headerlink" title="简单的分布式架构"></a>简单的分布式架构</h2><p>多线程/多进程只是最大限度的利用了单台机器的性能，如果要利用多台机器的性能，便需要分布式的支持。</p><p>如何搭建一个简单的分布式爬虫？</p><p>我采用了 <strong>主从结构</strong>，即一台主机负责调度、管理待抓取节点，多台从机负责具体的抓取工作。</p><p>具体到这个知乎爬虫来说，<strong>主机上搭建了两个数据库</strong>：<strong>MongoDB 和 Redis</strong>。MongoDB 负责存储抓取到的知乎用户数据，Redis 负责维护待抓取节点集合。<strong>从机上可以运行两个不同的爬虫程序</strong>，一个是抓取用户关注者列表的爬虫（list_crawler），一个是抓取用户个人资料的爬虫（info_crawler），他们可以配合使用，但是互不影响。</p><p>我们重点讲讲主机上维护的集合，主机的 Redis 数据库中一共维护了5个集合：</p><ul><li>waiting：待抓取节点集合</li><li>info_success：个人信息抓取成功节点集合</li><li>info_failed：个人信息抓取失败节点集合</li><li>list_success：关注列表抓取成功节点集合</li><li>list_failed：关注列表抓取失败节点集合</li></ul><p>这里插一句，<strong>之所以采用集合（set），而不采用队列（queue）</strong>，是因为集合天然的带有唯一性，也就是说可以加入集合的节点一定是集合中没有出现过的节点，这里在5个集合中流通的节点其实是 <strong>urlToken</strong>。</p><p>（其实集合可以缩减为3个，省去失败集合，失败则重新投入原来的集合，但我为了测速所以保留了5个集合的结构）</p><p>他们的关系是：<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/c4595153-977e-4ee0-b5a7-217c31157ce2.png" alt=""></p><p><strong>举个具体的栗子</strong>：从一个 urlToken 在 waiting 集合中出现开始，经过一段时间，它被 info_crawler 爬虫程序从 waiting 集合中随机获取到，然后在 info_crawler 爬虫程序中抓取个人信息，如果抓取成功将个人信息存储到主机的 MongoDB 中，将该 urlToken 放到 info_success 集合中；如果抓取失败则将该 urlToken 放置到 info_failed 集合中。下一个阶段，经过一段时间后，list_crawler 爬虫程序将从 info_success 集合中随机获取到该 urlToken，然后尝试抓取该 urlToken 代表用户的关注者列表，如果关注者列表抓取成功，则将抓取到的所有关注者放入到 waiting 集合中，将该 urlToken 放到 list_success 集合中；如果抓取失败，将该 urlToken 放置到 list_failed 集合中。</p><p>如此，主机维护的数据库，配合从机的 info_crawler 和 list_crawler 爬虫程序，便可以循环起来：<strong>info_crawler 不断从 waiting 集合中获取节点，抓取个人信息，存入数据库；list_crawler 不断的补充 waiting 集合</strong>。</p><p>主机和从机的关系如下图：<br><img src="http://yangyingming.com/uploads/markdownx/2017/7/b08b1bc1-36a0-46a9-a844-3def95e249f1.png" alt=""></p><p>主机是一台外网/局域网可以访问的“服务器”，从机可以是PC/笔记本/Mac/服务器，这个架构可以部署在外网也可以部署在内网。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文分享的是如何写一个简单的分布式知乎爬虫，但愿能带给你启发。</p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><p><strong>转载请注明：<a href="http://www.yangyingming.com" target="_blank" rel="noopener">呓语</a> » <a href="http://www.yangyingming.com/article/392" target="_blank" rel="noopener">如何写一个简单的分布式知乎爬虫？</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yangyingming.com/uploads/markdownx/2017/7/9c92390b-a18e-45ca-9452-4d43607c3d83.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很早就有采集知乎用户数据的想法，要实现这个想法，需要写一个网络爬虫（Web Spider）。因为在学习 python，正好 python 写爬虫也是极好的选择，于是就写了一个基于 python 的网络爬虫。&lt;/p&gt;
&lt;p&gt;几个月前写了爬虫的初版，后来因为一些原因，暂时搁置了下来，最近重新拾起这个想法。首先优化了代码的结构，然后在学弟的提醒下，从多线程改成了多进程，一台机器上运行一个爬虫程序，会启动几百个子进程加速抓取。&lt;/p&gt;
&lt;p&gt;但是一台机器的性能是有极限的，所以后来我使用 MongoDB 和 Redis 搭建了一个主从结构的分布式爬取系统，来进一步加快抓取的速度。&lt;/p&gt;
&lt;p&gt;然后我就去好几个服务器厂商申请免费的试用，比如百度云、腾讯云、Ucloud…… 加上自己的笔记本，断断续续抓取了一个多周，才采集到300万知乎用户数据。中间还跑坏了运行网站的云主机，还好 &lt;a href=&quot;http://yangyingming.com/article/359/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自动备份&lt;/a&gt; 起作用，数据没有丢失，但那又是另外一个故事了……&lt;/p&gt;
&lt;p&gt;完整版的爬虫链接在这儿：&lt;a href=&quot;https://github.com/windcode/zhihu-crawler-people&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;windcode/zhihu-crawler-people&lt;/a&gt;，走过路过别忘了点个 star ~&lt;/p&gt;
&lt;p&gt;废话不多说，下面我介绍一下如何写一个简单的分布式知乎爬虫。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
